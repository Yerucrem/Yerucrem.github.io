<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>夜路归</title>
        <link>https://Yerucrem.github.io/</link>
        <description>Recent content on 夜路归</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Yerucrem</copyright>
        <lastBuildDate>Tue, 18 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://Yerucrem.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>DOM 文档对象模型</title>
        <link>https://Yerucrem.github.io/p/dom-%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</link>
        <pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/dom-%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</guid>
        <description>&lt;h1 id=&#34;dom&#34;&gt;DOM
&lt;/h1&gt;&lt;p&gt;Document Object Model 文档对象模型&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.w3.org/TR/REC-DOM-Level-1/introduction.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;什么是文档对象模型？ &amp;mdash; What is the Document Object Model?&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;dom-是什么&#34;&gt;DOM 是什么？
&lt;/h2&gt;&lt;p&gt;想象一下，你有一张房子的&lt;strong&gt;建筑蓝图&lt;/strong&gt;，上面画着房子的每一个部分：墙、门、窗户、屋顶等等。DOM 就像是网页的“蓝图”。当你打开一个网页，浏览器会把网页的 HTML 代码（那些 &lt;code&gt;&amp;lt;html&amp;gt;、&amp;lt;div&amp;gt;、&amp;lt;p&amp;gt;&lt;/code&gt; 标签）解析成一个树状结构，这个结构就是 DOM。它把网页里的每一个元素（比如标题、段落、图片）都整理得清清楚楚，让计算机（特别是 JavaScript）能找到它们、操作它们。&lt;/p&gt;
&lt;p&gt;简单来说，DOM 是网页的&lt;strong&gt;骨架图&lt;/strong&gt;，它把网页的内容变成一个个“节点”（node），这些节点就像蓝图上的标记点，互相之间还有父子关系、兄弟关系，形成一个大树。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;lt;head&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;title&amp;gt;我的网页&amp;lt;/title&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;lt;/head&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;lt;body&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;h1&amp;gt;欢迎&amp;lt;/h1&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;p&amp;gt;这是一个段落。&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;lt;/body&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在这个 HTML 里，DOM 会把它变成一个树形结构：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &amp;lt;html&amp;gt; 是根节点，就像树的树根，整个网页的起点。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &amp;lt;html&amp;gt; 下面有两个“孩子”：&amp;lt;head&amp;gt; 和 &amp;lt;body&amp;gt;。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &amp;lt;head&amp;gt; 里有个孩子 &amp;lt;title&amp;gt;，它的内容是“我的网页”。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &amp;lt;body&amp;gt; 里有两个孩子：&amp;lt;h1&amp;gt;（内容是“欢迎”）和 &amp;lt;p&amp;gt;（内容是“这是一个段落。”）。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;这就像一个家庭的家谱：&amp;lt;html&amp;gt; 是爷爷，&amp;lt;head&amp;gt; 和 &amp;lt;body&amp;gt; 是他的两个孩子，&amp;lt;title&amp;gt; 是 &amp;lt;head&amp;gt; 的孩子，&amp;lt;h1&amp;gt; 和 &amp;lt;p&amp;gt; 是 &amp;lt;body&amp;gt; 的孩子。每个节点都是一个“对象”，有自己的属性，比如 &amp;lt;p&amp;gt; 的 innerHTML 属性就是“这是一个段落。”。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;dom-有什么用&#34;&gt;DOM 有什么用？
&lt;/h2&gt;&lt;p&gt;DOM 的牛逼之处在于，它让 &lt;strong&gt;JavaScript&lt;/strong&gt; 能和网页互动。有了 DOM，JavaScript 就像一个装修工人，可以拿着网页的蓝图（DOM）去干活：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查看&lt;/strong&gt;：找到某个节点，看看它是什么内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;修改&lt;/strong&gt;：比如把 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 的文字从“这是一个段落。”改成“这是新段落！”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;添加&lt;/strong&gt;：在 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 里加一个新的 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;删除&lt;/strong&gt;：把某个节点去掉。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举个例子：你想做一个网页，用户点一个按钮，页面上的文字就变了。你可以用 JavaScript 写代码，通过 DOM 找到那个文字所在的节点，然后改它的内容。比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;找到 &amp;lt;p&amp;gt; 节点 let paragraph = document.querySelector(&amp;#34;p&amp;#34;); // 修改它的内容 paragraph.innerHTML = &amp;#34;文字被我改啦！&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;再比如，你想做一个待办事项列表，用户点按钮就能添加新任务。这也是通过 DOM 实现的：JavaScript 创建一个新节点（比如 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;），然后把它加到列表里。&lt;/p&gt;
&lt;h2 id=&#34;dom-是桥梁&#34;&gt;DOM 是桥梁
&lt;/h2&gt;&lt;p&gt;所以，DOM 就像是网页（HTML）和 JavaScript 之间的“翻译官”或者“桥梁”。HTML 负责写出网页的内容和结构，DOM 把这些内容变成一个树形结构，JavaScript 通过 DOM 来动态地控制网页，让网页不再是静态的，而是可以互动、有变化的。&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结
&lt;/h2&gt;&lt;p&gt;用最简单的话说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DOM 是网页的树形蓝图&lt;/strong&gt;，把每个元素都变成节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JavaScript 通过 DOM 操作网页&lt;/strong&gt;，可以改内容、加东西、删东西。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;它让网页变得活起来&lt;/strong&gt;，能根据用户的操作动态变化。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>SQL注入基础</title>
        <link>https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;h1 id=&#34;sql注入&#34;&gt;SQL注入
&lt;/h1&gt;&lt;p&gt;SQL 语法不区分大小写。&lt;/p&gt;
&lt;h2 id=&#34;sql基础&#34;&gt;SQL基础
&lt;/h2&gt;&lt;h3 id=&#34;select&#34;&gt;SELECT
&lt;/h3&gt;&lt;p&gt;我们将学习的第一种查询类型是用于从数据库中检索数据的 SELECT 查询。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160026857.png&#34;
	width=&#34;1382&#34;
	height=&#34;186&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160026857_hu_a1c29357c8e6bc5f.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160026857_hu_1836b73164289f9f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;743&#34;
		data-flex-basis=&#34;1783px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;第一个单词 SELECT 告诉数据库我们想要检索一些数据;* 告诉数据库我们想从表中接收所有列。例如，该表可能包含三列（id、username 和 password）。“from users” 告诉数据库我们想要从名为 users 的表中检索数据。最后，末尾的分号告诉数据库这是查询的结束。&lt;/p&gt;
&lt;p&gt;下一个查询与上述查询类似，但这次，我们不是使用 * 返回数据库表中的所有列，而是只请求 username 和 password 字段。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select username,password from users;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160107670.png&#34;
	width=&#34;1387&#34;
	height=&#34;195&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160107670_hu_8e6c560654a76494.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160107670_hu_2884f3b1ad65f1ab.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;711&#34;
		data-flex-basis=&#34;1707px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;与第一个查询一样，以下查询使用 * 选择器返回所有列，然后 “LIMIT 1” 子句强制数据库仅返回一行数据。将查询更改为 “LIMIT 1,1” 会强制查询跳过第一个结果，然后 “LIMIT 2,1” 会跳过前两个结果，依此类推。您需要记住，第一个数字告诉数据库您希望跳过多少个结果，第二个数字告诉数据库要返回多少行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users LIMIT 1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160133299.png&#34;
	width=&#34;1387&#34;
	height=&#34;100&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160133299_hu_2e8a28dd945dc7a0.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160133299_hu_116e6924d7b069e9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1387&#34;
		data-flex-basis=&#34;3328px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username=&#39;admin&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160158890.png&#34;
	width=&#34;1385&#34;
	height=&#34;98&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160158890_hu_cbc520106eb212d6.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160158890_hu_5907f8e5e5f3a511.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1413&#34;
		data-flex-basis=&#34;3391px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这只会返回 username 等于 admin 的行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username != &#39;admin&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160228981.png&#34;
	width=&#34;1381&#34;
	height=&#34;145&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160228981_hu_d99e773ab83e0c8f.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160228981_hu_38ec2d446e10dac6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;952&#34;
		data-flex-basis=&#34;2285px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这只会返回 username &lt;strong&gt;不&lt;/strong&gt; 等于 admin 的行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username=&#39;admin&#39; or username=&#39;jon&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160256822.png&#34;
	width=&#34;1385&#34;
	height=&#34;145&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160256822_hu_8fd58c4ebab6419d.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160256822_hu_5fdf7827852d7790.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;955&#34;
		data-flex-basis=&#34;2292px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这只会返回用户名等于 admin 或 jon 的行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username=&#39;admin&#39; and password=&#39;p4ssword&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160336441.png&#34;
	width=&#34;1393&#34;
	height=&#34;97&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160336441_hu_acc32e764ee4417c.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160336441_hu_c221c732b46efd62.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1436&#34;
		data-flex-basis=&#34;3446px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这只会返回用户名等于 &lt;strong&gt;admin&lt;/strong&gt; 且密码等于 &lt;strong&gt;p4ssword&lt;/strong&gt; 的行.&lt;/p&gt;
&lt;h4 id=&#34;like&#34;&gt;like
&lt;/h4&gt;&lt;p&gt;使用 like 子句允许您指定不完全匹配，而是以特定字符开头、包含或结尾的数据，方法是选择放置由百分号表示的通配符的位置。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username like &#39;%n&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160440356.png&#34;
	width=&#34;1387&#34;
	height=&#34;190&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160440356_hu_78ff5acf0bd4b1a9.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160440356_hu_8c94b8e109fd0298.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;730&#34;
		data-flex-basis=&#34;1752px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这将返回用户名以字母 n 结尾的任何行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username like &#39;%mi%&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160504321.png&#34;
	width=&#34;1386&#34;
	height=&#34;94&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160504321_hu_98281a8adc3aeea6.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160504321_hu_4fed7ff6c4e6fca9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1474&#34;
		data-flex-basis=&#34;3538px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这将返回用户名中包含字符 &lt;strong&gt;mi&lt;/strong&gt; 的任何行。&lt;/p&gt;
&lt;h3 id=&#34;union&#34;&gt;UNION
&lt;/h3&gt;&lt;p&gt;UNION 语句将两个或多个 SELECT 语句的结果组合在一起，以从单个或多个表中检索数据;此查询的规则是 UNION 语句必须在每个 SELECT 语句中检索相同数量的列，列必须具有相似的数据类型，并且列顺序必须相同。这听起来可能不是很清楚，所以让我们使用下面的类比。假设一家公司想要为所有客户和供应商创建一个地址列表，以便发布新目录。我们有一个名为 customers 的表，其中包含以下内容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160608318.png&#34;
	width=&#34;1389&#34;
	height=&#34;189&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160608318_hu_428dd879d21792b8.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160608318_hu_835186d4a4ba9826.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;734&#34;
		data-flex-basis=&#34;1763px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;另一个表叫 suppliers，内容如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160630628.png&#34;
	width=&#34;1382&#34;
	height=&#34;233&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160630628_hu_2dddac8afab7b28b.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160630628_hu_f103617d46af75ac.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;593&#34;
		data-flex-basis=&#34;1423px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;使用以下 SQL 语句，我们可以从两个表中收集结果并将它们放入一个结果集中：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SELECT name,address,city,postcode from customers UNION SELECT company,address,city,postcode from suppliers;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160656676.png&#34;
	width=&#34;1382&#34;
	height=&#34;370&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160656676_hu_996141177df5d8b5.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160656676_hu_27912512623d2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;373&#34;
		data-flex-basis=&#34;896px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;insert&#34;&gt;INSERT
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;INSERT&lt;/strong&gt; 语句告诉数据库我们希望在表中插入一行新数据。 &lt;strong&gt;“into users”&lt;/strong&gt; 告诉数据库我们希望将数据插入到哪个表中， &lt;strong&gt;“（username，password）”&lt;/strong&gt; 提供我们提供数据的列，然后 &lt;strong&gt;“values （&amp;lsquo;bob&amp;rsquo;，&amp;lsquo;password&amp;rsquo;）”;&lt;/strong&gt; 提供以前指定的列的数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;insert into users (username,password) values (&#39;bob&#39;,&#39;password123&#39;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160737067.png&#34;
	width=&#34;1387&#34;
	height=&#34;237&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160737067_hu_2299b42a7593e509.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160737067_hu_d5aafc4a61edec3c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;585&#34;
		data-flex-basis=&#34;1404px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;update&#34;&gt;UPDATE
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt; 语句告诉数据库我们希望更新表中的一行或多行数据。您使用 “&lt;strong&gt;update %tablename% SET&lt;/strong&gt;” 指定要更新的表，然后选择要更新的一个或多个字段，以逗号分隔的列表，例如 “&lt;strong&gt;username=&amp;lsquo;root&amp;rsquo;，password=&amp;lsquo;pass123&amp;rsquo;&lt;/strong&gt;”，最后，类似于 SELECT 语句，您可以使用 where 子句准确指定要更新的行，例如 “&lt;strong&gt;where username=&amp;lsquo;admin;&lt;/strong&gt;“&lt;/p&gt;
&lt;p&gt;&lt;code&gt;update users SET username=&#39;root&#39;,password=&#39;pass123&#39; where username=&#39;admin&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160817369.png&#34;
	width=&#34;1385&#34;
	height=&#34;239&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160817369_hu_1a146b842164f37c.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160817369_hu_1feee62a670e3ff5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;579&#34;
		data-flex-basis=&#34;1390px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;delete&#34;&gt;DELETE
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;DELETE&lt;/strong&gt; 语句告诉数据库我们希望删除一行或多行数据。除了缺少要返回的列之外，此查询的格式与 SELECT 非常相似。您可以使用 &lt;strong&gt;where&lt;/strong&gt; &lt;strong&gt;子句精确&lt;/strong&gt;指定要删除的数据，并使用 LIMIT 子句指定要删除的行 数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;delete from users where username=&#39;martin&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160846187.png&#34;
	width=&#34;1385&#34;
	height=&#34;187&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160846187_hu_cda7583a378e4286.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160846187_hu_5d14e1a6f115937a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;740&#34;
		data-flex-basis=&#34;1777px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;delete from users;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;由于查询中未使用 WHERE 子句，因此所有数据都已从表中删除。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160925268.png&#34;
	width=&#34;1388&#34;
	height=&#34;51&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160925268_hu_b04a9760ff2ede6d.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318160925268_hu_22142de98776489a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;2721&#34;
		data-flex-basis=&#34;6531px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;基础做题&#34;&gt;基础做题
&lt;/h2&gt;&lt;h3 id=&#34;in-band-sql-injection&#34;&gt;In-Band SQL Injection
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318163151079.png&#34;
	width=&#34;717&#34;
	height=&#34;472&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318163151079_hu_8d3e3435a4a000b4.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318163151079_hu_b2aef2d982353cbd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;151&#34;
		data-flex-basis=&#34;364px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;查询库&#34;&gt;查询库
&lt;/h4&gt;&lt;p&gt;利用union查询的原理，先确定回显的位置。&lt;/p&gt;
&lt;p&gt;构建 &lt;code&gt;0 UNION SELECT 1,2,3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看到页面情况，有三个回显位置&lt;/p&gt;
&lt;p&gt;构建 &lt;code&gt;0 UNION SELECT 1,2,database()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318162957019.png&#34;
	width=&#34;714&#34;
	height=&#34;174&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318162957019_hu_3d1600a4711191ff.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318162957019_hu_349fabb68713c43f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;410&#34;
		data-flex-basis=&#34;984px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以知道database的名字：sqli_one&lt;/p&gt;
&lt;h4 id=&#34;查询表&#34;&gt;查询表
&lt;/h4&gt;&lt;p&gt;构建 &lt;code&gt;0 UNION SELECT 1,2,group_concat(table_name) FROM information_schema.tables WHERE table_schema = &#39;sqli_one&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在此查询中，需要学习一些新内容。首先，方法 &lt;strong&gt;group_concat（）&lt;/strong&gt; 从多个返回的行中获取指定的列（在我们的例子中为 table_name），并将其放入一个以逗号分隔的字符串中。接下来是 &lt;strong&gt;information_schema&lt;/strong&gt; 数据库;数据库的每个用户都可以访问它，它包含有关该用户有权访问的所有数据库和表的信息。在这个特定的查询中，我们有兴趣列出 sqli_one 数据库中的所有 表，即 article 和 staff_users。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318163513022.png&#34;
	width=&#34;708&#34;
	height=&#34;256&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318163513022_hu_52b29624e6f26a28.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318163513022_hu_af4d549d5f8f86d3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;276&#34;
		data-flex-basis=&#34;663px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;由于第一级旨在发现 Martin 的密码，因此 staff_users 表是我们感兴趣的。我们可以再次利用 information_schema 数据库，通过以下查询找到此表的结构。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0 UNION SELECT 1,2,group_concat(column_name) FROM information_schema.columns WHERE table_name = &#39;staff_users&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318163803767.png&#34;
	width=&#34;713&#34;
	height=&#34;236&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318163803767_hu_536c84167fe6733d.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318163803767_hu_93e72086ea704fa0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;302&#34;
		data-flex-basis=&#34;725px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这与前面的 SQL 查询类似。但是，我们要检索的信息已从 table_name 更改为 &lt;strong&gt;column_name&lt;/strong&gt;，我们在 information_schema 数据库中查询的表已从 tables 更改为 &lt;strong&gt;columns&lt;/strong&gt;，并且我们正在搜索 table_name 列值为 staff_users 的任何行&lt;/p&gt;
&lt;p&gt;查询结果为 staff_users 表提供三列：id、password 和 username。我们可以使用以下查询的 username 和 password 列来检索用户的信息。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0 UNION SELECT 1,2,group_concat(username,&#39;:&#39;,password SEPARATOR &#39;&amp;lt;br&amp;gt;&#39;) FROM staff_users&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;同样，我们使用 group_concat 方法将所有行返回到一个字符串中，使其 更易于阅读。我们还添加了 &lt;strong&gt;，&amp;rsquo;：&amp;rsquo;，&lt;/strong&gt; 以将用户名和密码彼此分开。我们没有用逗号分隔，而是选择了 &lt;code&gt;HTML &amp;lt;br&amp;gt;&lt;/code&gt; 标签，该标签强制每个结果位于单独的行上，以便于阅读。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318164023522.png&#34;
	width=&#34;716&#34;
	height=&#34;274&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318164023522_hu_3d6144138148becd.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318164023522_hu_41dbb1a07f48362d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;261&#34;
		data-flex-basis=&#34;627px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;身份认证绕过盲注&#34;&gt;身份认证绕过盲注
&lt;/h3&gt;&lt;p&gt;与带内 SQL 注入不同，我们可以直接在屏幕上看到攻击的结果，而盲 SQLi 是指我们几乎没有收到反馈来确认我们注入的查询是否真的成功，这是因为错误消息已被禁用，但无论如何注入仍然有效。您可能会感到惊讶，我们只需要一点点反馈即可成功枚举整个数据库。&lt;/p&gt;
&lt;p&gt;最直接的盲 SQL 注入技术之一是绕过身份验证方法，例如登录表单。在这种情况下，我们对从数据库中检索数据并不那么感兴趣;我们只想通过登录。&lt;/p&gt;
&lt;p&gt;连接到用户数据库的登录表单的开发方式通常使 Web 应用程序对用户名和密码的内容不感兴趣，而更关心两者是否在 users 表中形成匹配的对。简单来说，Web 应用程序会询问数据库，“您有用户名为 bob 的用户，密码为 bob123 吗？ 数据库回答 Yes 或 No （true/false），并且根据该答案，指示 Web 应用程序是否允许您继续。&lt;/p&gt;
&lt;p&gt;考虑到上述信息，没有必要枚举有效的用户名/密码对。我们只需要创建一个以 yes/true 回复的数据库查询。&lt;/p&gt;
&lt;h4 id=&#34;实际&#34;&gt;实际：
&lt;/h4&gt;&lt;p&gt;SQL 注入示例的第二级显示了这个确切的示例。我们可以在标有 “SQL Query” 的框中看到，对数据库的查询如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username=&#39;%username%&#39; and password=&#39;%password%&#39; LIMIT 1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意：%username% 和 %password% 值取自登录表单字段。SQL Query （SQL 查询） 框中的初始值将为空，因为这些字段当前为空。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;要将其转换为始终返回 true 的查询，我们可以在 password 字段中输入以下内容：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#39; OR 1=1;--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这会将 SQL 查询转换为以下内容：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username=&#39;&#39; and password=&#39;&#39; OR 1=1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;因为 1=1 是 true 语句，并且我们使用了 &lt;strong&gt;OR&lt;/strong&gt; 运算符，所以这将始终导致查询返回 true，这满足 Web 应用程序逻辑，即数据库找到了有效的用户名/密码组合，并且应该允许访问。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318164540872.png&#34;
	width=&#34;704&#34;
	height=&#34;401&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318164540872_hu_f7894b51de964a5b.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318164540872_hu_10e61dff48569835.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;175&#34;
		data-flex-basis=&#34;421px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;基于布尔盲注&#34;&gt;基于布尔盲注
&lt;/h3&gt;&lt;p&gt;基于布尔值的 SQL 注入是指我们从注入尝试中收到的响应，可以是 true/false、yes/no、on/off、1/0 或任何只能有两个结果的响应。该结果确认了我们的 SQL Injection payload 成功或失败。在第一次检查时，您可能会觉得这种有限的回答无法提供太多信息。不过，仅通过这两个响应，就可以枚举整个数据库结构和内容。&lt;/p&gt;
&lt;h4 id=&#34;实际-1&#34;&gt;实际：
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318164756211.png&#34;
	width=&#34;714&#34;
	height=&#34;600&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318164756211_hu_253b239a58246ce7.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318164756211_hu_4e3cbd4d8b6b40f0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;119&#34;
		data-flex-basis=&#34;285px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;览器正文包含 &lt;strong&gt;{“taken”：true}&lt;/strong&gt;。此 API 端点复制了许多订阅表单上的常见功能，该功能检查用户名是否已注册，以提示用户选择不同的用户名。 由于 &lt;strong&gt;taken&lt;/strong&gt; 的值设置为 &lt;strong&gt;true&lt;/strong&gt;，因此我们可以假设用户名 admin 已注册。我们可以通过将模拟浏览器地址栏中的用户名从 &lt;strong&gt;admin&lt;/strong&gt; 更改为 &lt;strong&gt;admin123&lt;/strong&gt; 来确认这一点，按下 Enter 键后，你会看到所采用的值 现在已更改为 false&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username = &#39;%username%&#39; LIMIT 1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们唯一可以控制的输入是查询字符串中的用户名，我们必须使用它来执行 SQL 注入。将用户名保持为 &lt;strong&gt;admin123&lt;/strong&gt;，我们可以开始附加到此内容以尝试使数据库确认 true 内容，将 taken 字段的状态从 false 更改为 true。&lt;/p&gt;
&lt;p&gt;与前面的级别一样，我们的第一个任务是建立 users&amp;rsquo; 表中的列数，这可以通过使用 UNION 语句来实现。将 username 值更改为以下内容：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1;-- &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;由于 Web 应用程序已使用取为 false 的值 进行响应，因此我们可以确认这是不正确的列值。 继续添加更多列，直到我们得到 &lt;strong&gt;true&lt;/strong&gt; &lt;strong&gt;的 taken&lt;/strong&gt; 值 。您可以通过将 username 设置为以下值来确认答案为三列：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3;-- &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在我们已经确定了列数，我们可以进行数据库的枚举。我们的第一个任务是发现数据库名称。我们可以通过使用内置的 &lt;strong&gt;database（）&lt;/strong&gt; 方法，然后使用 &lt;strong&gt;like&lt;/strong&gt; 运算符来尝试查找将返回 true 状态的结果。&lt;/p&gt;
&lt;p&gt;尝试以下 username 值，看看会发生什么：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 where database() like &#39;%&#39;;--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们得到一个 true 响应，因为在 like 运算符中，我们只有 % 的值 ，它将匹配任何内容，因为它是通配符值。如果我们将通配符运算符更改为 **a%，**您将看到响应返回 false，这确认数据库名称不以字母 &lt;strong&gt;a&lt;/strong&gt; 开头。我们可以循环遍历所有字母、数字和字符，例如 - 和 _，直到找到匹配项。如果您将以下内容作为 username 值发送，您将收到一个 &lt;strong&gt;true&lt;/strong&gt; 响应，确认数据库名称以字母 &lt;strong&gt;s&lt;/strong&gt; 开头&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 where database() like &#39;s%&#39;;--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318165301765.png&#34;
	width=&#34;713&#34;
	height=&#34;302&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318165301765_hu_9de96fbaf5dca2b4.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318165301765_hu_a26ad05a7d162cfb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;236&#34;
		data-flex-basis=&#34;566px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;现在，您继续 数据库名称的下一个字符，直到找到另一个真实的响应，例如，&amp;lsquo;sa%&amp;rsquo;、&amp;lsquo;sb%&amp;rsquo;、&amp;lsquo;sc%&amp;rsquo; 等。继续此过程，直到发现数据库名称的所有字符，即 &lt;strong&gt;sqli_three&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318165348478.png&#34;
	width=&#34;712&#34;
	height=&#34;332&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318165348478_hu_56c70d60b176fa67.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318165348478_hu_26b8c9b707aac09a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;214&#34;
		data-flex-basis=&#34;514px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;我们已经建立了数据库名称，现在我们可以通过使用 information_schema 数据库使用类似的方法使用它来枚举表名。尝试将 username 设置为以下值：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 FROM information_schema.tables WHERE table_schema = &#39;sqli_three&#39; and table_name like &#39;a%&#39;;--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此查询在 &lt;strong&gt;tables&lt;/strong&gt; 表中的 information_schema 数据库中 查找数据库名称与 sqli_three 匹配 且表名称以字母 a 开头的结果。 由于上述查询导致 &lt;strong&gt;false&lt;/strong&gt; 响应，我们可以确认 sqli_three 数据库中没有以字母 a 开头的表。和以前一样，您需要在字母、数字和字符之间循环，直到找到正匹配项。&lt;/p&gt;
&lt;p&gt;您最终会在 sqli_three 数据库中发现一个名为 users 的表，您可以通过运行以下 username payload 来确认该表：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 FROM information_schema.tables WHERE table_schema = &#39;sqli_three&#39; and table_name=&#39;users&#39;;--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后，我们现在需要枚举 users 表中的列名 ，以便我们可以正确地搜索登录凭据。 同样，我们可以使用 information_schema 数据库和我们已经获得的信息来查询它的列名。使用下面的有效负载，我们搜索 columns 表，其中 database 等于 sqli_three，表名称为 users，列名称以字母 a 开头。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 FROM information_schema.COLUMNS WHERE TABLE_SCHEMA=&#39;sqli_three&#39; and TABLE_NAME=&#39;users&#39; and COLUMN_NAME like &#39;a%&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;同样， 您需要在字母、数字和字符之间循环，直到找到匹配项。由于您要查找多个结果，因此每次找到新的列名称时，都必须将其添加到有效负载中，以避免发现相同的结果。例如，找到名为 id 的列后，将其附加到原始有效负载中（如下所示）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 FROM information_schema.COLUMNS WHERE TABLE_SCHEMA=&#39;sqli_three&#39; and TABLE_NAME=&#39;users&#39; and COLUMN_NAME like &#39;a%&#39; and COLUMN_NAME !=&#39;id&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;重复此过程 3 次，您将发现列的 ID、用户名和密码。现在，您可以使用它来查询 &lt;strong&gt;users&lt;/strong&gt; 表以获取登录凭据。首先，您需要找到一个有效的用户名，您可以使用下面的有效负载：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 from users where username like &#39;a%&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 from users where username=&#39;admin&#39; and password like &#39;a%&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;基于时间的盲注&#34;&gt;基于时间的盲注
&lt;/h3&gt;&lt;p&gt;基于时间的盲目 SQL 注入与上述基于 布尔值的盲注非常相似，因为发送的请求相同，但这次没有明显的查询是错还是对的指示。相反，正确查询的指标基于查询完成所需的时间。此时间延迟是使用内置方法（如 &lt;strong&gt;SLEEP（x）&lt;/strong&gt; 和 UNION 语句引入的。SLEEP（） 方法只会在成功的 UNION SELECT 语句后执行。&lt;/p&gt;
&lt;p&gt;因此，例如，在尝试建立表中的列数时，您将使用以下查询：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT SLEEP(5);--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果响应时间没有暂停，则我们知道查询不成功，因此与之前的任务一样，我们添加另一列：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT SLEEP(5),2;--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;有效负载应产生 5 秒的延迟，确认 UNION 语句成功执行，并且有两列。&lt;/p&gt;
&lt;p&gt;按照布尔盲注的步骤，只是更改一下前面的语句，要改成sleep()形式&lt;/p&gt;
&lt;p&gt;最后得到admin：4961&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318171316143.png&#34;
	width=&#34;718&#34;
	height=&#34;751&#34;
	srcset=&#34;https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318171316143_hu_cb7995221c6c5571.png 480w, https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20250318171316143_hu_66fc748ecc61b4ac.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;95&#34;
		data-flex-basis=&#34;229px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>关于XSS基础的利用</title>
        <link>https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/</link>
        <pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/</guid>
        <description>&lt;h1 id=&#34;xss-thm-做题记录&#34;&gt;XSS THM 做题记录
&lt;/h1&gt;&lt;h2 id=&#34;level-one&#34;&gt;Level One:
&lt;/h2&gt;&lt;p&gt;看到一个表单，要您输入的姓名，输入姓名后，该表单将在下面的一行中显示，例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318144957610.png&#34;
	width=&#34;316&#34;
	height=&#34;228&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318144957610_hu_3f5e0d7e9590e393.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318144957610_hu_e780aa757374404d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;138&#34;
		data-flex-basis=&#34;332px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;如果查看 Page Source，将看到姓名反映在代码中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/f371398ba148e07e85b946028e7f6919.png&#34;
	width=&#34;261&#34;
	height=&#34;65&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/f371398ba148e07e85b946028e7f6919_hu_aef9284001d8b5ac.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/f371398ba148e07e85b946028e7f6919_hu_51b6035048d8eaa0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;401&#34;
		data-flex-basis=&#34;963px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;我们将尝试输入以下 JavaScript Payload，而不是输入姓名： &lt;code&gt;&amp;lt;script&amp;gt;alert(&#39;THM&#39;);&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;现在，当单击输入按钮时，将收到一个带有字符串 &lt;strong&gt;THM&lt;/strong&gt; 的警报弹出窗口，页面源代码将如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145139853.png&#34;
	width=&#34;487&#34;
	height=&#34;80&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145139853_hu_4531f77b934076aa.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145139853_hu_8c8ae7bf91ef05dd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;608&#34;
		data-flex-basis=&#34;1461px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;level-two&#34;&gt;Level Two：
&lt;/h2&gt;&lt;p&gt;与上一个级别一样，系统将再次要求您输入的姓名。这一次，当单击 enter 时，姓名将反映在 input 标签中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145218406.png&#34;
	width=&#34;375&#34;
	height=&#34;227&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145218406_hu_9e11e95d99ead5af.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145218406_hu_70288d14c3e501c9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;165&#34;
		data-flex-basis=&#34;396px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;查看页面源，可以看到姓名反映在 input 标签的 value 属性中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145236972.png&#34;
	width=&#34;427&#34;
	height=&#34;79&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145236972_hu_cb602354a661cf98.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145236972_hu_3c1e1118c75ecf05.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;540&#34;
		data-flex-basis=&#34;1297px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;如果要尝试前面的 JavaScript 有效负载，它将不起作用，因为无法从 input 标签内部运行它。相反，我们需要先转义 input 标签，以便 payload 可以正常运行。可以使用以下有效负载执行此作：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;&amp;gt;&amp;lt;script&amp;gt;alert(&#39;THM&#39;);&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;有效负载的重要部分是&lt;code&gt;“&amp;gt;&lt;/code&gt;”，它关闭 value 参数，然后关闭 input 标记。&lt;/p&gt;
&lt;p&gt;现在，这会正确关闭 input 标记并允许 JavaScript 有效负载运行：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145309755.png&#34;
	width=&#34;670&#34;
	height=&#34;84&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145309755_hu_beccc75d1828ee80.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145309755_hu_5d16b6b425b890fe.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;797&#34;
		data-flex-basis=&#34;1914px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;level-three&#34;&gt;Level Three:
&lt;/h2&gt;&lt;p&gt;看到另一个表单，询问名字，与上一级一样，名字会反映在 HTML 标签中，这次是 textarea 标签。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145339066.png&#34;
	width=&#34;316&#34;
	height=&#34;250&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145339066_hu_5af4afc671cd80a5.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145339066_hu_72ba392f054a225f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;126&#34;
		data-flex-basis=&#34;303px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;我们必须使用以下有效负载，以略微不同的方式转义 textarea 标签和输入 1（在 Level Two 中）：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;/textarea&amp;gt;&amp;lt;script&amp;gt;alert(&#39;THM&#39;);&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145402800.png&#34;
	width=&#34;477&#34;
	height=&#34;76&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145402800_hu_a0e26319b198c447.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145402800_hu_878d1b1900c1bf43.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;627&#34;
		data-flex-basis=&#34;1506px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145411794.png&#34;
	width=&#34;774&#34;
	height=&#34;85&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145411794_hu_c4ec8df1e260583e.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145411794_hu_fb075b140af2ca33.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;910&#34;
		data-flex-basis=&#34;2185px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;上述有效负载的重要部分是 &lt;code&gt;&amp;lt;/textarea&amp;gt;&lt;/code&gt;，它会导致 textarea 元素关闭，以便脚本运行。&lt;/p&gt;
&lt;h2 id=&#34;level-four&#34;&gt;Level Four:
&lt;/h2&gt;&lt;p&gt;在表单中输入姓名，会在页面上看到它。此级别看起来类似于 1 级，但在检查页面源代码时，会看到名字反映在一些 JavaScript 代码中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145451931.png&#34;
	width=&#34;627&#34;
	height=&#34;78&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145451931_hu_86ebd1dafe5e8f37.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145451931_hu_9c6573fe23e9a73.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;803&#34;
		data-flex-basis=&#34;1929px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;必须转义现有的 JavaScript 命令，以便能够运行代码;可以使用以下有效负载 &lt;code&gt;&#39;;alert（&#39;THM&#39;）;//&lt;/code&gt; 从下面的屏幕截图中可以看到，它将执行代码。&lt;code&gt;&#39;&lt;/code&gt; 关闭指定名称的字段，然后 &lt;code&gt;;&lt;/code&gt;表示当前命令的结束，末尾的 则``使它后面的任何内容成为注释，而不是可执行代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145515388.png&#34;
	width=&#34;726&#34;
	height=&#34;82&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145515388_hu_3d498d5a8d887b99.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145515388_hu_928796f51fd9e8b4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;885&#34;
		data-flex-basis=&#34;2124px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;level-five&#34;&gt;Level Five:
&lt;/h2&gt;&lt;p&gt;现在，此级别看起来与级别 1 相同，并且名字也会反映在同一个位置。但是，如果尝试有效负载 &lt;code&gt;&amp;lt;script&amp;gt;alert(&#39;THM&#39;);&amp;lt;/script&amp;gt;&lt;/code&gt; ，它将不起作用。当查看页面源代码时，将了解原因。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145543128.png&#34;
	width=&#34;407&#34;
	height=&#34;81&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145543128_hu_88e2fa256b61ebde.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145543128_hu_cefdf50d144b9c64.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;502&#34;
		data-flex-basis=&#34;1205px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;script&lt;/code&gt; 会从有效负载中删除，这是因为有一个过滤器可以去除任何具有潜在危险的单词。&lt;/p&gt;
&lt;p&gt;当一个单词从字符串中删除时，你可以尝试一个有用的技巧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145609648.png&#34;
	width=&#34;399&#34;
	height=&#34;291&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145609648_hu_dbb025f2ebddacf7.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145609648_hu_27107828d168a61.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;137&#34;
		data-flex-basis=&#34;329px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;尝试输入有效负载 &lt;code&gt;&amp;lt;sscriptcript&amp;gt;alert(&#39;THM&#39;);&amp;lt;/sscriptcript&amp;gt;&lt;/code&gt; 并单击输入按钮，将看到一个带有字符串 THM 的警报弹出窗口。&lt;/p&gt;
&lt;h2 id=&#34;level-six&#34;&gt;Level Six:
&lt;/h2&gt;&lt;p&gt;与第二级类似，我们必须从 input 标签的 value 属性中转义，我们可以尝试 &lt;code&gt;&amp;quot;&amp;gt;&amp;lt;script&amp;gt;alert(&#39;THM&#39;);&amp;lt;/script&amp;gt; &lt;/code&gt;，但这似乎不起作用。让我们检查一下页面源代码，看看为什么这不起作用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145640111.png&#34;
	width=&#34;470&#34;
	height=&#34;105&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145640111_hu_c413b54e424f2db4.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145640111_hu_358ff87cb4c56784.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;447&#34;
		data-flex-basis=&#34;1074px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到 &amp;lt; 和 &amp;gt; 字符从我们的 payload 中被过滤掉，从而阻止我们转义 IMG 标签。为了绕过过滤器，我们可以利用 IMG 标签的其他属性，比如 onload 事件。onload 事件将在 src 属性中指定的图像加载到网页后执行您选择的代码。&lt;/p&gt;
&lt;p&gt;让我们更改 payload 以反映这一点 &lt;code&gt;/images/cat.jpg&amp;quot; onload=&amp;quot;alert(&#39;THM&#39;);&lt;/code&gt; ，然后查看页面源，您将看到这将如何工作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145659486.png&#34;
	width=&#34;535&#34;
	height=&#34;92&#34;
	srcset=&#34;https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145659486_hu_6e4c4cf7c64285c3.png 480w, https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/image-20250318145659486_hu_9c074b55d4e67b25.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;581&#34;
		data-flex-basis=&#34;1395px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;polyglots&#34;&gt;Polyglots:
&lt;/h2&gt;&lt;p&gt;XSS 多语言是一串文本，可以一站式转义属性、标签和绕过过滤器。可以在刚刚完成的所有 6 个级别上使用以下多语言，并且它会成功执行代码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;jaVasCript&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:/*-/*&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*\`/*&amp;#39;/*&amp;#34;/**/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* */&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onerror&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;THM&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//%0D%0A%0d%0a//&amp;lt;/stYle/&amp;lt;/titLe/&amp;lt;/teXtarEa/&amp;lt;/scRipt/--!&amp;gt;\x3csVg/&amp;lt;sVg/oNloAd=alert(&amp;#39;THM&amp;#39;)//&amp;gt;\x3e
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>利用github实现自动部署</title>
        <link>https://Yerucrem.github.io/p/%E5%88%A9%E7%94%A8github%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</link>
        <pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/%E5%88%A9%E7%94%A8github%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</guid>
        <description>&lt;h1 id=&#34;自动部署&#34;&gt;自动部署
&lt;/h1&gt;&lt;h2 id=&#34;参考&#34;&gt;参考
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://letere-gzj.github.io/hugo-stack/p/hugo/custom-blog/#32-github-action%e8%87%aa%e5%8a%a8%e9%83%a8%e7%bd%b2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【Hugo】Hugo + Github 免费部署自己的博客&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;首次部署&#34;&gt;首次部署
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;first commit&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch -M main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote add origin {你的github仓库地址}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push -u origin main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;更新&#34;&gt;更新
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit -m &amp;#34;update&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch -M main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>命令注入基础</title>
        <link>https://Yerucrem.github.io/p/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;h1 id=&#34;命令注入&#34;&gt;命令注入
&lt;/h1&gt;&lt;h2 id=&#34;分类&#34;&gt;分类
&lt;/h2&gt;&lt;p&gt;命令注入主要可以通过以下两种方式之一进行检测：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;盲命令注入&lt;/li&gt;
&lt;li&gt;详细命令注入&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;方法&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;盲&lt;/td&gt;
          &lt;td&gt;这种类型的注入是在测试有效负载时应用程序没有直接输出的地方。您必须调查应用程序的行为，以确定您的有效负载是否成功。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;详细&lt;/td&gt;
          &lt;td&gt;这种类型的注入是测试有效负载后从应用程序获得直接反馈的地方。例如，运行 &lt;code&gt;whoami&lt;/code&gt; 命令以查看应用程序在哪个用户下运行。Web 应用程序将直接在页面上输出用户名。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;有用的有效载荷&#34;&gt;有用的有效载荷
&lt;/h2&gt;&lt;h3 id=&#34;linux&#34;&gt;Linux
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;有效载荷&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;whoami&lt;/td&gt;
          &lt;td&gt;查看应用程序在哪个用户下运行。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ls&lt;/td&gt;
          &lt;td&gt;列出当前目录的内容。您也许能够找到配置文件、环境文件（令牌和应用程序密钥）等文件，以及更多有价值的内容。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ping&lt;/td&gt;
          &lt;td&gt;此命令将调用应用程序以挂起。这在测试应用程序是否进行盲命令注入时非常有用。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;sleep&lt;/td&gt;
          &lt;td&gt;这是测试应用程序盲目命令注入时的另一个有用有效负载，其中计算机未安装 &lt;code&gt;ping&lt;/code&gt;。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;nc&lt;/td&gt;
          &lt;td&gt;Netcat 可用于在易受攻击的应用程序上生成反向 shell。您可以使用此立足点在目标计算机上导航，以获取其他服务、文件或提升权限的潜在方法。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;windows&#34;&gt;windows
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;有效载荷&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;whoami&lt;/td&gt;
          &lt;td&gt;查看应用程序在哪个用户下运行。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;dir&lt;/td&gt;
          &lt;td&gt;列出当前目录的内容。您也许能够找到配置文件、环境文件（令牌和应用程序密钥）等文件，以及更多有价值的内容。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ping&lt;/td&gt;
          &lt;td&gt;此命令将调用应用程序以挂起。这在测试应用程序是否进行盲命令注入时非常有用。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;timeout&lt;/td&gt;
          &lt;td&gt;此命令还将调用应用程序以挂起。如果未安装 &lt;code&gt;ping&lt;/code&gt; 命令，则它还可用于测试应用程序是否进行盲命令注入。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>其一</title>
        <link>https://Yerucrem.github.io/p/%E5%85%B6%E4%B8%80/</link>
        <pubDate>Tue, 11 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/%E5%85%B6%E4%B8%80/</guid>
        <description></description>
        </item>
        <item>
        <title>归档</title>
        <link>https://Yerucrem.github.io/archives/</link>
        <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>关于</title>
        <link>https://Yerucrem.github.io/%E5%85%B3%E4%BA%8E/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/%E5%85%B3%E4%BA%8E/</guid>
        <description>&lt;p&gt;This is a test page for i18n support.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>搜索</title>
        <link>https://Yerucrem.github.io/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/search/</guid>
        <description></description>
        </item>
        <item>
        <title>友链</title>
        <link>https://Yerucrem.github.io/%E5%8F%8B%E9%93%BE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/%E5%8F%8B%E9%93%BE/</guid>
        <description>&lt;!-- To use this feature, add `links` section to frontmatter.

This page&#39;s frontmatter:

```yaml
links:
  - title: GitHub
    description: GitHub is the world&#39;s largest software development platform.
    website: https://github.com
    image: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
  - title: TypeScript
    description: TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.
    website: https://www.typescriptlang.org
    image: ts-logo-128.jpg
```

`image` field accepts both local and external images. --&gt;</description>
        </item>
        
    </channel>
</rss>
